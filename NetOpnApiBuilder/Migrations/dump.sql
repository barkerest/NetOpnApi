PRAGMA foreign_keys=OFF;
BEGIN TRANSACTION;
CREATE TABLE IF NOT EXISTS "ApiCommands" (
    "ID" INTEGER NOT NULL CONSTRAINT "PK_ApiCommands" PRIMARY KEY AUTOINCREMENT,
    "ApiName" TEXT NOT NULL,
    "ClrName" TEXT NOT NULL,
    "UsePost" INTEGER NOT NULL,
    "Signature" TEXT NOT NULL,
    "Comment" TEXT NULL,
    "Body" TEXT NOT NULL,
    "ControllerID" INTEGER NOT NULL,
    "NewCommand" INTEGER NOT NULL,
    "CommandChanged" INTEGER NOT NULL,
    "PostBodyDataType" INTEGER NULL,
    "PostBodyObjectTypeID" INTEGER NULL,
    "ResponseBodyDataType" INTEGER NULL,
    "ResponseBodyObjectTypeID" INTEGER NULL,
    "SourceVersion" TEXT NULL,
    "Skip" INTEGER NOT NULL, PostBodyPropertyName VARCHAR(100), ResponseBodyPropertyName VARCHAR(100),
    CONSTRAINT "FK_ApiCommands_ApiControllers_ControllerID" FOREIGN KEY ("ControllerID") REFERENCES "ApiControllers" ("ID") ON DELETE CASCADE,
    CONSTRAINT "FK_ApiCommands_ApiObjectTypes_PostBodyObjectTypeID" FOREIGN KEY ("PostBodyObjectTypeID") REFERENCES "ApiObjectTypes" ("ID") ON DELETE SET NULL,
    CONSTRAINT "FK_ApiCommands_ApiObjectTypes_ResponseBodyObjectTypeID" FOREIGN KEY ("ResponseBodyObjectTypeID") REFERENCES "ApiObjectTypes" ("ID") ON DELETE SET NULL
);
INSERT INTO ApiCommands VALUES(1,'logon','Logon',1,'function logonAction($zoneid = 0)',replace('/**\n     * logon client to zone, must use post type of request\n     * @param int|string zone id number\n     * @return array\n     * @throws \OPNsense\Base\ModelException\n     */','\n',char(10)),replace('{\n        $clientIp = $this->getClientIp();\n        if ($this->request->isOptions()) {\n            // return empty result on CORS preflight\n            return array();\n        } elseif ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            // init variables for authserver object and name\n            $authServer = null;\n            $authServerName = "";\n\n            // get username from post\n            $userName = $this->request->getPost("user", "striptags", null);\n\n            // search zone info, to retrieve list of authenticators\n            $mdlCP = new CaptivePortal();\n            $cpZone = $mdlCP->getByZoneID($zoneid);\n            if ($cpZone != null) {\n                if (trim((string)$cpZone->authservers) != "") {\n                    // authenticate user\n                    $isAuthenticated = false;\n                    $authFactory = new AuthenticationFactory();\n                    foreach (explode('','', (string)$cpZone->authservers) as $authServerName) {\n                        $authServer = $authFactory->get(trim($authServerName));\n                        if ($authServer != null) {\n                            // try this auth method\n                            $isAuthenticated = $authServer->authenticate(\n                                $userName,\n                                $this->request->getPost("password", "string")\n                            );\n\n                            // check group when group enforcement is set\n                            if ($isAuthenticated && (string)$cpZone->authEnforceGroup != "") {\n                                $isAuthenticated = $authServer->groupAllowed($userName, $cpZone->authEnforceGroup);\n                            }\n\n                            if ($isAuthenticated) {\n                                // stop trying, when authenticated\n                                break;\n                            }\n                        }\n                    }\n                } else {\n                    // no authentication needed, set username to "anonymous@ip"\n                    $userName = "anonymous@" . $clientIp;\n                    $isAuthenticated = true;\n                }\n\n                if ($isAuthenticated) {\n                    $this->getLogger("captiveportal")->info("AUTH " . $userName .  " (" . $clientIp . ") zone " . $zoneid);\n                    // when authenticated, we have $authServer available to request additional data if needed\n                    $clientSession = $this->clientSession($cpZone->zoneid);\n                    if ($clientSession[''clientState''] == ''AUTHORIZED'') {\n                        // already authorized, return current session\n                        return $clientSession;\n                    } else {\n                        // allow client to this captiveportal zone\n                        $backend = new Backend();\n                        $CPsession = $backend->configdpRun(\n                            "captiveportal allow",\n                            array(\n                                (string)$cpZone->zoneid,\n                                $userName,\n                                $clientIp,\n                                $authServerName,\n                                ''json''\n                            )\n                        );\n                        $CPsession = json_decode($CPsession, true);\n                        // push session restrictions, if they apply\n                        if ($CPsession != null && array_key_exists(''sessionId'', $CPsession) && $authServer != null) {\n                            $authProps = $authServer->getLastAuthProperties();\n                            // when adding more client/session restrictions, extend next code\n                            // (currently only time is restricted)\n                            if (array_key_exists(''session_timeout'', $authProps) || $cpZone->alwaysSendAccountingReqs == ''1'') {\n                                $backend->configdpRun(\n                                    "captiveportal set session_restrictions",\n                                    array((string)$cpZone->zoneid,\n                                        $CPsession[''sessionId''],\n                                        $authProps[''session_timeout''] ?? null,\n                                        )\n                                );\n                            }\n                        }\n                        if ($CPsession != null) {\n                            // only return session if configd return a valid json response, otherwise fallback to\n                            // returning "UNKNOWN"\n                            return $CPsession;\n                        }\n                    }\n                } else {\n                    $this->getLogger("captiveportal")->info("DENY " . $userName .  " (" . $clientIp . ") zone " . $zoneid);\n                    return array("clientState" => ''NOT_AUTHORIZED'', "ipAddress" => $clientIp);\n                }\n            }\n        }\n\n        return array("clientState" => ''UNKNOWN'', "ipAddress" => $clientIp);\n    }','\n',char(10)),1,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(2,'logoff','Logoff',0,'function logoffAction($zoneid = 0)',replace('/**\n     * logoff client\n     * @param int|string zone id number\n     * @return array\n     * @throws \OPNsense\Base\ModelException\n     */','\n',char(10)),replace('{\n        if ($this->request->isOptions()) {\n            // return empty result on CORS preflight\n            return array();\n        } else {\n            $this->sessionClose();\n            $clientSession = $this->clientSession((string)$zoneid);\n            if (\n                $clientSession[''clientState''] == ''AUTHORIZED'' &&\n                $clientSession[''authenticated_via''] != ''---ip---'' &&\n                $clientSession[''authenticated_via''] != ''---mac---''\n            ) {\n                // you can only disconnect a connected client\n                $backend = new Backend();\n                $statusRAW = $backend->configdpRun(\n                    "captiveportal disconnect",\n                    array($zoneid, $clientSession[''sessionId''], ''json'')\n                );\n                $status = json_decode($statusRAW, true);\n                if ($status != null) {\n                    $this->getLogger("captiveportal")->info(\n                        "LOGOUT " . $clientSession[''userName''] .  " (" . $this->getClientIp() . ") zone " . $zoneid\n                    );\n                    return $status;\n                }\n            }\n        }\n        return array("clientState" => "UNKNOWN", "ipAddress" => $this->getClientIp());\n    }','\n',char(10)),1,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(3,'status','Status',1,'function statusAction($zoneid = 0)',replace('/**\n     * retrieve session info\n     * @param int|string zone id number\n     * @return array\n     * @throws \OPNsense\Base\ModelException\n     */','\n',char(10)),replace('{\n        if ($this->request->isOptions()) {\n            // return empty result on CORS preflight\n            return array();\n        } elseif ($this->request->isPost() || $this->request->isGet()) {\n            $this->sessionClose();\n            $clientSession = $this->clientSession((string)$zoneid);\n            return $clientSession;\n        }\n    }','\n',char(10)),1,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(4,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure captive portal\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            // the ipfw rules need to know about all the zones, so we need to reload ipfw for the portal to work\n            $backend->configdRun(''template reload OPNsense/IPFW'');\n            $bckresult = trim($backend->configdRun("ipfw reload"));\n            if ($bckresult == "OK") {\n                // generate captive portal config\n                $bckresult = trim($backend->configdRun(''template reload OPNsense/Captiveportal''));\n                if ($bckresult == "OK") {\n                    $mdlCP = new CaptivePortal();\n                    if ($mdlCP->isEnabled()) {\n                        $bckresult = trim($backend->configdRun("captiveportal restart"));\n                        if ($bckresult == "OK") {\n                            $status = "ok";\n                        } else {\n                            $status = "error reloading captive portal";\n                        }\n                    } else {\n                        $backend->configdRun("captiveportal stop");\n                        $status = "ok";\n                    }\n                } else {\n                    $status = "error reloading captive portal template";\n                }\n            } else {\n                $status = "error reloading captive portal rules (" . $bckresult . ")";\n            }\n\n            return array("status" => $status);\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),2,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(5,'getTemplate','GetTemplate',0,'function getTemplateAction($fileid = null)',replace('/**\n     * @param null $fileid unique template id (fileid field)\n     * @return mixed\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        // get template name\n        $paramfilter = new Filter();\n        if ($fileid != null) {\n            $templateFileId = $paramfilter->sanitize($fileid, ''alphanum'');\n        } else {\n            $templateFileId = ''default'';\n        }\n\n        // request template data and output result (zipfile)\n        $backend = new Backend();\n        $response = $backend->configdpRun("captiveportal fetch_template", array($templateFileId));\n        $result = json_decode($response, true);\n        if ($result != null) {\n            $response = $result[''payload''];\n            $this->response->setRawHeader("Content-Type: application/octet-stream");\n            $this->response->setRawHeader("Content-Disposition: attachment; filename=template_" . $templateFileId . ".zip");\n            return base64_decode($response);\n        } else {\n            // return empty response on error\n            return "";\n        }\n    }','\n',char(10)),2,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(6,'saveTemplate','SaveTemplate',1,'function saveTemplateAction()',replace('/**\n     * save template, updates existing or create new.\n     * @return string\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost() && $this->request->hasPost("name")) {\n            $this->sessionClose();\n            $templateName = $this->request->getPost("name", "striptags");\n            $mdlCP = new CaptivePortal();\n            if ($this->request->hasPost("uuid")) {\n                $uuid = $this->request->getPost("uuid", "striptags");\n                $template = $mdlCP->getNodeByReference(''templates.template.'' . $uuid);\n                if ($template == null) {\n                    return array("name" => $templateName, "error" => "node not found");\n                }\n            } else {\n                $template = $mdlCP->getTemplateByName($templateName);\n            }\n\n            // cleanse input content, we only want to save changed files into our config\n            if (\n                strlen($this->request->getPost("content", "striptags", "")) > 20\n                || strlen((string)$template->content) == 0\n            ) {\n                $temp_filename = ''cp_'' . (string)$template->getAttributes()[''uuid''] . ''.tmp'';\n                file_put_contents(''/tmp/'' . $temp_filename, $this->request->getPost("content", "striptags", ""));\n                // strip defaults and unchanged files from template (standard js libs, etc)\n                $backend = new Backend();\n                $response = $backend->configdpRun("captiveportal strip_template", array($temp_filename));\n                unlink(''/tmp/'' . $temp_filename);\n                $result = json_decode($response, true);\n                if ($result != null && !array_key_exists(''error'', $result)) {\n                    $template->content = $result[''payload''];\n                } else {\n                    return array("name" => $templateName, "error" => $result[''error'']);\n                }\n            }\n\n            $template->name = $templateName;\n            $valMsgs = $mdlCP->performValidation();\n            $errorMsg = "";\n            foreach ($valMsgs as $field => $msg) {\n                if ($errorMsg != "") {\n                    $errorMsg .= " , ";\n                }\n                $errorMsg .= $msg->getMessage();\n            }\n\n            if ($errorMsg != "") {\n                return array("name" => (string)$template->name, "error" => $errorMsg);\n            } else {\n                // data is valid, save and return.\n                $mdlCP->serializeToConfig();\n                Config::getInstance()->save();\n                return array("name" => (string)$template->name);\n            }\n        }\n        return null;\n    }','\n',char(10)),2,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(7,'delTemplate','DelTemplate',1,'function delTemplateAction($uuid)',replace('/**\n     * delete template by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlCP = new CaptivePortal();\n            if ($uuid != null) {\n                if ($mdlCP->templates->template->del($uuid)) {\n                    // if item is removed, serialize to config and save\n                    $mdlCP->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result[''result''] = ''deleted'';\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),2,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(8,'searchTemplates','SearchTemplates',0,'function searchTemplatesAction()',replace('/**\n     * search captive portal zones\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $mdlCP = new CaptivePortal();\n        $grid = new UIModelGrid($mdlCP->templates->template);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("name", "fileid"),\n            "name"\n        );\n    }','\n',char(10)),2,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(9,'list','List',0,'function listAction($zoneid = 0)',replace('/**\n     * list client sessions\n     * @param int $zoneid zone number\n     * @return array|mixed\n     */','\n',char(10)),replace('{\n        $mdlCP = new CaptivePortal();\n        $cpZone = $mdlCP->getByZoneID($zoneid);\n        if ($cpZone != null) {\n            $backend = new Backend();\n            $allClientsRaw = $backend->configdpRun(\n                "captiveportal list_clients",\n                array($cpZone->zoneid, ''json'')\n            );\n            $allClients = json_decode($allClientsRaw, true);\n\n            return $allClients;\n        } else {\n            // illegal zone, return empty response\n            return array();\n        }\n    }','\n',char(10)),3,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(10,'zones','Zones',0,'function zonesAction()',replace('/**\n     * return list of available zones\n     * @return array available zones\n     */','\n',char(10)),replace('{\n        $response = array();\n        $mdlCP = new CaptivePortal();\n        foreach ($mdlCP->zones->zone->iterateItems() as $zone) {\n            $response[(string)$zone->zoneid] = (string)$zone->description;\n        }\n        asort($response);\n        return $response;\n    }','\n',char(10)),3,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(11,'disconnect','Disconnect',1,'function disconnectAction($zoneid = 0)',replace('/**\n     * disconnect a client\n     * @param string|int $zoneid zoneid\n     * @return array|mixed\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost() && $this->request->hasPost(''sessionId'')) {\n            $backend = new Backend();\n            $statusRAW = $backend->configdpRun(\n                "captiveportal disconnect",\n                array($zoneid, $this->request->getPost(''sessionId''), ''json'')\n            );\n            $status = json_decode($statusRAW, true);\n            if ($status != null) {\n                return $status;\n            } else {\n                return array("status" => "Illegal response");\n            }\n        }\n        return array();\n    }','\n',char(10)),3,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(12,'getZone','GetZone',0,'function getZoneAction($uuid = null)',replace('/**\n     * retrieve zone settings or return defaults\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->getBase("zone", "zones.zone", $uuid);\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(13,'setZone','SetZone',0,'function setZoneAction($uuid)',replace('/**\n     * update zone with given properties\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->setBase("zone", "zones.zone", $uuid);\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(14,'addZone','AddZone',0,'function addZoneAction()',replace('/**\n     * add new zone and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->addBase("zone", "zones.zone");\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(15,'delZone','DelZone',0,'function delZoneAction($uuid)',replace('/**\n     * delete zone by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return  $this->delBase("zones.zone", $uuid);\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(16,'toggleZone','ToggleZone',0,'function toggleZoneAction($uuid, $enabled = null)',replace('/**\n     * toggle zone by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("zones.zone", $uuid, $enabled);\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(17,'searchZones','SearchZones',0,'function searchZonesAction()',replace('/**\n     * search captive portal zones\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "zones.zone",\n            array("enabled", "description", "zoneid"),\n            "description"\n        );\n    }','\n',char(10)),4,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(18,'listProviders','ListProviders',0,'function listProvidersAction()',replace('/**\n     * list voucher providers (authenticators of type "voucher")\n     * @return array list of auth providers\n     */','\n',char(10)),replace('{\n        $result = array();\n        $authFactory = new AuthenticationFactory();\n        foreach ($authFactory->listServers() as $authName => $authProps) {\n            if ($authProps[''type''] == ''voucher'') {\n                $result[] = $authName;\n            }\n        }\n        return $result;\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(19,'listVoucherGroups','ListVoucherGroups',0,'function listVoucherGroupsAction($provider)',replace('/**\n     * list voucher groups\n     * @param string $provider name of authentication provider\n     * @return array list of registered vouchers\n     */','\n',char(10)),replace('{\n        $authFactory = new AuthenticationFactory();\n        $auth = $authFactory->get(urldecode($provider));\n        if ($auth != null && method_exists($auth, ''listVoucherGroups'')) {\n            return $auth->listVoucherGroups();\n        } else {\n            return array();\n        }\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(20,'listVouchers','ListVouchers',0,'function listVouchersAction($provider, $group)',replace('/**\n     * list vouchers\n     * @param string $provider auth provider\n     * @param string $group group name\n     * @return array vouchers within this group\n     */','\n',char(10)),replace('{\n        $authFactory = new AuthenticationFactory();\n        $auth = $authFactory->get(urldecode($provider));\n        if ($auth != null && method_exists($auth, ''listVouchers'')) {\n            return $auth->listVouchers(urldecode($group));\n        } else {\n            return array();\n        }\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(21,'dropVoucherGroup','DropVoucherGroup',1,'function dropVoucherGroupAction($provider, $group)',replace('/**\n     * drop a voucher group\n     * @param string $provider auth provider\n     * @param string $group group name\n     * @return array status\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $authFactory = new AuthenticationFactory();\n            $auth = $authFactory->get(urldecode($provider));\n            if ($auth != null && method_exists($auth, ''dropVoucherGroup'')) {\n                $auth->dropVoucherGroup(urldecode($group));\n                return array("status" => "drop");\n            }\n        }\n        return array("status" => "error");\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(22,'dropExpiredVouchers','DropExpiredVouchers',1,'function dropExpiredVouchersAction($provider, $group)',replace('/**\n     * drop expired vouchers from group\n     * @param string $provider auth provider\n     * @param string $group group name\n     * @return array status\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $authFactory = new AuthenticationFactory();\n            $auth = $authFactory->get(urldecode($provider));\n            if ($auth != null && method_exists($auth, ''dropExpired'')) {\n                return array("status" => "drop", "count" => $auth->dropExpired(urldecode($group)));\n            }\n        }\n        return array("status" => "error");\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(23,'generateVouchers','GenerateVouchers',1,'function generateVouchersAction($provider)',replace('/**\n     * generate new vouchers\n     * @param string $provider auth provider\n     * @return array generated vouchers\n     */','\n',char(10)),replace('{\n        $response = array("status" => "error");\n        if ($this->request->isPost()) {\n            $authFactory = new AuthenticationFactory();\n            $auth = $authFactory->get(urldecode($provider));\n            if ($auth != null && method_exists($auth, ''generateVouchers'')) {\n                $count = $this->request->getPost(''count'', ''int'', 0);\n                $validity = $this->request->getPost(''validity'', ''int'', 0);\n                $expirytime = $this->request->getPost(''expirytime'', ''int'', 0);\n                $vouchergroup = $this->request->getPost(''vouchergroup'', ''striptags'', ''---'');\n                // remove characters which are known to provide issues when using in the url\n                foreach (array("&", "#") as $skip_chars) {\n                    $vouchergroup = str_replace($skip_chars, "", $vouchergroup);\n                }\n                if ($count > 0 && $count <= 10000 && $validity > 0) {\n                    return $auth->generateVouchers($vouchergroup, $count, $validity, $expirytime);\n                }\n            }\n        }\n        return $response;\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(24,'expireVoucher','ExpireVoucher',1,'function expireVoucherAction($provider)',replace('/**\n     * expire a voucher\n     * @param string $provider auth provider\n     * @return array status\n     */','\n',char(10)),replace('{\n        $response = array("status" => "error");\n        $username = $this->request->getPost(''username'', ''string'', null);\n        if ($this->request->isPost() && $username != null) {\n            $authFactory = new AuthenticationFactory();\n            $auth = $authFactory->get(urldecode($provider));\n            if ($auth != null && method_exists($auth, ''expireVoucher'')) {\n                $auth->expireVoucher($username);\n                $response[''status''] = ''ok'';\n            }\n        }\n        return $response;\n    }','\n',char(10)),5,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(25,'status','GetVersionStatus',0,'function statusAction()',replace('/**\n     * retrieve available updates\n     * @return array\n     */','\n',char(10)),replace('{\n        $config = Config::getInstance()->object();\n        $type_want = ''opnsense'';\n        if (!empty($config->system->firmware->type)) {\n            $type_want .= ''-'' . (string)$config->system->firmware->type;\n        }\n\n        $this->sessionClose(); // long running action, close session\n\n        $backend = new Backend();\n        $type_have = trim($backend->configdRun(''firmware type name''));\n        $backend->configdRun(''firmware changelog fetch'');\n        $args = array();\n\n        if (!empty($type_have) && $type_have !== $type_want) {\n            $args[] = $type_want;\n        }\n\n        $response = json_decode(trim($backend->configdpRun(''firmware check'', $args)), true);\n\n        if ($response != null) {\n            $packages_size = !empty($response[''download_size'']) ? $response[''download_size''] : 0;\n            $sets_size = 0;\n\n            if (!empty($response[''upgrade_packages''])) {\n                foreach ($response[''upgrade_packages''] as $listing) {\n                    if (!empty($listing[''size''])) {\n                        $sets_size += $listing[''size''];\n                    }\n                }\n            }\n\n            if (preg_match(''/\s*(\d+)\s*([a-z])/i'', $packages_size, $matches)) {\n                $factor = 1;\n                switch (isset($matches[2]) ? strtolower($matches[2]) : ''b'') {\n                    case ''g'':\n                        $factor *= 1024;\n                        /* FALLTROUGH */\n                    case ''m'':\n                        $factor *= 1024;\n                        /* FALLTROUGH */\n                    case ''k'':\n                        $factor *= 1024;\n                        /* FALLTROUGH */\n                    default:\n                        break;\n                }\n                $packages_size = $factor * $matches[1];\n            } else {\n                $packages_size = 0;\n            }\n\n            $download_size = $this->formatBytes($packages_size + $sets_size);\n\n            $sorted = array();\n\n            foreach (\n                array(''new_packages'', ''reinstall_packages'', ''upgrade_packages'',\n                ''downgrade_packages'', ''remove_packages'') as $pkg_type\n            ) {\n                if (isset($response[$pkg_type])) {\n                    foreach ($response[$pkg_type] as $value) {\n                        switch ($pkg_type) {\n                            case ''downgrade_packages'':\n                                $sorted[$value[''name'']] = array(\n                                    ''reason'' => gettext(''downgrade''),\n                                    ''old'' => $value[''current_version''],\n                                    ''new'' => $value[''new_version''],\n                                    ''name'' => $value[''name''],\n                                );\n                                break;\n                            case ''new_packages'':\n                                $sorted[$value[''name'']] = array(\n                                    ''new'' => $value[''version''],\n                                    ''reason'' => gettext(''new''),\n                                    ''name'' => $value[''name''],\n                                    ''old'' => gettext(''N/A''),\n                                );\n                                break;\n                            case ''reinstall_packages'':\n                                $sorted[$value[''name'']] = array(\n                                    ''reason'' => gettext(''reinstall''),\n                                    ''new'' => $value[''version''],\n                                    ''old'' => $value[''version''],\n                                    ''name'' => $value[''name''],\n                                );\n                                break;\n                            case ''remove_packages'':\n                                $sorted[$value[''name'']] = array(\n                                    ''reason'' => gettext(''obsolete''),\n                                    ''new'' => gettext(''N/A''),\n                                    ''old'' => $value[''version''],\n                                    ''name'' => $value[''name''],\n                                );\n                                break;\n                            case ''upgrade_packages'':\n                                $sorted[$value[''name'']] = array(\n                                    ''reason'' => gettext(''upgrade''),\n                                    ''old'' => empty($value[''current_version'']) ?\n                                        gettext(''N/A'') : $value[''current_version''],\n                                    ''new'' => $value[''new_version''],\n                                    ''name'' => $value[''name''],\n                                );\n                                break;\n                            default:\n                                /* undefined */\n                                break;\n                        }\n                    }\n                }\n            }\n\n            uksort($sorted, function ($a, $b) {\n                return strnatcasecmp($a, $b);\n            });\n\n            $response[''all_packages''] = $sorted;\n\n            if (count($args)) {\n                $response[''status_msg''] = gettext(''The release type requires an update.'');\n                $response[''status_upgrade_action''] = ''rel'';\n                $response[''status''] = ''ok'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] == ''busy'') {\n                $response[''status_msg''] = gettext(''The package manager is not responding.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] == ''unresolved'') {\n                $response[''status_msg''] = gettext(''No address record found for the selected mirror.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] == ''unauthenticated'') {\n                $response[''status_msg''] = gettext(''Could not authenticate the selected mirror.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] == ''misconfigured'') {\n                $response[''status_msg''] = gettext(''The current package configuration is invalid.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] == ''timeout'') {\n                $response[''status_msg''] = gettext(''Timeout while connecting to the selected mirror.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''connection'', $response) && $response[''connection''] != ''ok'') {\n                $response[''status_msg''] = gettext(''An error occurred while connecting to the selected mirror.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''repository'', $response) && $response[''repository''] == ''untrusted'') {\n                $response[''status_msg''] = gettext(''Could not verify the repository fingerprint.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''repository'', $response) && $response[''repository''] == ''revoked'') {\n                $response[''status_msg''] = gettext(''The repository fingerprint has been revoked.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''repository'', $response) && $response[''repository''] == ''unsigned'') {\n                $response[''status_msg''] = gettext(''The repository has no fingerprint.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''repository'', $response) && $response[''repository''] != ''ok'') {\n                $response[''status_msg''] = gettext(''Could not find the repository on the selected mirror.'');\n                $response[''status''] = ''error'';\n            } elseif (array_key_exists(''updates'', $response) && $response[''updates''] == 0) {\n                $response[''status_msg''] = gettext(''There are no updates available on the selected mirror.'');\n                $response[''status''] = ''none'';\n            } elseif (\n                array_key_exists(0, $response[''upgrade_packages'']) &&\n                $response[''upgrade_packages''][0][''name''] == ''pkg''\n            ) {\n                $response[''status_upgrade_action''] = ''pkg'';\n                $response[''status''] = ''ok'';\n                $response[''status_msg''] = gettext(''There is a mandatory update for the package manager available.'');\n            } elseif (array_key_exists(''updates'', $response)) {\n                $response[''status_upgrade_action''] = ''all'';\n                $response[''status''] = ''ok'';\n                if ($response[''updates''] == 1) {\n                    /* keep this dynamic for template translation even though %s is always ''1'' */\n                    $response[''status_msg''] = sprintf(\n                        gettext(''There is %s update available, total download size is %s.''),\n                        $response[''updates''],\n                        $download_size\n                    );\n                } else {\n                    $response[''status_msg''] = sprintf(\n                        gettext(''There are %s updates available, total download size is %s.''),\n                        $response[''updates''],\n                        $download_size\n                    );\n                }\n                if ($response[''upgrade_needs_reboot''] == 1) {\n                    $response[''status_msg''] = sprintf(\n                        ''%s %s'',\n                        $response[''status_msg''],\n                        gettext(''This update requires a reboot.'')\n                    );\n                }\n            } else {\n                $response[''status_msg''] = gettext(''Unknown firmware status encountered.'');\n                $response[''status''] = ''unknown'';\n            }\n        } else {\n            $response = array(\n                ''status_msg'' => gettext(''Firmware status check was aborted internally. Please try again.''),\n                ''status'' => ''unknown'',\n            );\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,20,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(26,'changelog','GetChangelog',0,'function changelogAction($version)',replace('/**\n     * Retrieve specific changelog in text and html format\n     * @param string $version changelog to retrieve\n     * @return array correspondng changelog in both formats\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if (!$this->request->isPost()) {\n            return $response;\n        }\n\n        $filter = new \Phalcon\Filter();\n        $filter->add(''version'', function ($value) {\n            return preg_replace(''/[^0-9a-zA-Z\.]/'', '''', $value);\n        });\n        $version = $filter->sanitize($version, ''version'');\n\n        if ($version == ''update'') {\n            $backend->configdRun(''firmware changelog fetch'');\n        } else {\n            $text = trim($backend->configdRun(sprintf(''firmware changelog text %s'', $version)));\n            $html = trim($backend->configdRun(sprintf(''firmware changelog html %s'', $version)));\n            if (!empty($text)) {\n                $response[''text''] = $text;\n            }\n            if (!empty($html)) {\n                $response[''html''] = $html;\n            }\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,8,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(27,'license','GetPackageLicense',1,'function licenseAction($package)',replace('/**\n     * Retrieve specific license for package in text format\n     * @param string $package package to retrieve\n     * @return array with all possible licenses\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            // sanitize package name\n            $filter = new \Phalcon\Filter();\n            $filter->add(''scrub'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $package = $filter->sanitize($package, ''scrub'');\n            $text = trim($backend->configdRun(sprintf(''firmware license %s'', $package)));\n            if (!empty($text)) {\n                $response[''license''] = $text;\n            }\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,15,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(28,'reboot','Reboot',1,'function rebootAction()',replace('/**\n     * perform reboot\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = array();\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            $response[''msg_uuid''] = trim($backend->configdRun(''firmware reboot'', true));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(29,'poweroff','Poweroff',1,'function poweroffAction()',replace('/**\n     * perform poweroff\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = array();\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            $response[''msg_uuid''] = trim($backend->configdRun(''firmware poweroff'', true));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(30,'upgrade','Upgrade',1,'function upgradeAction()',replace('/**\n     * perform actual upgrade\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $config = Config::getInstance()->object();\n        $type_want = ''opnsense'';\n        if (!empty($config->system->firmware->type)) {\n            $type_want .= ''-'' . (string)$config->system->firmware->type;\n        }\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n        if ($this->request->hasPost(''upgrade'')) {\n            $response[''status''] = ''ok'';\n            if ($this->request->getPost(''upgrade'') == ''pkg'') {\n                $action = ''firmware upgrade pkg'';\n            } elseif ($this->request->getPost(''upgrade'') == ''maj'') {\n                $action = ''firmware upgrade maj'';\n            } elseif ($this->request->getPost(''upgrade'') == ''rel'') {\n                $action = ''firmware type install '' . escapeshellarg($type_want);\n            } else {\n                $action = ''firmware upgrade all'';\n            }\n            $response[''msg_uuid''] = trim($backend->configdRun($action, true));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,7,21,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(31,'health','HealthAudit',1,'function healthAction()',replace('/**\n     * run a health check\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            $response[''msg_uuid''] = trim($backend->configdRun("firmware health", true));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(32,'audit','SecurityAudit',1,'function auditAction()','',replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            $response[''msg_uuid''] = trim($backend->configdRun("firmware audit", true));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(33,'reinstall','ReinstallPackage',1,'function reinstallAction($pkg_name)',replace('/**\n     * reinstall package\n     * @param string $pkg_name package name to reinstall\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            // sanitize package name\n            $filter = new \Phalcon\Filter();\n            $filter->add(''pkgname'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $pkg_name = $filter->sanitize($pkg_name, "pkgname");\n            // execute action\n            $response[''msg_uuid''] = trim($backend->configdpRun("firmware reinstall", array($pkg_name), true));\n            $this->processPlugin($pkg_name, ''reinstall'');\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(34,'installConfiguredPlugins','InstallConfiguredPlugins',1,'function installConfiguredPluginsAction()',replace('/**\n     * install missing configured plugins\n     * @param string $pkg_name package name to reinstall\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = strtolower(trim($backend->configdRun(''firmware sync'')));\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,1,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(35,'acceptConfiguredPlugins','AcceptConfiguredPlugins',1,'function acceptConfiguredPluginsAction()',replace('/**\n     * install missing configured plugins\n     * @param string $pkg_name package name to reinstall\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $info = $this->infoAction();\n            $installed_plugins = array();\n            if (isset($info[''plugin''])) {\n                foreach ($info[''plugin''] as $plugin) {\n                    if (!empty($plugin[''installed'']) && !empty($plugin[''provided''])) {\n                        $installed_plugins[] = $plugin[''name''];\n                    }\n                }\n            }\n            $config = Config::getInstance()->object();\n            if (!isset($config->system->firmware)) {\n                $config->system->addChild(''firmware'');\n            }\n            if (!isset($config->system->firmware->plugins)) {\n                $config->system->firmware->addChild(''plugins'');\n            }\n            $config->system->firmware->plugins = implode(",", $installed_plugins);\n            $response[''plugins''] = $installed_plugins;\n            $response[''status''] = "ok";\n            Config::getInstance()->save();\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,22,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(36,'install','InstallPackage',1,'function installAction($pkg_name)',replace('/**\n     * install package\n     * @param string $pkg_name package name to install\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            // sanitize package name\n            $filter = new \Phalcon\Filter();\n            $filter->add(''pkgname'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $pkg_name = $filter->sanitize($pkg_name, "pkgname");\n            // execute action\n            $response[''msg_uuid''] = trim($backend->configdpRun("firmware install", array($pkg_name), true));\n            $this->processPlugin($pkg_name, ''install'');\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(37,'remove','RemovePackage',1,'function removeAction($pkg_name)',replace('/**\n     * remove package\n     * @param string $pkg_name package name to remove\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $response[''status''] = ''ok'';\n            // sanitize package name\n            $filter = new \Phalcon\Filter();\n            $filter->add(''pkgname'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $pkg_name = $filter->sanitize($pkg_name, "pkgname");\n            // execute action\n            $response[''msg_uuid''] = trim($backend->configdpRun("firmware remove", array($pkg_name), true));\n            $this->processPlugin($pkg_name, ''remove'');\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(38,'lock','LockPackage',1,'function lockAction($pkg_name)',replace('/**\n     * lock package\n     * @param string $pkg_name package name to lock\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $filter = new \Phalcon\Filter();\n            $filter->add(''pkgname'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $pkg_name = $filter->sanitize($pkg_name, "pkgname");\n        } else {\n            $pkg_name = null;\n        }\n\n        if (!empty($pkg_name)) {\n            $response[''msg_uuid''] = trim($backend->configdpRun("firmware lock", array($pkg_name), true));\n            $response[''status''] = ''ok'';\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(39,'unlock','UnlockPackage',1,'function unlockAction($pkg_name)',replace('/**\n     * unlock package\n     * @param string $pkg_name package name to unlock\n     * @return array status\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            $filter = new \Phalcon\Filter();\n            $filter->add(''pkgname'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $pkg_name = $filter->sanitize($pkg_name, "pkgname");\n        } else {\n            $pkg_name = null;\n        }\n\n        if (!empty($pkg_name)) {\n            $response[''msg_uuid''] = trim($backend->configdpRun("firmware unlock", array($pkg_name), true));\n            $response[''status''] = ''ok'';\n        } else {\n            $response[''status''] = ''failure'';\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,2,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(40,'running','GetStatus',0,'function runningAction()',replace('/**\n     * retrieve exectution status\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n\n        $result = array(\n            ''status'' => trim($backend->configdRun(''firmware running''))\n        );\n\n        return $result;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,1,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(41,'upgradestatus','GetUpgradeProgress',0,'function upgradestatusAction()',replace('/**\n     * retrieve upgrade status (and log file of current process)\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $result = array(''status'' => ''running'');\n        $cmd_result = trim($backend->configdRun(''firmware status''));\n\n        $result[''log''] = $cmd_result;\n\n        if ($cmd_result == null) {\n            $result[''status''] = ''error'';\n        } elseif (strpos($cmd_result, ''***DONE***'') !== false) {\n            $result[''status''] = ''done'';\n        } elseif (strpos($cmd_result, ''***REBOOT***'') !== false) {\n            $result[''status''] = ''reboot'';\n        }\n\n        return $result;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,16,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(42,'details','GetPackageDetails',1,'function detailsAction($package)',replace('/**\n     * query package details\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $backend = new Backend();\n        $response = array();\n\n        if ($this->request->isPost()) {\n            // sanitize package name\n            $filter = new \Phalcon\Filter();\n            $filter->add(''scrub'', function ($value) {\n                return preg_replace(''/[^0-9a-zA-Z._-]/'', '''', $value);\n            });\n            $package = $filter->sanitize($package, ''scrub'');\n            $text = trim($backend->configdRun(sprintf(''firmware details %s'', $package)));\n            if (!empty($text)) {\n                $response[''details''] = $text;\n            }\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,14,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(43,'info','GetInfo',0,'function infoAction()',replace('/**\n     * list local and remote packages\n     * @return array\n     */','\n',char(10)),replace('{\012        $this->sessionClose(); // long running action, close session\012\012        $config = Config::getInstance()->object();\012        $configPlugins = array();\012        if (isset($config->system->firmware->plugins)) {\012            $configPlugins = explode(",", $config->system->firmware->plugins);\012        }\012\012        $keys = array(''name'', ''version'', ''comment'', ''flatsize'', ''locked'', ''license'', ''repository'', ''origin'');\012        $backend = new Backend();\012        $response = array();\012\012        $version = explode('' '', trim(shell_exec(''opnsense-version -nv'')));\012        foreach (array(''product_name'' => 0, ''product_version'' => 1) as $result => $index) {\012            $response[$result] = !empty($version[$index]) ? $version[$index] : ''unknown'';\012        }\012\012        /* allows us to select UI features based on product state */\012        $devel = explode(''-'', $response[''product_name'']);\012        $devel = count($devel) == 2 ? $devel[1] == ''devel'' : false;\012\012        /* need both remote and local, create array earlier */\012        $packages = array();\012        $plugins = array();\012\012        /* package infos are flat lists with 3 pipes as delimiter */\012        foreach (array(''remote'', ''local'') as $type) {\012            $current = $backend->configdRun("firmware ${type}");\012            $current = explode("\n", trim($current));\012\012            foreach ($current as $line) {\012                $expanded = explode(''|||'', $line);\012                $translated = array();\012                $index = 0;\012                if (count($expanded) != count($keys)) {\012                    continue;\012                }\012                foreach ($keys as $key) {\012                    $translated[$key] = $expanded[$index++];\012                    if (empty($translated[$key])) {\012                        $translated[$key] = gettext(''N/A'');\012                    } elseif ($key == ''flatsize'') {\012                        $translated[$key] = $this->formatBytes($translated[$key]);\012                    }\012                }\012\012                /* mark remote packages as "provided", local as "installed" */\012                $translated[''provided''] = $type == ''remote'' ? ''1'' : ''0'';\012                $translated[''installed''] = $type == ''local'' ? ''1'' : ''0'';\012                if (isset($packages[$translated[''name'']])) {\012                    /* local iteration, mark package provided */\012                    $translated[''provided''] = ''1'';\012                }\012                $translated[''path''] = "{$translated[''repository'']}/{$translated[''origin'']}";\012                $translated[''configured''] = in_array($translated[''name''], $configPlugins) ? ''1'' : ''0'';\012                $packages[$translated[''name'']] = $translated;\012\012                /* figure out local and remote plugins */\012                $plugin = explode(''-'', $translated[''name'']);\012                if (count($plugin)) {\012                    if ($plugin[0] == ''os'') {\012                        if (\012                            $type == ''local'' || ($type == ''remote'' &&\012                            ($devel || end($plugin) != ''devel''))\012                        ) {\012                            $plugins[$translated[''name'']] = $translated;\012                        }\012                    }\012                }\012            }\012        }\012\012        uksort($packages, function ($a, $b) {\012            return strnatcasecmp($a, $b);\012        });\012\012        $response[''package''] = array();\012        foreach ($packages as $package) {\012            $response[''package''][] = $package;\012        }\012\012        foreach ($configPlugins as $missing) {\012            if (!array_key_exists($missing, $plugins)) {\012                $plugins[$missing] = [];\012                foreach ($keys as $key) {\012                    $plugins[$missing][$key] = gettext(''N/A'');\012                }\012                $plugins[$missing][''path''] = gettext(''N/A'');\012                $plugins[$missing][''configured''] = "1";\012                $plugins[$missing][''installed''] = "0";\012                $plugins[$missing][''provided''] = "0";\012                $plugins[$missing][''name''] = $missing;\012            }\012        }\012\012        uasort($plugins, function ($a, $b) {\012            return strnatcasecmp(\012                ($a[''configured''] ? ''0'' : ''1'') . ($a[''installed''] ? ''0'' : ''1'') . $a[''name''],\012                ($b[''configured''] ? ''0'' : ''1'') . ($b[''installed''] ? ''0'' : ''1'') . $b[''name'']\012            );\012        });\012\012        $response[''plugin''] = array();\012        foreach ($plugins as $plugin) {\012            $response[''plugin''][] = $plugin;\012        }\012\012        /* also pull in changelogs from here */\012        $changelogs = json_decode(trim($backend->configdRun(''firmware changelog list'')), true);\012        if ($changelogs == null) {\012            $changelogs = array();\012        } else {\012            /* development strategy for changelog slightly differs from above */\012            $devel = preg_match(''/^\d+\.\d+\.[a-z]/i'', $response[''product_version'']) ? true : false;\012\012            foreach ($changelogs as $index => &$changelog) {\012                /* skip development items */\012                if (!$devel && preg_match(''/^\d+\.\d+\.[a-z]/i'', $changelog[''version''])) {\012                    unset($changelogs[$index]);\012                    continue;\012                }\012\012                /* rewrite dates as ISO */\012                $date = date_parse($changelog[''date'']);\012                $changelog[''date''] = sprintf(''%04d-%02d-%02d'', $date[''year''], $date[''month''], $date[''day'']);\012            }\012            /* sort in reverse */\012            usort($changelogs, function ($a, $b) {\012                return strcmp($b[''date''], $a[''date'']);\012            });\012        }\012\012        $response[''changelog''] = $changelogs;\012\012        return $response;\012    }','\012',char(10)),6,0,0,NULL,NULL,7,12,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(44,'getFirmwareOptions','GetOptions',0,'function getFirmwareOptionsAction()',replace('/**\n     * list firmware mirror and flavour options\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose(); // long running action, close session\n        $mirrors = array();\n        $flavours = array();\n        $families = array();\n        $has_subscription = array();\n        $allow_custom = false;\n        // parse firmware options\n        foreach (glob(__DIR__ . "/repositories/*.xml") as $xml) {\n            $repositoryXml = simplexml_load_file($xml);\n            if ($repositoryXml === false || $repositoryXml->getName() != ''firmware'') {\n                syslog(LOG_ERR, ''unable to parse firmware file '' . $xml);\n            } else {\n                if (isset($repositoryXml->mirrors->mirror)) {\n                    if (isset($repositoryXml->mirrors->attributes()->allow_custom)) {\n                        $allow_custom = (strtolower($repositoryXml->mirrors->attributes()->allow_custom) == "true");\n                    }\n                    foreach ($repositoryXml->mirrors->mirror as $mirror) {\n                        $mirrors[(string)$mirror->url] = (string)$mirror->description;\n                        $attr = $mirror->attributes();\n                        if (isset($attr->has_subscription) && strtolower($attr->has_subscription) == "true") {\n                            $has_subscription[] = (string)$mirror->url;\n                        }\n                    }\n                }\n                if (isset($repositoryXml->flavours->flavour)) {\n                    foreach ($repositoryXml->flavours->flavour as $flavour) {\n                        $flavours[(string)$flavour->name] = (string)$flavour->description;\n                    }\n                }\n                if (isset($repositoryXml->families->family)) {\n                    foreach ($repositoryXml->families->family as $family) {\n                        $families[(string)$family->name] = (string)$family->description;\n                    }\n                }\n            }\n        }\n        return array(\n            ''has_subscription'' => $has_subscription,\n            ''flavours'' => $flavours,\n            ''families'' => $families,\n            ''mirrors'' => $mirrors,\n            ''allow_custom'' => $allow_custom\n        );\n    }','\n',char(10)),6,0,0,NULL,NULL,7,13,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(45,'getFirmwareConfig','GetConfig',0,'function getFirmwareConfigAction()',replace('/**\n     * retrieve current firmware configuration options\n     * @return array\n     */','\n',char(10)),replace('{\n        $config = Config::getInstance()->object();\n        $result = array();\n\n        $result[''flavour''] = '''';\n        $result[''mirror''] = '''';\n        $result[''type''] = '''';\n\n        if (!empty($config->system->firmware->flavour)) {\n            $result[''flavour''] = (string)$config->system->firmware->flavour;\n        }\n\n        if (!empty($config->system->firmware->type)) {\n            $result[''type''] = (string)$config->system->firmware->type;\n        }\n\n        if (!empty($config->system->firmware->mirror)) {\n            $result[''mirror''] = (string)$config->system->firmware->mirror;\n        }\n\n        return $result;\n    }','\n',char(10)),6,0,0,NULL,NULL,7,9,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(46,'setFirmwareConfig','SetConfig',1,'function setFirmwareConfigAction()',replace('/**\n     * set firmware configuration options\n     * @return array status\n     */','\n',char(10)),replace('{\n        $response = array("status" => "failure");\n\n        if ($this->request->isPost()) {\n            $config = Config::getInstance()->object();\n\n            $response[''status''] = ''ok'';\n\n            $selectedMirror = filter_var($this->request->getPost("mirror", null, ""), FILTER_SANITIZE_URL);\n            $selectedFlavour = filter_var($this->request->getPost("flavour", null, ""), FILTER_SANITIZE_URL);\n            $selectedType = filter_var($this->request->getPost("type", null, ""), FILTER_SANITIZE_URL);\n            $selSubscription = filter_var($this->request->getPost("subscription", null, ""), FILTER_SANITIZE_URL);\n\n            if ($this->validateFirmwareOptions($selectedMirror, $selectedFlavour, $selectedType, $selSubscription)) {\n                // config data without model, prepare xml structure and write data\n                if (!isset($config->system->firmware)) {\n                    $config->system->addChild(''firmware'');\n                }\n\n                if (!isset($config->system->firmware->mirror)) {\n                    $config->system->firmware->addChild(''mirror'');\n                }\n                if (empty($selSubscription)) {\n                    $config->system->firmware->mirror = $selectedMirror;\n                } else {\n                    // prepend subscription\n                    $config->system->firmware->mirror = $selectedMirror . ''/'' . $selSubscription;\n                }\n                if (empty($config->system->firmware->mirror)) {\n                    unset($config->system->firmware->mirror);\n                }\n\n                if (!isset($config->system->firmware->flavour)) {\n                    $config->system->firmware->addChild(''flavour'');\n                }\n                $config->system->firmware->flavour = $selectedFlavour;\n                if (empty($config->system->firmware->flavour)) {\n                    unset($config->system->firmware->flavour);\n                }\n\n                if (!isset($config->system->firmware->type)) {\n                    $config->system->firmware->addChild(''type'');\n                }\n                $config->system->firmware->type = $selectedType;\n                if (empty($config->system->firmware->type)) {\n                    unset($config->system->firmware->type);\n                }\n\n                if (!@count($config->system->firmware->children())) {\n                    unset($config->system->firmware);\n                }\n\n                Config::getInstance()->save();\n\n                $backend = new Backend();\n                $backend->configdRun("firmware configure");\n            } else {\n                $response[''status''] = "failed";\n            }\n        }\n\n        return $response;\n    }','\n',char(10)),6,0,0,7,9,7,1,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(47,'tree','Tree',0,'function treeAction()',replace('/**\n     * return menu items for this user\n     * @return array\n     * @throws Menu\MenuInitException when unable to construct menu\n     */','\n',char(10)),replace('{\n        $selected_uri = $this->request->get("uri", null, null);\n        $menu_items = $this->getMenu($selected_uri);\n        return $this->menuToArray($menu_items);\n    }','\n',char(10)),7,0,0,NULL,NULL,23,6,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(48,'search','Search',0,'function searchAction()',replace('/**\n     * search menu items\n     * @return array\n     * @throws Menu\MenuInitException when unable to construct menu\n     */','\n',char(10)),replace('{\n        $menu_items = $this->getMenu(null);\n        $query = $this->request->get("q", null, null);\n        if ($query != null) {\n            // only search when a query is provided, otherwise return all entries\n            $this->search($menu_items, $query);\n        }\n        $items = array();\n        $this->extractMenuLeaves($menu_items, $items);\n        return $items;\n    }','\n',char(10)),7,0,0,NULL,NULL,23,7,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(49,'halt','Halt',0,'function haltAction()','',replace('{\n        $backend = new Backend();\n        $backend->configdRun(''system halt'', true);\n        return [\n            ''status'' => ''ok''\n        ];\n    }','\n',char(10)),8,0,0,NULL,NULL,7,1,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(50,'reboot','Reboot',0,'function rebootAction()','',replace('{\n        $backend = new Backend();\n        $backend->configdRun(''system reboot'', true);\n        return [\n            ''status'' => ''ok''\n        ];\n    }','\n',char(10)),8,0,0,NULL,NULL,7,1,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(51,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * restart cron service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Cron'');\n\n            // (res)start daemon\n            $backend->configdRun("cron restart");\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),9,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(52,'getJob','GetJob',0,'function getJobAction($uuid = null)',replace('/**\n     * retrieve job settings or return defaults\n     * @param $uuid item unique id\n     * @return array job contents\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("job", "jobs.job", $uuid);\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(53,'setJob','SetJob',1,'function setJobAction($uuid)',replace('/**\n     * update job with given properties\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost() && $this->request->hasPost("job")) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''jobs.job.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $jobInfo = $this->request->getPost("job");\n                    if ((string)$node->origin != "cron") {\n                        if ($jobInfo["command"] != (string)$node->command) {\n                            $result["validations"]["job.command"] = gettext("This item has been created by " .\n                                "another service, command and parameter may not be changed.");\n                        }\n                        if ($jobInfo["parameters"] != (string)$node->parameters) {\n                            $result["validations"]["job.parameters"] = sprintf(\n                                gettext("This item has been created by " .\n                                "another service, command and parameter may not be changed. (was: %s)"),\n                                (string)$node->parameters\n                            );\n                        }\n                    }\n\n                    $node->setNodes($jobInfo);\n                    $valMsgs = $this->getModel()->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "job", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n\n                    if (count($result[''validations'']) == 0) {\n                        $result = $this->save();\n                    }\n                    return $result;\n                }\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(54,'addJob','AddJob',0,'function addJobAction()',replace('/**\n     * add new job and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->addBase("job", "jobs.job");\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,'Job',NULL);
INSERT INTO ApiCommands VALUES(55,'delJob','DelJob',0,'function delJobAction($uuid)',replace('/**\n     * delete job by uuid ( only if origin is cron)\n     * @param string $uuid item unique id\n     * @return array status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     */','\n',char(10)),replace('{\n        if ($uuid != null) {\n            $node = (new Cron())->getNodeByReference(''jobs.job.'' . $uuid);\n            if ($node->origin == "cron") {\n                return $this->delBase("jobs.job", $uuid);\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(56,'toggleJob','ToggleJob',0,'function toggleJobAction($uuid, $enabled = null)',replace('/**\n     * toggle job by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("jobs.job", $uuid, $enabled);\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(57,'searchJobs','SearchJobs',0,'function searchJobsAction()',replace('/**\n     * search cron jobs\n     * @return array search results\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "jobs.job",\n            array("enabled", "minutes","hours", "days", "months", "weekdays", "description", "command", "origin"),\n            "description"\n        );\n    }','\n',char(10)),10,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(58,'getActivity','GetActivity',0,'function getActivityAction()',replace('/**\n     * retrieve system activity (top)\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun(''system diag activity json'');\n        $activity = json_decode($response, true);\n\n        return $activity;\n    }','\n',char(10)),11,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(59,'reverse_lookup','ReverseLookup',0,'function reverse_lookupAction()',replace('/**\n     * perform a reverse dns lookup\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isGet() && $this->request->has(''address'')) {\n            $this->sessionClose(); // long running action, close session\n            if (is_array($this->request->get(''address''))) {\n                $address = $this->request->get(''address'');\n            } else {\n                $address = array($this->request->get(''address''));\n            }\n            $result = array();\n            foreach ($address as $addr) {\n                if (!empty(filter_var($addr, FILTER_VALIDATE_IP))) {\n                    $result[$addr] = gethostbyaddr($addr);\n                } else {\n                    $result[$addr] = $addr;\n                }\n            }\n            return $result;\n        } else {\n            return null;\n        }\n    }','\n',char(10)),12,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(60,'log','Log',0,'function logAction()',replace('/**\n     * retrieve firewall log\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isGet()) {\n            $this->sessionClose(); // long running action, close session\n            $digest = empty($this->request->get(''digest'')) ? "" : $this->request->get(''digest'');\n            $limit = empty($this->request->get(''limit'')) ? 1000 : $this->request->get(''limit'');\n            $backend = new Backend();\n            $response = $backend->configdpRun("filter read log", array($limit, $digest));\n            $logoutput = json_decode($response, true);\n            return $logoutput;\n        } else {\n            return null;\n        }\n    }','\n',char(10)),13,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(61,'log_filters','LogFilters',0,'function log_filtersAction()',replace('/**\n     * retrieve firewall log filter choices\n     * @return array\n     */','\n',char(10)),replace('{\n        $config = Config::getInstance()->object();\n        $interfaces = [];\n        if ($config->interfaces->count() > 0) {\n            foreach ($config->interfaces->children() as $key => $node) {\n                $interfaces[] = !empty((string)$node->descr) ? (string)$node->descr : $key;\n            }\n        }\n        return [\n            "interface_name" => $interfaces,\n            "dir" => ["in", "out"],\n            "action" => ["pass", "block"]\n        ];\n    }','\n',char(10)),13,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(62,'stats','Stats',0,'function statsAction()',replace('/**\n     * retrieve firewall stats\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isGet()) {\n            $this->sessionClose(); // long running action, close session\n            $limit = empty($this->request->get(''limit'')) ? 5000 : $this->request->get(''limit'');\n            $group_by = empty($this->request->get(''group_by'')) ? "interface" : $this->request->get(''group_by'');\n            $records = json_decode((new Backend())->configdpRun("filter read log", array($limit)), true);\n            $response = array();\n            if (!empty($records)) {\n                $tmp_stats = array();\n                foreach ($records as $record) {\n                    if (isset($record[$group_by])) {\n                        if (!isset($tmp_stats[$record[$group_by]])) {\n                            $tmp_stats[$record[$group_by]] = 0;\n                        }\n                        $tmp_stats[$record[$group_by]]++;\n                    }\n                }\n                arsort($tmp_stats);\n                $label_map = array();\n                switch ($group_by) {\n                    case ''interface'':\n                        $label_map["lo0"] = gettext("loopback");\n                        if (Config::getInstance()->object()->interfaces->count() > 0) {\n                            foreach (Config::getInstance()->object()->interfaces->children() as $k => $n) {\n                                $label_map[(string)$n->if] = !empty((string)$n->descr) ? (string)$n->descr : $k;\n                            }\n                        }\n                        break;\n                    case ''proto'':\n                      // proto\n                        break;\n                }\n                $recno = $top_cnt = 0;\n                foreach ($tmp_stats as $key => $value) {\n                    // top 10 + other\n                    if ($recno < 10) {\n                        $response[] = [\n                            "label" => !empty($label_map[$key]) ? $label_map[$key] : $key,\n                            "value" => $value\n                        ];\n                        $top_cnt += $value;\n                    } else {\n                        $response[] = ["label" => gettext("other"), "value" => count($records) - $top_cnt];\n                        break;\n                    }\n                    $recno++;\n                }\n            }\n            return $response;\n        } else {\n            return null;\n        }\n    }','\n',char(10)),13,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(63,'getInterfaceNames','GetInterfaceNames',0,'function getInterfaceNamesAction()',replace('/**\n     * retrieve interface name mapping\n     * @return array interface mapping (raw interface to description)\n     */','\n',char(10)),replace('{\n        return $this->getInterfaceNames();\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(64,'getArp','GetArp',0,'function getArpAction()',replace('/**\n     * retrieve system arp table contents\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun(''interface list arp json'');\n        $arptable = json_decode($response, true);\n\n        $intfmap = $this->getInterfaceNames();\n        // merge arp output with interface names\n        if (is_array($arptable)) {\n            foreach ($arptable as &$arpentry) {\n                if (array_key_exists($arpentry[''intf''], $intfmap)) {\n                    $arpentry[''intf_description''] = $intfmap[$arpentry[''intf'']];\n                } else {\n                    $arpentry[''intf_description''] = "";\n                }\n            }\n        }\n\n        return $arptable;\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(65,'flushArp','FlushArp',1,'function flushArpAction()',replace('/**\n     * retrieve system arp table contents\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''interface flush arp'');\n            return $response;\n        } else {\n            return array("message" => "error");\n        }\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(66,'getNdp','GetNdp',0,'function getNdpAction()',replace('/**\n     * retrieve system ndp table contents\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun(''interface list ndp json'');\n        $ndptable = json_decode($response, true);\n\n        $intfmap = $this->getInterfaceNames();\n        // merge ndp output with interface names\n        if (is_array($ndptable)) {\n            foreach ($ndptable as &$ndpentry) {\n                if (array_key_exists($ndpentry[''intf''], $intfmap)) {\n                    $ndpentry[''intf_description''] = $intfmap[$ndpentry[''intf'']];\n                } else {\n                    $ndpentry[''intf_description''] = "";\n                }\n            }\n        }\n\n        return $ndptable;\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(67,'getRoutes','GetRoutes',0,'function getRoutesAction()',replace('/**\n     * retrieve system routing table\n     * @return mixed\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        if (empty($this->request->get(''resolve''))) {\n            $response = $backend->configdRun(''interface routes list -n json'');\n        } else {\n            $response = $backend->configdRun(''interface routes list json'');\n        }\n\n        $routingtable = json_decode($response, true);\n        if (is_array($routingtable)) {\n            $intfmap = $this->getInterfaceNames();\n            foreach ($routingtable as &$routingentry) {\n                if (array_key_exists($routingentry[''netif''], $intfmap)) {\n                    $routingentry[''intf_description''] = $intfmap[$routingentry[''netif'']];\n                } else {\n                    $routingentry[''intf_description''] = "";\n                }\n            }\n        }\n        return $routingtable;\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(68,'delRoute','DelRoute',0,'function delRouteAction()',replace('/**\n     * drop route\n     * @return mixed\n     */','\n',char(10)),replace('{\n        if (\n            $this->request->isPost() && $this->request->hasPost("destination")\n              && $this->request->hasPost("gateway")\n        ) {\n            $backend = new Backend();\n            $dest = $this->request->getPost("destination", "striptags", null);\n            $gw = $this->request->getPost("gateway", "striptags", null);\n            $response = trim($backend->configdpRun("interface route del", array($dest, $gw)));\n            return array("message" => $response);\n        } else {\n            return array("message" => "error");\n        }\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(69,'getProtocolStatistics','GetProtocolStatistics',0,'function getProtocolStatisticsAction()',replace('/**\n     * retrieve system-wide statistics for each network protocol\n     * @return mixed\n     */','\n',char(10)),replace('{\n        return json_decode((new Backend())->configdRun(''interface show protocol''), true);\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(70,'getInterfaceStatistics','GetInterfaceStatistics',0,'function getInterfaceStatisticsAction()',replace('/**\n     * retrieve system-wide statistics for each network adapter\n     * @return mixed\n     */','\n',char(10)),replace('{\n        $stats = [];\n        $tmp = json_decode((new Backend())->configdRun(''interface show interfaces''), true);\n        if (is_array($tmp) && !empty($tmp[''statistics'']) && !empty($tmp[''statistics''][''interface''])) {\n            $intfmap = $this->getInterfaceNames();\n            foreach ($tmp[''statistics''][''interface''] as $node) {\n                if (!empty($intfmap[$node[''name'']])) {\n                    $key = sprintf("[%s] (%s) / %s", $intfmap[$node[''name'']], $node[''name''], $node[''address'']);\n                } else {\n                    $key = sprintf("[%s] / %s", $node[''name''], $node[''address'']);\n                }\n                $stats[$key] = $node;\n            }\n        }\n\n        return [''statistics'' => $stats];\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(71,'getSocketStatistics','GetSocketStatistics',0,'function getSocketStatisticsAction()',replace('/**\n     * retrieve system-wide socket statistics (merge netstat with sockstat)\n     * @return mixed\n     */','\n',char(10)),replace('{\n        $stats = [''Active Internet connections'' => [], ''Active UNIX domain sockets'' => []];\n        $tmp = json_decode((new Backend())->configdRun(''interface show sockets''), true);\n        if (is_array($tmp) && !empty($tmp[''statistics'']) && !empty($tmp[''statistics''][''socket''])) {\n            // combine netstat with sockstat for the full picture\n            $sockstat = json_decode((new Backend())->configdRun(''interface dump sockstat''), true);\n            $sock_app = [];\n            if (is_array($sockstat)) {\n                foreach ($sockstat as $record) {\n                    $sock_app[sprintf("%s/%s%s", $record[''proto''], $record[''local''], $record[''remote''])] = $record;\n                }\n            }\n            foreach ($tmp[''statistics''][''socket''] as $node) {\n                if (!empty($node[''protocol''])) {\n                    $sstatkey = sprintf(\n                        "%s/%s:%s%s:%s",\n                        $node[''protocol''],\n                        $node[''local''][''address''],\n                        $node[''local''][''port''],\n                        $node[''remote''][''address''],\n                        $node[''remote''][''port'']\n                    );\n                    if (!empty($sock_app[$sstatkey])) {\n                        $node = array_merge_recursive($node, $sock_app[$sstatkey]);\n                    }\n                    $key = sprintf(\n                        "%s/[%s:%s-%s:%s]",\n                        $node[''protocol''],\n                        $node[''local''][''address''],\n                        $node[''local''][''port''],\n                        $node[''remote''][''address''],\n                        $node[''remote''][''port'']\n                    );\n                    $stats[''Active Internet connections''][$key] = $node;\n                } else {\n                    if (!empty($node[''type'']) && !empty($node[''path''])) {\n                        $sstatkey = sprintf("%s/%s", $node[''type''], $node[''path'']);\n                        if (!empty($sock_app[$sstatkey])) {\n                            $node = array_merge_recursive($node, $sock_app[$sstatkey]);\n                        }\n                    }\n                    $key = sprintf(\n                        ''%s%s%s'',\n                        $node[''address''],\n                        !empty($node[''path'']) ? '' - '' : '''',\n                        !empty($node[''path'']) ? $node[''path''] : ''''\n                    );\n                    $stats[''Active UNIX domain sockets''][$key] = $node;\n                }\n            }\n        }\n\n        return [''statistics'' => $stats];\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(72,'getMemoryStatistics','GetMemoryStatistics',0,'function getMemoryStatisticsAction()',replace('/**\n     * retrieve statistics recorded by the memory management routines\n     * @return mixed\n     */','\n',char(10)),replace('{\n        return json_decode((new Backend())->configdRun(''interface show memory''), true);\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(73,'getBpfStatistics','GetBpfStatistics',0,'function getBpfStatisticsAction()',replace('/**\n     * retrieve bpf(4) peers statistics\n     * @return mixed\n     */','\n',char(10)),replace('{\n        return json_decode((new Backend())->configdRun(''interface show bpf''), true);\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(74,'getNetisrStatistics','GetNetisrStatistics',0,'function getNetisrStatisticsAction()',replace('/**\n     * retrieve netisr(9) statistics\n     * @return mixed\n     */','\n',char(10)),replace('{\n        return json_decode((new Backend())->configdRun(''interface show netisr''), true);\n    }','\n',char(10)),14,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(75,'isEnabled','IsEnabled',0,'function isEnabledAction()',replace('/**\n     *\n     */','\n',char(10)),replace('{\n        $result = array(''netflow'' => 0, "local" => 0);\n        $mdlNetflow = new Netflow();\n        if ((string)$mdlNetflow->capture->targets != "" && (string)$mdlNetflow->capture->interfaces != "") {\n            $result[''netflow''] = 1;\n            if ((string)$mdlNetflow->collect->enable == 1) {\n                $result[''local''] = 1;\n            }\n        }\n        return $result;\n    }','\n',char(10)),16,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(76,'getconfig','Getconfig',0,'function getconfigAction()',replace('/**\n     * retrieve Netflow settings\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlNetflow = new Netflow();\n            $result[''netflow''] = $mdlNetflow->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),16,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(77,'setconfig','Setconfig',0,'function setconfigAction()',replace('/**\n     * update netflow configuration fields\n     * @return array\n     * @throws \Phalcon\Validation\Exception\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->hasPost("netflow")) {\n            // load model and update with provided data\n            $mdlNetflow = new Netflow();\n            $mdlNetflow->setNodes($this->request->getPost("netflow"));\n            if ((string)$mdlNetflow->collect->enable == 1) {\n                // add localhost (127.0.0.1:2056) as target if local capture is configured\n                if (strpos((string)$mdlNetflow->capture->targets, "127.0.0.1:2056") === false) {\n                    if ((string)$mdlNetflow->capture->targets != "") {\n                        $targets = explode(",", (string)$mdlNetflow->capture->targets);\n                    } else {\n                        $targets = array();\n                    }\n                    $targets[] = "127.0.0.1:2056";\n                    $mdlNetflow->capture->targets = implode('','', $targets);\n                }\n            }\n\n            // perform validation\n            $validations = $mdlNetflow->validate();\n            if (count($validations)) {\n                $result[''validations''] = array();\n                foreach ($validations as $valkey => $validation) {\n                    $result[''validations''][''netflow.'' . $valkey] = $validation;\n                }\n            } else {\n                // serialize model to config and save\n                $mdlNetflow->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),16,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(78,'status','Status',0,'function statusAction()',replace('/**\n     * request netflow status\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $status = trim($backend->configdRun("netflow status"));\n        if (strpos($status, "netflow is active") !== false) {\n            // active, return status active + number of configured collectors\n            $collectors = trim(explode('')'', explode('':'', $status)[1])[0]);\n            return array("status" => "active", "collectors" => $collectors);\n        } else {\n            // inactive\n            return array("status" => "inactive");\n        }\n    }','\n',char(10)),16,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(79,'cacheStats','CacheStats',0,'function cacheStatsAction()',replace('/**\n     * Retrieve netflow cache statistics\n     * @return array cache statistics per netgraph node\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("netflow cache stats json");\n        $stats = json_decode($response, true);\n        if ($stats != null) {\n            return $stats;\n        } else {\n            return array();\n        }\n    }','\n',char(10)),16,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(80,'timeserie','Timeserie',0,replace('function timeserieAction(\n        $provider = null,\n        $measure = null,\n        $from_date = null,\n        $to_date = null,\n        $resolution = null,\n        $field = null,\n        $emulation = null\n    )','\n',char(10)),replace('/**\n     * request timeserie data to use for reporting\n     * @param string $provider provider class name\n     * @param string $measure measure [octets, packets, octets_ps, packets_ps]\n     * @param string $from_date from timestamp\n     * @param string $to_date to timestamp\n     * @param string $resolution resolution in seconds\n     * @param string $field field name to aggregate\n     * @return array timeseries\n     */','\n',char(10)),replace('{\n        // cleanse input\n        $filter = new Filter();\n        $provider = $filter->sanitize($provider, "alphanum");\n        $measure = $filter->sanitize($measure, "string");\n        $from_date = $filter->sanitize($from_date, "int");\n        $to_date = $filter->sanitize($to_date, "int");\n        $resolution = $filter->sanitize($resolution, "int");\n        $field = $filter->sanitize($field, "string");\n\n        $result = array();\n        if ($this->request->isGet()) {\n            $backend = new Backend();\n            // request current data\n            $response = $backend->configdRun(\n                "netflow aggregate fetch {$provider} {$from_date} {$to_date} {$resolution} {$field}"\n            );\n            // for test, request random data\n            //$response = $backend->configdRun(\n            //    "netflow aggregate fetch {$provider} {$from_date} {$to_date} {$resolution} {$field} " .\n            //    "em0,in~em0,out~em1,in~em1,out~em2,in~em2,out~em3,in~em3,out"\n            //);\n            $graph_data = json_decode($response, true);\n            if ($graph_data != null) {\n                ksort($graph_data);\n                $timeseries = array();\n                foreach ($graph_data as $timeserie => $timeserie_data) {\n                    foreach ($timeserie_data as $timeserie_key => $payload) {\n                        if (!isset($timeseries[$timeserie_key])) {\n                            $timeseries[$timeserie_key] = array();\n                        }\n                        // measure value\n                        $measure_val = 0;\n                        if ($measure == "octets") {\n                            $measure_val = $payload[''octets''];\n                        } elseif ($measure == "packets") {\n                            $measure_val = $payload[''packets''];\n                        } elseif ($measure == "octets_ps") {\n                            $measure_val = $payload[''octets''] / $payload[''resolution''];\n                        } elseif ($measure == "bps") {\n                            $measure_val = ($payload[''octets''] / $payload[''resolution'']) * 8;\n                        } elseif ($measure == "packets_ps") {\n                            $measure_val = $payload[''packets''] / $payload[''resolution''];\n                        }\n                        // add to timeseries\n                        $timeseries[$timeserie_key][] = array((int)$timeserie * 1000, $measure_val);\n                    }\n                }\n                foreach ($timeseries as $timeserie_key => $data) {\n                    $result[] = array("key" => $timeserie_key, "values" => $data);\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(81,'top','Top',0,replace('function topAction(\n        $provider = null,\n        $from_date = null,\n        $to_date = null,\n        $field = null,\n        $measure = null,\n        $max_hits = null\n    )','\n',char(10)),replace('/**\n     * request top usage data (for reporting), values can optionally be filtered using filter_field and filter_value\n     * @param string $provider provider class name\n     * @param string $from_date from timestamp\n     * @param string $to_date to timestamp\n     * @param string $field field name(s) to aggregate\n     * @param string $measure measure [octets, packets]\n     * @param string $max_hits maximum number of results\n     * @return array timeseries\n     */','\n',char(10)),replace('{\n        // cleanse input\n        $filter = new Filter();\n        $provider = $filter->sanitize($provider, "alphanum");\n        $from_date = $filter->sanitize($from_date, "int");\n        $to_date = $filter->sanitize($to_date, "int");\n        $field = $filter->sanitize($field, "string");\n        $measure = $filter->sanitize($measure, "string");\n        $max_hits = $filter->sanitize($max_hits, "int");\n\n        if ($this->request->isGet()) {\n            if ($this->request->get("filter_field") != null && $this->request->get("filter_value") != null) {\n                $filter_fields = explode('','', $this->request->get("filter_field"));\n                $filter_values = explode('','', $this->request->get("filter_value"));\n                $data_filter = "";\n                foreach ($filter_fields as $field_indx => $filter_field) {\n                    if ($data_filter != '''') {\n                        $data_filter .= '','';\n                    }\n                    if (isset($filter_values[$field_indx])) {\n                        $data_filter .= $filter_field . ''='' . $filter_values[$field_indx];\n                    }\n                }\n                $data_filter = "''{$data_filter}''";\n            } else {\n                // no filter, empty parameter\n                $data_filter = "''''";\n            }\n            $backend = new Backend();\n            $configd_cmd = "netflow aggregate top {$provider} {$from_date} {$to_date} {$field}";\n            $configd_cmd .= " {$measure} {$data_filter} {$max_hits}";\n            $response = $backend->configdRun($configd_cmd);\n            $graph_data = json_decode($response, true);\n            if ($graph_data != null) {\n                return $graph_data;\n            }\n        }\n        return array();\n    }','\n',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(82,'getMetadata','GetMetadata',0,'function getMetadataAction()',replace('/**\n     * get metadata from backend aggregation process\n     * @return array timeseries\n     */','\n',char(10)),replace('{\n        if ($this->request->isGet()) {\n            $backend = new Backend();\n            $configd_cmd = "netflow aggregate metadata json";\n            $response = $backend->configdRun($configd_cmd);\n            $metadata = json_decode($response, true);\n            if ($metadata != null) {\n                return $metadata;\n            }\n        }\n        return array();\n    }','\n',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(83,'getInterfaces','GetInterfaces',0,'function getInterfacesAction()',replace('/**\n     * return interface map (device / name)\n     * @return array interfaces\n     */','\n',char(10)),replace('{\n        // map physical interfaces to description / name\n        $configObj = Config::getInstance()->object();\n        $allInterfaces = array();\n        foreach ($configObj->interfaces->children() as $key => $intf) {\n            $allInterfaces[(string)$intf->if] = empty($intf->descr) ? $key : (string)$intf->descr;\n        }\n        return $allInterfaces;\n    }','\n',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(84,'getProtocols','GetProtocols',0,'function getProtocolsAction()',replace('/**\n     * return known protocols\n     */','\n',char(10)),replace('{\012        $result = array();\012        foreach (explode("\n", file_get_contents(''/etc/protocols'')) as $line) {\012            if (strlen($line) > 1 && $line[0] != ''#'') {\012                $parts = preg_split(''/\s+/'', $line);\012                if (count($parts) >= 4) {\012                    $result[$parts[1]] = $parts[0];\012                }\012            }\012        }\012        return $result;\012    }','\012',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(85,'getServices','GetServices',0,'function getServicesAction()',replace('/**\n     * return known services\n     */','\n',char(10)),replace('{\012        $result = array();\012        foreach (explode("\n", file_get_contents(''/etc/services'')) as $line) {\012            if (strlen($line) > 1 && $line[0] != ''#'') {\012                // there a few ports which have different names for different protocols, but to not overcomplicate\012                // things here, we ignore those exceptions.\012                $parts = preg_split(''/\s+/'', $line);\012                if (count($parts) >= 2) {\012                    $portnum = explode(''/'', trim($parts[1]))[0];\012                    $result[$portnum] = $parts[0];\012                }\012            }\012        }\012        return $result;\012    }','\012',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(86,'export','Export',0,replace('function exportAction(\n        $provider = null,\n        $from_date = null,\n        $to_date = null,\n        $resolution = null\n    )','\n',char(10)),replace('/**\n     * request timeserie data to use for reporting\n     * @param string $provider provider class name\n     * @param string $from_date from timestamp\n     * @param string $to_date to timestamp\n     * @param string $resolution resolution in seconds\n     * @return string csv output\n     */','\n',char(10)),replace('{\n        $this->response->setRawHeader("Content-Type: application/octet-stream");\n        $this->response->setRawHeader("Content-Disposition: attachment; filename=" . $provider . ".csv");\n        if ($this->request->isGet() && $provider != null && $resolution != null) {\n            $backend = new Backend();\n            $configd_cmd = "netflow aggregate export {$provider} {$from_date} {$to_date} {$resolution}";\n            $response = $backend->configdRun($configd_cmd);\n            return $response;\n        } else {\n            return "";\n        }\n    }','\n',char(10)),17,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(87,'getRRDlist','GetRrdlist',0,'function getRRDlistAction()',replace('/**\n     * retrieve Available RRD data\n     * @return array\n     */','\n',char(10)),replace('{\n        # Source of data: filelisting of /var/db/rrd/*.rrd\n        $result = array();\n        $backend = new Backend();\n        $response = $backend->configdRun(''systemhealth list'');\n        $healthList = json_decode($response, true);\n\n        $result[''data''] = array();\n        if (is_array($healthList)) {\n            foreach ($healthList as $healthItem => $details) {\n                if (!array_key_exists($details[''topic''], $result[''data''])) {\n                    $result[''data''][$details[''topic'']] = array();\n                }\n                $result[''data''][$details[''topic'']][] = $details[''itemName''];\n            }\n        }\n        ksort($result[''data'']);\n        $result["result"] = "ok";\n\n        // Category => Items\n        return $result;\n    }','\n',char(10)),18,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(88,'getSystemHealth','GetSystemHealth',0,replace('function getSystemHealthAction(\n        $rrd = "",\n        $from = 0,\n        $to = 0,\n        $max_values = 120,\n        $inverse = false,\n        $detail = -1\n    )','\n',char(10)),replace('/**\n     * retrieve SystemHealth Data (previously called RRD Graphs)\n     * @param string $rrd\n     * @param int $from\n     * @param int $to\n     * @param int $max_values\n     * @param bool $inverse\n     * @param int $detail\n     * @return array\n     */','\n',char(10)),replace('{\n        /**\n         * $rrd = rrd filename without extension\n         * $from = from timestamp (0=min)\n         * $to = to timestamp (0=max)\n         * $max_values = limit datapoint as close as possible to this number (or twice if detail (zoom) + overview )\n         * $inverse = Inverse every odd row (multiply by -1)\n         * $detail = limits processing of dataSets to max given (-1 = all ; 1 = 0,1 ; 2 = 0,1,2 ; etc)\n         */\n\n        $rrd_details = $this->getRRDdetails($rrd)["data"];\n        $xml = false;\n        if ($rrd_details[''filename''] != "") {\n            $backend = new Backend();\n            $response = $backend->configdpRun(''systemhealth fetch'', array($rrd_details[''filename'']));\n            if ($response != null) {\n                $xml = @simplexml_load_string($response);\n            }\n        }\n\n        if ($xml !== false) {\n            // we only use the average databases in any RRD, remove the rest to avoid strange behaviour.\n            for ($count = count($xml->rra) - 1; $count >= 0; $count--) {\n                if (trim((string)$xml->rra[$count]->cf) != "AVERAGE") {\n                    unset($xml->rra[$count]);\n                }\n            }\n            $data_sets_full = $this->getDataSetInfo($xml); // get dataSet information to include in answer\n\n            if ($inverse == ''true'') {\n                $inverse = true;\n            } else {\n                $inverse = false;\n            }\n\n            // The zoom (timespan) level determines the number of datasets to\n            // use in the equation. All the irrelevant sets are removed here.\n            if ((int)$detail >= 0) {\n                for ($count = count($xml->rra) - 1; $count > $detail; $count--) {\n                    unset($xml->rra[$count]);\n                }\n            }\n\n            // determine available dataSets within range and how to handle them\n            $selected_archives = $this->getSelection($this->getDataSetInfo($xml), $from, $to, $max_values);\n            // get condensed dataSets and translate them to d3 usable data\n            $result = $this->translateD3(\n                $this->getCondensedArchive($xml, $selected_archives),\n                $inverse,\n                $rrd_details["field_units"]\n            );\n\n            return ["sets" => $data_sets_full,\n                "d3" => $result,\n                "title" => $rrd_details["title"] != "" ?\n                         $rrd_details["title"] . " | " . ucfirst($rrd_details[''itemName'']) :\n                         ucfirst($rrd_details[''itemName'']),\n                "y-axis_label" => $rrd_details["y-axis_label"]\n            ]; // return details and d3 data\n        } else {\n            return ["sets" => [], "d3" => [], "title" => "error", "y-axis_label" => ""];\n        }\n    }','\n',char(10)),18,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(89,'getInterfaces','GetInterfaces',0,'function getInterfacesAction()',replace('/**\n     * Retrieve network interfaces by key (lan, wan, opt1,..)\n     * @return array\n     */','\n',char(10)),replace('{\n        // collect interface names\n        $intfmap = array();\n        $config = Config::getInstance()->object();\n        if ($config->interfaces->count() > 0) {\n            foreach ($config->interfaces->children() as $key => $node) {\n                $intfmap[(string)$key] = array("descr" => !empty((string)$node->descr) ? (string)$node->descr : $key);\n            }\n        }\n        return $intfmap;\n    }','\n',char(10)),18,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(90,'searchItem','SearchItem',0,'function searchItemAction()',replace('/**\n     * search aliases\n     * @return array search results\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $type = $this->request->get(''type'');\n        $filter_funct = null;\n        if (!empty($type)) {\n            $filter_funct = function ($record) use ($type) {\n                return in_array($record->type, $type);\n            };\n        }\n        return $this->searchBase(\n            "aliases.alias",\n            array(''enabled'', ''name'', ''description'', ''type'', ''content''),\n            "name",\n            $filter_funct\n        );\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(91,'setItem','SetItem',0,'function setItemAction($uuid)',replace('/**\n     * Update alias with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $node = $this->getModel()->getNodeByReference(''aliases.alias.'' . $uuid);\n        $old_name = $node != null ? (string)$node->name : null;\n        if ($old_name !== null && $this->request->isPost() && $this->request->hasPost("alias")) {\n            $new_name = $this->request->getPost("alias")[''name''];\n            if ($new_name != $old_name) {\n                // replace aliases, setBase() will synchronise the changes to disk\n                $this->getModel()->refactor($old_name, $new_name);\n            }\n        }\n        return $this->setBase("alias", "aliases.alias", $uuid);\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(92,'addItem','AddItem',0,'function addItemAction()',replace('/**\n     * Add new alias and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("alias", "aliases.alias");\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(93,'getItem','GetItem',0,'function getItemAction($uuid = null)',replace('/**\n     * Retrieve alias settings or return defaults for new one\n     * @param $uuid item unique id\n     * @return array alias content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $response = $this->getBase("alias", "aliases.alias", $uuid);\n        $selected_aliases = array_keys($response[''alias''][''content'']);\n        foreach ($this->getModel()->aliasIterator() as $alias) {\n            if (!in_array($alias[''name''], $selected_aliases)) {\n                $response[''alias''][''content''][$alias[''name'']] = array(\n                  "selected" => 0, "value" => $alias[''name'']\n                );\n            }\n        }\n        return $response;\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(94,'getAliasUUID','GetAliasUuid',0,'function getAliasUUIDAction($name)',replace('/**\n     * find the alias uuid by name\n     * @param $name alias name\n     * @return array uuid\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $node = $this->getModel();\n        foreach ($node->aliases->alias->iterateItems() as $key => $alias) {\n            if ((string)$alias->name == $name) {\n                return array(''uuid'' => $key);\n            }\n        }\n        return array();\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(95,'delItem','DelItem',0,'function delItemAction($uuid)',replace('/**\n     * Delete alias by uuid, save contents to tmp for removal on apply\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     * @throws \OPNsense\Base\UserException when unable to delete\n     */','\n',char(10)),replace('{\012        Config::getInstance()->lock();\012        $node = $this->getModel()->getNodeByReference(''aliases.alias.'' . $uuid);\012        if ($node != null) {\012            $uses = $this->getModel()->whereUsed((string)$node->name);\012            if (!empty($uses)) {\012                $message = "";\012                foreach ($uses as $key => $value) {\012                    $message .= sprintf("\n[%s] %s", $key, $value);\012                }\012                $message = sprintf(gettext("Cannot delete alias. Currently in use by %s"), $message);\012                throw new \OPNsense\Base\UserException($message, gettext("Alias in use"));\012            }\012        }\012        return $this->delBase("aliases.alias", $uuid);\012    }','\012',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(96,'toggleItem','ToggleItem',0,'function toggleItemAction($uuid, $enabled = null)',replace('/**\n     * toggle status\n     * @param string $uuid id to toggled\n     * @param string|null $enabled set enabled by default\n     * @return array status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("aliases.alias", $uuid, $enabled);\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(97,'listCountries','ListCountries',0,'function listCountriesAction()',replace('/**\n     * list countries and regions\n     * @return array indexed by country code\n     */','\n',char(10)),replace('{\012        $result = array();\012\012        foreach (explode("\n", file_get_contents(''/usr/local/opnsense/contrib/tzdata/iso3166.tab'')) as $line) {\012            $line = trim($line);\012            if (strlen($line) > 3 && substr($line, 0, 1) != ''#'') {\012                $result[substr($line, 0, 2)] = array(\012                    "name" => trim(substr($line, 2, 9999)),\012                    "region" => null\012                );\012            }\012        }\012        foreach (explode("\n", file_get_contents(''/usr/local/opnsense/contrib/tzdata/zone.tab'')) as $line) {\012            if (strlen($line) > 0 && substr($line, 0, 1) == ''#'') {\012                continue;\012            }\012            $line = explode("\t", $line);\012            if (empty($line[0]) || strlen($line[0]) != 2) {\012                continue;\012            }\012            if (empty($line[2]) || strpos($line[2], ''/'') === false) {\012                continue;\012            }\012            if (!empty($result[$line[0]]) && empty($result[$line[0]][''region''])) {\012                $result[$line[0]][''region''] = explode(''/'', $line[2])[0];\012            }\012        }\012        return $result;\012    }','\012',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(98,'listNetworkAliases','ListNetworkAliases',0,'function listNetworkAliasesAction()',replace('/**\n     * list network alias types\n     * @return array indexed by country alias name\n     */','\n',char(10)),replace('{\n        $result = array();\n        foreach ($this->getModel()->aliases->alias->iterateItems() as $alias) {\n            if (!in_array((string)$alias->type, [''external'', ''port''])) {\n                $result[(string)$alias->name] = (string)$alias->name;\n            }\n        }\n        ksort($result);\n        return $result;\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(99,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure aliases\n     */','\n',char(10)),replace('{\012        if ($this->request->isPost()) {\012            $backend = new Backend();\012            $backend->configdRun(''template reload OPNsense/Filter'');\012            $backend->configdRun("filter reload skip_alias");\012            $bckresult = json_decode($backend->configdRun("filter refresh_aliases"), true);\012            if (!empty($bckresult[''messages''])) {\012                throw new UserException(implode("\n", $bckresult[''messages'']), gettext("Alias"));\012            }\012            return array("status" => "ok");\012        } else {\012            return array("status" => "failed");\012        }\012    }','\012',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(100,'export','Export',0,'function exportAction()',replace('/**\n     * export configured aliases\n     */','\n',char(10)),replace('{\n        if ($this->request->isGet()) {\n            // return raw, unescaped since this content is intended for direct download\n            $this->response->setContentType(''application/json'', ''UTF-8'');\n            $this->response->setContent(json_encode($this->getRawNodes($this->getModel())));\n        } else {\n            throw new UserException("Unsupported request type");\n        }\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(101,'import','Import',1,'function importAction()',replace('/**\n     * import delivered aliases in post variable "data", validate all only commit when fully valid.\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $result = array("existing" => 0, "new" => 0, "status" => "failed");\n            $data = $this->request->getPost("data");\n            if (\n                is_array($data) && !empty($data[''aliases''])\n                    && !empty($data[''aliases''][''alias'']) && is_array($data[''aliases''][''alias''])\n            ) {\n                Config::getInstance()->lock();\n\n                // save into model\n                $uuid_mapping = array();\n                foreach ($data[''aliases''][''alias''] as $uuid => $content) {\n                    if (is_array($content) && !empty($content[''name''])) {\n                        $node = $this->getModel()->getByName($content[''name'']);\n                        if ($node == null) {\n                            $node = $this->getModel()->aliases->alias->Add();\n                            $result[''new''] += 1;\n                        } else {\n                            $result[''existing''] += 1;\n                        }\n                        foreach ($content as $prop => $value) {\n                            $node->$prop = $value;\n                        }\n                        $uuid_mapping[$node->getAttribute(''uuid'')] = $uuid;\n                    }\n                }\n                // attach this alias to util class, to avoid recursion issues (aliases used in aliases).\n                \OPNsense\Firewall\Util::attachAliasObject($this->getModel());\n\n                // perform validation, record details.\n                foreach ($this->getModel()->performValidation() as $msg) {\n                    if (empty($result[''validations''])) {\n                        $result[''validations''] = array();\n                    }\n                    $parts = explode(''.'', $msg->getField());\n                    $uuid = $parts[count($parts) - 2];\n                    $fieldname = $parts[count($parts) - 1];\n                    $result[''validations''][$uuid_mapping[$uuid] . "." . $fieldname] = $msg->getMessage();\n                }\n\n\n                // only persist when valid import\n                if (empty($result[''validations''])) {\n                    $result[''status''] = "ok";\n                    $this->save();\n                } else {\n                    $result[''status''] = "failed";\n                    Config::getInstance()->unlock();\n                }\n            }\n        } else {\n            throw new UserException("Unsupported request type");\n        }\n        return $result;\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(102,'getGeoIP','GetGeoIp',0,'function getGeoIPAction()',replace('/**\n     * get geoip settings (and stats)\n     */','\n',char(10)),replace('{\n        $result = array();\n        if ($this->request->isGet()) {\n            $cnf = Config::getInstance()->object();\n            $result[static::$internalModelName] = [''geoip'' => array()];\n            $node = $this->getModel()->getNodeByReference(''geoip'');\n            if ($node != null) {\n                $result[static::$internalModelName][''geoip''] = $node->getNodes();\n            }\n            // count aliases that depend on GeoIP data\n            $result[static::$internalModelName][''geoip''][''usages''] = 0;\n            foreach ($this->getModel()->aliasIterator() as $alias) {\n                if ($alias[''type''] == "geoip") {\n                    $result[static::$internalModelName][''geoip''][''usages'']++;\n                }\n            }\n            if (isset($cnf->system->firmware) && !empty($cnf->system->firmware->mirror)) {\n                // XXX: we might add some attribute in firmware to store subscription status, since we now only store uri\n                $result[static::$internalModelName][''geoip''][''subscription''] =\n                    strpos($cnf->system->firmware->mirror, "opnsense-update.deciso.com") !== false;\n            }\n\n            $result[static::$internalModelName][''geoip''][''address_count''] = 0;\n            if (file_exists(''/usr/local/share/GeoIP/alias.stats'')) {\n                $stats = json_decode(file_get_contents(''/usr/local/share/GeoIP/alias.stats''), true);\n                $result[static::$internalModelName][''geoip''] = array_merge(\n                    $result[static::$internalModelName][''geoip''],\n                    $stats\n                );\n            }\n        }\n        return $result;\n    }','\n',char(10)),19,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(103,'aliases','Aliases',0,'function aliasesAction()',replace('/**\n     * list active alias tables\n     * @return array alias names\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $backend = new Backend();\n        $result = json_decode($backend->configdRun("filter list tables json"));\n        if ($result !== null) {\n            // return sorted (case insensitive)\n            natcasesort($result);\n            $result = array_values($result);\n        }\n        return $result;\n    }','\n',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(104,'list','List',0,'function listAction($alias)',replace('/**\n     * list alias table\n     * @param string $alias name to list\n     * @return array alias contents\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n\n        $itemsPerPage = intval($this->request->getPost(''rowCount'', ''int'', 9999));\n        $currentPage = intval($this->request->getPost(''current'', ''int'', 1));\n        $offset = ($currentPage - 1) * $itemsPerPage;\n\n        $backend = new Backend();\n        $entries = json_decode($backend->configdpRun("filter list table", array($alias, "json")), true);\n        $entry_keys = array_keys($entries);\n\n        if ($this->request->hasPost(''searchPhrase'') && $this->request->getPost(''searchPhrase'') !== '''') {\n            $searchPhrase = $this->request->getPost(''searchPhrase'');\n            $entry_keys = array_filter($entry_keys, function ($value) use ($searchPhrase) {\n                return strpos($value, $searchPhrase) !== false;\n            });\n        }\n\n        if (\n            $this->request->hasPost(''sort'') &&\n            is_array($this->request->getPost(''sort'')) &&\n            array_key_exists(''ip'', $this->request->getPost(''sort'')) &&\n            $this->request->getPost(''sort'')[''ip''] === ''desc''\n        ) {\n            rsort($entry_keys);\n        } else {\n            sort($entry_keys);\n        }\n\n        $formatted = array_map(function ($value) use (&$entries) {\n            $item = [''ip'' => $value];\n            foreach ($entries[$value] as $ekey => $evalue) {\n                $item[$ekey] = $evalue;\n            }\n            return $item;\n        }, array_slice($entry_keys, $offset, $itemsPerPage));\n\n        return [\n            ''total'' => count($entry_keys),\n            ''rowCount'' => $itemsPerPage,\n            ''current'' => $currentPage,\n            ''rows'' => $formatted,\n        ];\n    }','\n',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(105,'update_bogons','UpdateBogons',0,'function update_bogonsAction()',replace('/**\n     * update bogons table\n     * @return array status\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $backend = new Backend();\n        $backend->configdRun(''filter update bogons'');\n        return array(''status'' => ''done'');\n    }','\n',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(106,'flush','Flush',1,'function flushAction($alias)',replace('/**\n     * flush alias table\n     * @param string $alias name to flush\n     * @return array status\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $backend = new Backend();\n            $backend->configdpRun("filter delete table", array($alias, "ALL"));\n            return array("status" => "done");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(107,'add','Add',1,'function addAction($alias)',replace('/**\n     * add item to alias table\n     * @param string $alias name\n     * @return array status\n     */','\n',char(10)),replace('{\012        $this->sessionClose();\012        if ($this->request->isPost() && $this->request->hasPost("address")) {\012            Config::getInstance()->lock();\012            $address = $this->request->getPost("address");\012            if (preg_match("/[^0-9a-f\:\.\/_]/", $address)) {\012                return array("status" => "not_an_address");\012            }\012            $cnfAlias = $this->getAlias($alias);\012            if ($cnfAlias !== null && in_array($cnfAlias->type, array(''host'', ''network''))) {\012                // update local administration, add address when not found for static types\012                $items = !empty((string)$cnfAlias->content) ? explode("\n", $cnfAlias->content) : array();\012                if (strpos($address, "/") === false && $cnfAlias->type == ''network'') {\012                    // add mask\012                    $address .= "/" . (strpos($address, ":") ? ''128'' : ''32'');\012                }\012                if (!array_search($address, $items)) {\012                    $items[] = $address;\012                    $cnfAlias->content = implode("\n", $items);\012                    $this->getModel()->serializeToConfig();\012                    Config::getInstance()->save();\012                    // flush to disk,\012                    (new Backend())->configdRun(''template reload OPNsense/Filter'');\012                }\012            }\012            if ($cnfAlias !== null) {\012                // only allow additions to known aliases\012                $backend = new Backend();\012                $backend->configdpRun("filter add table", array($alias, $address));\012                return array("status" => "done");\012            } else {\012                return array("status" => "failed", "status_msg" => sprintf("non existing alias %s", $alias));\012            }\012        } else {\012            return array("status" => "failed");\012        }\012    }','\012',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(108,'find_references','FindReferences',1,'function find_referencesAction()',replace('/**\n     * API handler to look up in which rules an IP is used (either explicitly or included in a range).\n     *\n     * @return array Array with indexes ''status'' (whether the call succeeded) and ''matches'' (which rules match this IP,\n     *               only present if the call was succesful.)\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        if ($this->request->isPost() && $this->request->hasPost(''ip'')) {\n            $ip = $this->request->getPost(''ip'');\n            if (preg_match("/[^0-9a-f\:\.\/_]/", $ip)) {\n                return [''status'' => ''Not an IP address!''];\n            }\n\n            $backend = new Backend();\n            return json_decode($backend->configdpRun(''filter find_table_references'', [$ip]), true);\n        } else {\n            return [''status'' => ''IP parameter not specified!''];\n        }\n    }','\n',char(10)),20,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(109,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * Reconfigure IDS\n     * @return array result status\n     * @throws \Exception when configd action fails\n     * @throws \OPNsense\Base\ModelException when unable to construct model\n     * @throws \Phalcon\Validation\Exception when one or more model validations fail\n     */','\n',char(10)),replace('{\n        $status = "failed";\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $mdlIDS = new IDS();\n            $runStatus = $this->statusAction();\n            // we should always have a cron item configured for IDS, let''s create one upon first reconfigure.\n            if ((string)$mdlIDS->general->UpdateCron == "") {\n                $mdlCron = new Cron();\n                // update cron relation (if this doesn''t break consistency)\n                $mdlIDS->general->UpdateCron = $mdlCron->newDailyJob("IDS", "ids update", "ids rule updates", "*", "0");\n\n                if ($mdlCron->performValidation()->count() == 0) {\n                    $mdlCron->serializeToConfig();\n                    // save data to config, do not validate because the current in memory model doesn''t know about the\n                    // cron item just created.\n                    $mdlIDS->serializeToConfig($validateFullModel = false, $disable_validation = true);\n                    Config::getInstance()->save();\n                }\n            }\n\n            if ($runStatus[''status''] == "running" && (string)$mdlIDS->general->enabled == 0) {\n                $this->stopAction();\n            }\n\n            $backend = new Backend();\n            $bckresult = trim($backend->configdRun(''template reload OPNsense/IDS''));\n\n            if ($bckresult == "OK") {\n                if ((string)$mdlIDS->general->enabled == 1) {\n                    $bckresult = trim($backend->configdRun("ids install rules"));\n                    if ($bckresult == "OK") {\n                        if ($runStatus[''status''] == ''running'') {\n                            $status = $this->restartAction()[''response''];\n                        } else {\n                            $status = $this->startAction()[''response''];\n                        }\n                    } else {\n                        $status = "error installing ids rules (" . $bckresult . ")";\n                    }\n                } else {\n                    $status = "OK";\n                }\n            } else {\n                $status = "error generating ids template (" . $bckresult . ")";\n            }\n        }\n        return array("status" => $status);\n    }\n\n    /**\n     * Download and update rules\n     * @param null|string $wait wait for update to complete (default) or run in background and return message id\n     * @return array result status\n     * @throws \Exception when configd action fails\n     */\n    public function updateRulesAction($wait = null)\n    {\n        $status = "failed";\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            // we have to trigger a template reload to be sure we have the right download configuration\n            // ideally we should only regenerate the download config, but that''s not supported at the moment.\n            // (not sure if it should be supported)\n            $bckresult = trim($backend->configdRun(''template reload OPNsense/IDS''));\n\n            if ($bckresult == "OK") {\n                if ($wait != null) {\n                    $detach = true;\n                } else {\n                    $detach = false;\n                }\n\n                $status = $backend->configdRun("ids update", $detach);\n            } else {\n                $status = "template error";\n            }\n        }\n\n        return array("status" => $status);\n    }\n\n    /**\n     * Flush rule configuration to config and reload suricata ruleset (graceful restart)\n     * @return array\n     * @throws \Exception when configd action fails\n     */\n    public function reloadRulesAction()\n    {\n        $status = "failed";\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            // flush rule configuration\n            $bckresult = trim($backend->configdRun(''template reload OPNsense/IDS''));\n            if ($bckresult == "OK") {\n                $status = $backend->configdRun("ids reload");\n            } else {\n                $status = "template error";\n            }\n        }\n        return array("status" => $status);\n    }\n\n    /**\n     * Query suricata alerts\n     * @return array\n     * @throws \Exception when configd action fails\n     */\n    public function queryAlertsAction()\n    {\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            // create filter to sanitize input data\n            $filter = new Filter();\n            $filter->add(''query'', new QueryFilter());\n\n            // fetch query parameters (limit results to prevent out of memory issues)\n            $itemsPerPage = $this->request->getPost(''rowCount'', ''int'', 9999);\n            $currentPage = $this->request->getPost(''current'', ''int'', 1);\n\n            if ($this->request->getPost(''searchPhrase'', ''string'', '''') != "") {\n                $filterTag = $filter->sanitize($this->request->getPost(''searchPhrase''), "query");\n                $searchPhrase = ''alert,alert_action,src_ip,dest_ip/"*'' . $filterTag . ''*"'';\n            } else {\n                $searchPhrase = '''';\n            }\n\n\n            if ($this->request->getPost(''fileid'', ''string'', '''') != "") {\n                $fileid = $this->request->getPost(''fileid'', ''int'', -1);\n            } else {\n                $fileid = null;\n            }\n\n            $backend = new Backend();\n            $response = $backend->configdpRun("ids query alerts", array($itemsPerPage,\n                ($currentPage - 1) * $itemsPerPage, $searchPhrase, $fileid));\n            $result = json_decode($response, true);\n            if ($result != null) {\n                $result[''rowCount''] = count($result[''rows'']);\n                $result[''total''] = $result[''total_rows''];\n                $result[''current''] = (int)$currentPage;\n                return $result;\n            }\n        }\n        return array();\n    }\n\n    /**\n     * Fetch alert detailed info\n     * @param string $alertId alert id, position in log file\n     * @param string $fileid log file id number (empty for standard)\n     * @return array alert info\n     * @throws \Exception when configd action fails\n     */\n    public function getAlertInfoAction($alertId, $fileid = "")\n    {\n        $this->sessionClose();\n        $backend = new Backend();\n        $filter = new Filter();\n        $id = $filter->sanitize($alertId, "int");\n        $response = $backend->configdpRun("ids query alerts", array(1, 0, "filepos/" . $id, $fileid));\n        $result = json_decode($response, true);\n        if ($result != null && count($result[''rows'']) > 0) {\n            return $result[''rows''][0];\n        } else {\n            return array();\n        }\n    }\n\n    /**\n     * List all available logs\n     * @return array list of alert logs\n     * @throws \Exception when configd action fails\n     */\n    public function getAlertLogsAction()\n    {\n        $this->sessionClose();\n        $backend = new Backend();\n        $response = $backend->configdRun("ids list alertlogs");\n        $result = json_decode($response, true);\n        if ($result != null) {\n            $logs = array();\n            foreach ($result as $log) {\n                $log[''modified''] = date(''Y/m/d G:i'', $log[''modified'']);\n                $logs[] = $log;\n            }\n            return $logs;\n        } else {\n            return array();\n        }\n    }\n\n    /**\n     * Drop alert log\n     * @return array result status\n     * @throws \Exception when configd action fails\n     */\n    public function dropAlertLogAction()\n    {\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $filename = $this->request->getPost(''filename'', ''string'', null);\n            if ($filename != null) {\n                $filename = basename($filename);\n                $backend->configdpRun("ids drop alertlog", array($filename));\n                return array("status" => "ok");\n            }\n        }\n        return array("status" => "failed");\n    }\n}','\n',char(10)),21,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(110,'searchInstalledRules','SearchInstalledRules',1,'function searchInstalledRulesAction()',replace('/**\n     * Search installed ids rules\n     * @return array query results\n     * @throws \Exception when configd action fails\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            // create filter to sanitize input data\n            $filter = new Filter();\n            $filter->add(''query'', new QueryFilter());\n\n\n            // fetch query parameters (limit results to prevent out of memory issues)\n            $itemsPerPage = $this->request->getPost(''rowCount'', ''int'', 9999);\n            $currentPage = $this->request->getPost(''current'', ''int'', 1);\n\n            if ($this->request->hasPost(''sort'') && is_array($this->request->getPost("sort"))) {\n                $sortStr = '''';\n                $sortBy = array_keys($this->request->getPost("sort"));\n                if ($this->request->getPost("sort")[$sortBy[0]] == "desc") {\n                    $sortOrd = ''desc'';\n                } else {\n                    $sortOrd = ''asc'';\n                }\n\n                foreach ($sortBy as $sortKey) {\n                    if ($sortStr != '''') {\n                        $sortStr .= '','';\n                    }\n                    $sortStr .= $filter->sanitize($sortKey, "query") . '' '' . $sortOrd . '' '';\n                }\n            } else {\n                $sortStr = ''sid'';\n            }\n            if ($this->request->getPost(''searchPhrase'', ''string'', '''') != "") {\n                $searchTag = $filter->sanitize($this->request->getPost(''searchPhrase''), "query");\n                $searchPhrase = ''msg,source,sid/"*'' . $searchTag . ''"'';\n            } else {\n                $searchPhrase = '''';\n            }\n\n            // add metadata filters\n            foreach ($_POST as $key => $value) {\n                $key = $filter->sanitize($key, "string");\n                $value = $filter->sanitize($value, "string");\n                if (!in_array($key, [''current'', ''rowCount'', ''sort'', ''searchPhrase'', ''action'' ,''status''])) {\n                    $searchPhrase .= " {$key}/{$value} ";\n                }\n            }\n\n            // add filter for action\n            if ($this->request->getPost("action", "string", '''') != "") {\n                $searchTag = $filter->sanitize($this->request->getPost(''action''), "query");\n                $searchPhrase .= " installed_action/" . $searchTag . '' '';\n            }\n            if ($this->request->getPost("status", "string", '''') != "") {\n                $searchTag = $filter->sanitize($this->request->getPost(''status''), "query");\n                $searchPhrase .= " installed_status/" . $searchTag . '' '';\n            }\n\n            // request list of installed rules\n            $backend = new Backend();\n            $response = $backend->configdpRun("ids query rules", array($itemsPerPage,\n                ($currentPage - 1) * $itemsPerPage,\n                $searchPhrase, $sortStr));\n\n            $data = json_decode($response, true);\n\n            if ($data != null && array_key_exists("rows", $data)) {\n                $result = array();\n                $result[''rows''] = $data[''rows''];\n                // update rule status with own administration\n                foreach ($result[''rows''] as &$row) {\n                    $row[''enabled_default''] = $row[''enabled''];\n                    $row[''enabled''] = $this->getModel()->getRuleStatus($row[''sid''], $row[''enabled'']);\n                    $row[''action''] = $this->getModel()->getRuleAction($row[''sid''], $row[''action''], true);\n                }\n\n                $result[''rowCount''] = empty($result[''rows'']) || !is_array($result[''rows'']) ? 0 : count($result[''rows'']);\n                $result[''total''] = $data[''total_rows''];\n                $result[''parameters''] = $data[''parameters''];\n                $result[''current''] = (int)$currentPage;\n                return $result;\n            } else {\n                return array();\n            }\n        } else {\n            return array();\n        }\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(111,'getRuleInfo','GetRuleInfo',0,'function getRuleInfoAction($sid = null)',replace('/**\n     * Get rule information\n     * @param string|null $sid rule identifier\n     * @return array|mixed\n     * @throws \Exception when configd action fails\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\012        // request list of installed rules\012        if (!empty($sid)) {\012            $this->sessionClose();\012            $backend = new Backend();\012            $response = $backend->configdpRun("ids query rules", array(1, 0,''sid/'' . $sid));\012            $data = json_decode($response, true);\012        } else {\012            $data = null;\012        }\012\012        if ($data != null && array_key_exists("rows", $data) && !empty($data[''rows''])) {\012            $row = $data[''rows''][0];\012            // set current enable status (default + registered offset)\012            $row[''enabled_default''] = $row[''enabled''];\012            $row[''action_default''] = $row[''action''];\012            $row[''enabled''] = $this->getModel()->getRuleStatus($row[''sid''], $row[''enabled'']);\012            $row[''action''] = $this->getModel()->getRuleAction($row[''sid''], $row[''action'']);\012            //\012            if (isset($row[''reference'']) && $row[''reference''] != '''') {\012                // browser friendly reference data\012                $row[''reference_html''] = '''';\012                foreach (explode("\n", $row[''reference'']) as $ref) {\012                    $ref = trim($ref);\012                    $item_html = ''<small><a href="%url%" target="_blank">%ref%</a></small>'';\012                    if (substr($ref, 0, 4) == ''url,'') {\012                        $item_html = str_replace("%url%", ''http://'' . substr($ref, 4), $item_html);\012                        $item_html = str_replace("%ref%", substr($ref, 4), $item_html);\012                    } elseif (substr($ref, 0, 7) == "system,") {\012                        $item_html = str_replace("%url%", substr($ref, 7), $item_html);\012                        $item_html = str_replace("%ref%", substr($ref, 7), $item_html);\012                    } elseif (substr($ref, 0, 8) == "bugtraq,") {\012                        $item_html = str_replace("%url%", "http://www.securityfocus.com/bid/" .\012                            substr($ref, 8), $item_html);\012                        $item_html = str_replace("%ref%", "bugtraq " . substr($ref, 8), $item_html);\012                    } elseif (substr($ref, 0, 4) == "cve,") {\012                        $item_html = str_replace("%url%", "http://cve.mitre.org/cgi-bin/cvename.cgi?name=" .\012                            substr($ref, 4), $item_html);\012                        $item_html = str_replace("%ref%", substr($ref, 4), $item_html);\012                    } elseif (substr($ref, 0, 7) == "nessus,") {\012                        $item_html = str_replace("%url%", "http://cgi.nessus.org/plugins/dump.php3?id=" .\012                            substr($ref, 7), $item_html);\012                        $item_html = str_replace("%ref%", ''nessus '' . substr($ref, 7), $item_html);\012                    } elseif (substr($ref, 0, 7) == "mcafee,") {\012                        $item_html = str_replace("%url%", "http://vil.nai.com/vil/dispVirus.asp?virus_k=" .\012                            substr($ref, 7), $item_html);\012                        $item_html = str_replace("%ref%", ''macafee '' . substr($ref, 7), $item_html);\012                    } else {\012                        continue;\012                    }\012                    $row[''reference_html''] .= $item_html . ''<br/>'';\012                }\012            }\012            ksort($row);\012            return $row;\012        } else {\012            return array();\012        }\012    }','\012',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(112,'listRuleMetadata','ListRuleMetadata',0,'function listRuleMetadataAction()',replace('/**\n     * List available rule metadata\n     * @return array\n     * @throws \Exception when configd action fails\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $response = (new Backend())->configdRun("ids list rulemetadata");\n        $data = json_decode($response, true);\n        if ($data != null) {\n            return $data;\n        } else {\n            return array();\n        }\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(113,'getRulesetproperties','GetRulesetproperties',0,'function getRulesetpropertiesAction()',replace('/**\n     * List ruleset properties\n     * @return array result status\n     * @throws \Exception when config actions fails\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $result = array(''properties'' => array());\n        $this->sessionClose();\n        $backend = new Backend();\n        $response = $backend->configdRun("ids list installablerulesets");\n        $data = json_decode($response, true);\n        if ($data != null && isset($data["properties"])) {\n            foreach ($data[''properties''] as $key => $settings) {\n                $result[''properties''][$key] = !empty($settings[''default'']) ? $settings[''default''] : "";\n                foreach ($this->getModel()->fileTags->tag->iterateItems() as $tag) {\n                    if ((string)$tag->property == $key) {\n                        $result[''properties''][(string)$tag->property] = (string)$tag->value;\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(114,'setRulesetproperties','SetRulesetproperties',1,'function setRulesetpropertiesAction()',replace('/**\n     * Update ruleset properties\n     * @return array result status\n     * @throws \Exception when config action fails\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("properties")) {\n            // only update properties available in "ids list installablerulesets"\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("ids list installablerulesets");\n            $data = json_decode($response, true);\n            if ($data != null && isset($data["properties"])) {\n                $setProperties = $this->request->getPost("properties");\n                foreach ($setProperties as $key => $value) {\n                    if (isset($data[''properties''][$key])) {\n                        if (!isset($result[''fields''])) {\n                            $result[''fields''] = array(); // return updated fields\n                        }\n                        $result[''fields''][] = $key;\n                        $resultTag = null;\n                        foreach ($this->getModel()->fileTags->tag->iterateItems() as $tag) {\n                            if ((string)$tag->property == $key) {\n                                $resultTag = $tag;\n                                break;\n                            }\n                        }\n                        if ($resultTag == null) {\n                            $resultTag = $this->getModel()->fileTags->tag->Add();\n                        }\n                        $resultTag->property = (string)$key;\n                        $resultTag->value = (string)$value;\n                    }\n                }\n                $validations = $this->getModel()->validate();\n                if (!empty($validations)) {\n                    $result[''validations''] = $validations;\n                } else {\n                    $result = $this->save();\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(115,'listRulesets','ListRulesets',0,'function listRulesetsAction()',replace('/**\n     * List all installable rules including current status\n     * @return array|mixed list of items when $id is null otherwise the selected item is returned\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $result = array();\n        $this->sessionClose();\n        $result[''rows''] = $this->listInstallableRules();\n        // sort by description\n        usort($result[''rows''], function ($item1, $item2) {\n            return strcmp(strtolower($item1[''description'']), strtolower($item2[''description'']));\n        });\n        $result[''rowCount''] = empty($result[''rows'']) ? 0 :  count($result[''rows'']);\n        $result[''total''] = empty($result[''rows'']) ? 0 : count($result[''rows'']);\n        $result[''current''] = 1;\n        return $result;\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(116,'getRuleset','GetRuleset',0,'function getRulesetAction($id)',replace('/**\n     * Get ruleset list info (file)\n     * @param string $id list filename\n     * @return array|mixed list details\n     * @throws \Exception when configd action fails\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $rules = $this->listInstallableRules();\n        foreach ($rules as $rule) {\n            if ($rule[''filename''] == $id) {\n                return $rule;\n            }\n        }\n        return array();\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(117,'setRuleset','SetRuleset',1,'function setRulesetAction($filename)',replace('/**\n     * Set ruleset attributes\n     * @param $filename rule filename (key)\n     * @return array result status\n     * @throws \Exception when configd action fails\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // we''re only allowed to edit filenames which have an install ruleset, request valid ones from configd\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("ids list installablerulesets");\n            $data = json_decode($response, true);\n            if ($data != null && array_key_exists("items", $data) && array_key_exists($filename, $data[''items''])) {\n                // filename exists, input ruleset data\n                $mdlIDS = $this->getModel();\n                $node = $mdlIDS->getFileNode($filename);\n\n                // send post attributes to model\n                $node->setNodes($_POST);\n\n                $validations = $mdlIDS->validate($node->__reference . ".", "");\n                if (!empty($validations)) {\n                    $result[''validations''] = $validations;\n                } else {\n                    $result = $this->save();\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Toggle usage of rule file or set enabled / disabled depending on parameters\n     * @param $filenames (target) rule file name, or list of filenames separated by a comma\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array status 0/1 or error\n     * @throws \Exception\n     * @throws \Phalcon\Validation\Exception\n     */\n    public function toggleRulesetAction($filenames, $enabled = null)\n    {\n        $update_count = 0;\n        $result = array("status" => "none");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("ids list installablerulesets");\n            $data = json_decode($response, true);\n            foreach (explode(",", $filenames) as $filename) {\n                if ($data != null && array_key_exists("items", $data) && array_key_exists($filename, $data[''items''])) {\n                    $node = $this->getModel()->getFileNode($filename);\n                    if ($enabled == "0" || $enabled == "1") {\n                        $node->enabled = (string)$enabled;\n                    } elseif ($enabled == "drop") {\n                        $node->enabled = "1";\n                        $node->filter = "drop";\n                    } elseif ($enabled == "clear") {\n                        $node->enabled = "1";\n                        $node->filter = "";\n                    } elseif ((string)$node->enabled == "1") {\n                        $node->enabled = "0";\n                    } else {\n                        $node->enabled = "1";\n                    }\n                    // only update result state if all items until now are ok\n                    if ($result[''status''] != ''error'') {\n                        $result[''status''] = (string)$node->enabled;\n                    }\n                    $update_count++;\n                } else {\n                    $result[''status''] = "error";\n                }\n            }\n            if ($update_count > 0) {\n                $this->save();\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * Toggle rule enable status\n     * @param string $sids unique id\n     * @param string|int $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array empty\n     * @throws \Exception when configd action fails\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */\n    public function toggleRuleAction($sids, $enabled = null)\n    {\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $update_count = 0;\n            foreach (explode(",", $sids) as $sid) {\n                $ruleinfo = $this->getRuleInfoAction($sid);\n                $current_action = null;\n                foreach ($ruleinfo[''action''] as $key => $act) {\n                    if (!empty($act[''selected''])) {\n                        $current_action = $key;\n                    }\n                }\n                if (!empty($ruleinfo)) {\n                    if ($enabled == null) {\n                        // toggle state\n                        if ($ruleinfo[''enabled''] == 1) {\n                            $new_state = 0;\n                        } else {\n                            $new_state = 1;\n                        }\n                    } elseif ($enabled == 1) {\n                        $new_state = 1;\n                    } elseif ($enabled == "alert") {\n                        $current_action = "alert";\n                        $new_state = 1;\n                    } elseif ($enabled == "drop") {\n                        $current_action = "drop";\n                        $new_state = 1;\n                    } else {\n                        $new_state = 0;\n                    }\n                    if ($ruleinfo[''enabled_default''] == $new_state && $current_action == $ruleinfo[''action_default'']) {\n                        // if we''re switching back to default, remove alter rule\n                        $this->getModel()->removeRule($sid);\n                    } elseif ($new_state == 1) {\n                        $this->getModel()->enableRule($sid)->action = $current_action;\n                    } else {\n                        $this->getModel()->disableRule($sid)->action = $current_action;\n                    }\n                    $update_count++;\n                }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(118,'searchUserRule','SearchUserRule',0,'function searchUserRuleAction()',replace('/**\n     * Search user defined rules\n     * @return array list of found user rules\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase("userDefinedRules.rule", array("enabled", "action", "description"), "description");\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(119,'setUserRule','SetUserRule',0,'function setUserRuleAction($uuid)',replace('/**\n     * Update user defined rules\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("rule", "userDefinedRules.rule", $uuid);\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(120,'addUserRule','AddUserRule',0,'function addUserRuleAction()',replace('/**\n     * Add new user defined rule\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("rule", "userDefinedRules.rule");\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(121,'getUserRule','GetUserRule',0,'function getUserRuleAction($uuid = null)',replace('/**\n     * Get properties of user defined rule\n     * @param null|string $uuid user rule internal id\n     * @return array user defined properties\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("rule", "userDefinedRules.rule", $uuid);\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(122,'delUserRule','DelUserRule',0,'function delUserRuleAction($uuid)',replace('/**\n     * Delete user rule item\n     * @param string $uuid user rule internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("userDefinedRules.rule", $uuid);\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(123,'toggleUserRule','ToggleUserRule',0,'function toggleUserRuleAction($uuid, $enabled = null)',replace('/**\n     * Toggle user defined rule by uuid (enable/disable)\n     * @param $uuid user defined rule internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("userDefinedRules.rule", $uuid, $enabled);\n    }','\n',char(10)),22,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(124,'searchItem','SearchItem',0,'function searchItemAction()','',replace('{\n        return $this->searchBase("loopback", array(''deviceId'', ''description''), "description");\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(125,'setItem','SetItem',0,'function setItemAction($uuid)','',replace('{\n        return $this->setBase("loopback", "loopback", $uuid);\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(126,'addItem','AddItem',0,'function addItemAction()','',replace('{\n        return $this->addBase("loopback", "loopback");\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(127,'getItem','GetItem',0,'function getItemAction($uuid = null)','',replace('{\n        return $this->getBase("loopback", "loopback", $uuid);\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(128,'delItem','DelItem',0,'function delItemAction($uuid)','',replace('{\n        return $this->delBase("loopback", $uuid);\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(129,'reconfigure','Reconfigure',1,'function reconfigureAction()','',replace('{\n        $result = array("status" => "failed");\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $result[''status''] = strtolower(trim($backend->configdRun(''interface loopback configure'')));\n        }\n        return $result;\n    }','\n',char(10)),23,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(130,'searchItem','SearchItem',0,'function searchItemAction()','',replace('{\n        return $this->searchBase("vxlan", array(\n          ''enabled'', ''deviceId'', ''vxlanid'', ''vxlanlocal'', ''vxlanremote'', ''vxlangroup'', ''vxlandev''\n        ), "vxlanid");\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(131,'setItem','SetItem',0,'function setItemAction($uuid)','',replace('{\n        return $this->setBase("vxlan", "vxlan", $uuid);\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(132,'addItem','AddItem',0,'function addItemAction()','',replace('{\n        return $this->addBase("vxlan", "vxlan");\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(133,'getItem','GetItem',0,'function getItemAction($uuid = null)','',replace('{\n        return $this->getBase("vxlan", "vxlan", $uuid);\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(134,'delItem','DelItem',0,'function delItemAction($uuid)','',replace('{\n        return $this->delBase("vxlan", $uuid);\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(135,'reconfigure','Reconfigure',1,'function reconfigureAction()','',replace('{\n        $result = array("status" => "failed");\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $result[''status''] = strtolower(trim($backend->configdRun(''interface vxlan configure'')));\n        }\n        return $result;\n    }','\n',char(10)),24,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(136,'searchItem','SearchItem',0,'function searchItemAction()',replace('/**\n     * Search key pairs\n     * @return array\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            ''keyPairs.keyPair'',\n            [''name'', ''keyType'', ''keySize'', ''keyFingerprint'']\n        );\n    }','\n',char(10)),25,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(137,'setItem','SetItem',0,'function setItemAction($uuid = null)',replace('/**\n     * Update key pair with given properties\n     * @param $uuid\n     * @return array\n     * @throws \OPNsense\Base\UserException\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $response = $this->setBase(''keyPair'', ''keyPairs.keyPair'', $uuid);\n        if (!empty($response[''result'']) && $response[''result''] === ''saved'') {\n            touch(''/tmp/ipsec.dirty''); // mark_subsystem_dirty(''ipsec'')\n        }\n\n        return $response;\n    }','\n',char(10)),25,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(138,'addItem','AddItem',0,'function addItemAction()',replace('/**\n     * Add new key pair with given properties\n     * @return array\n     * @throws \OPNsense\Base\UserException\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $response = $this->addBase(''keyPair'', ''keyPairs.keyPair'');\n        if (!empty($response[''result'']) && $response[''result''] === ''saved'') {\n            touch(''/tmp/ipsec.dirty''); // mark_subsystem_dirty(''ipsec'')\n        }\n\n        return $response;\n    }','\n',char(10)),25,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(139,'getItem','GetItem',0,'function getItemAction($uuid = null)',replace('/**\n     * Retrieve key pair or return defaults for new one\n     * @param $uuid\n     * @return array\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->getBase(''keyPair'', ''keyPairs.keyPair'', $uuid);\n    }','\n',char(10)),25,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(140,'delItem','DelItem',0,'function delItemAction($uuid)',replace('/**\n     * Delete key pair by UUID\n     * @param $uuid\n     * @return array\n     * @throws \OPNsense\Base\UserException\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $response = $this->delBase(''keyPairs.keyPair'', $uuid);\n        if (!empty($response[''result'']) && $response[''result''] === ''deleted'') {\n            touch(''/tmp/ipsec.dirty''); // mark_subsystem_dirty(''ipsec'')\n        }\n\n        return $response;\n    }','\n',char(10)),25,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(141,'status','Status',0,'function statusAction()',replace('/**\n     * Returns the status of the legacy subsystem, which currently only includes a boolean specifying if the subsystem\n     * is marked as dirty, which means that there are pending changes.\n     * @return array\n     */','\n',char(10)),replace('{\n        return [\n            ''isDirty'' => file_exists(''/tmp/ipsec.dirty'') // is_subsystem_dirty(''ipsec'')\n        ];\n    }','\n',char(10)),26,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(142,'applyConfig','ApplyConfig',0,'function applyConfigAction()',replace('/**\n     * Apply the IPsec configuration using the legacy subsystem and return a message describing the result\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        try {\n            if (!$this->request->isPost()) {\n                throw new \Exception(gettext(''Request method not allowed, expected POST''));\n            }\n\n            $backend = new Backend();\n            $bckresult = trim($backend->configdRun(''ipsec reconfigure''));\n            if ($bckresult !== ''OK'') {\n                throw new \Exception($bckresult);\n            }\n\n            // clear_subsystem_dirty(''ipsec'')\n            if (!@unlink(''/tmp/ipsec.dirty'')) {\n                throw new \Exception(gettext(''Could not remove /tmp/ipsec.dirty to mark subsystem as clean''));\n            }\n\n            return [''message'' => gettext(''The changes have been applied successfully.'')];\n        } catch (\Exception $e) {\n            throw new \Exception(sprintf(\n                gettext(''Unable to apply IPsec subsystem configuration: %s''),\n                $e->getMessage()\n            ));\n        }\n    }','\n',char(10)),26,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(143,'configtest','Configtest',1,'function configtestAction()',replace('/**\n     * test monit configuration\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $result[''status''] = ''ok'';\n            $this->sessionClose();\n            $backend = new Backend();\n            $result[''function''] = "configtest";\n            $result[''template''] = trim($backend->configdRun(''template reload OPNsense/Monit''));\n            if ($result[''template''] != ''OK'') {\n                $result[''result''] = "Template error: " . $result[''template''];\n                return $result;\n            }\n            $result[''result''] = trim($backend->configdRun(''monit configtest''));\n            return $result;\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),28,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(144,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure monit\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $result[''function''] = "reconfigure";\n            $result[''status''] = ''failed'';\n            $backend = new Backend();\n            $status = $this->statusAction();\n            $result = $this->configtestAction();\n            if ($this->getModel()->general->enabled->__toString() == 1) {\n                if ($result[''template''] == ''OK'' && preg_match(''/^Control file syntax OK$/'', $result[''result'']) == 1) {\n                    if ($status[''status''] != ''running'') {\n                        $result[''status''] = trim($backend->configdRun(''monit start''));\n                    } else {\n                        $result[''status''] = trim($backend->configdRun(''monit reload''));\n                    }\n                } else {\n                    return $result;\n                }\n            } else {\n                if ($status[''status''] == ''running'') {\n                    $result[''status''] = trim($backend->configdRun(''monit stop''));\n                }\n            }\n            $this->getModel()->configClean();\n            return $result;\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),28,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(145,'dirty','Dirty',0,'function dirtyAction()',replace('/**\n     * check if changes to the monit settings were made\n     * @return array result\n     */','\n',char(10)),replace('{\n        $result = array(''status'' => ''ok'');\n        $result[''monit''][''dirty''] = $this->getModel()->configChanged();\n        return $result;\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(146,'getAlert','GetAlert',0,'function getAlertAction($uuid = null)',replace('/**\n     * Retrieve alert settings or return defaults\n     * @param $uuid item unique id\n     * @return array monit alert content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n         return $this->getBase("alert", "alert", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(147,'setAlert','SetAlert',0,'function setAlertAction($uuid)',replace('/**\n     * Update alert with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("alert", "alert", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(148,'addAlert','AddAlert',0,'function addAlertAction()',replace('/**\n     * Add alert with given properties\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("alert", "alert");\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(149,'delAlert','DelAlert',0,'function delAlertAction($uuid)',replace('/**\n     * Delete alert by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("alert", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(150,'searchAlert','SearchAlert',0,'function searchAlertAction()',replace('/**\n     * Search monit alerts\n     * @return array list of found alerts\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "alert",\n            array("enabled", "recipient", "noton", "events", "description"),\n            "description"\n        );\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(151,'toggleAlert','ToggleAlert',0,'function toggleAlertAction($uuid, $enabled = null)',replace('/**\n     * Toggle alert defined by uuid (enable/disable)\n     * @param $uuid alert internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("alert", $uuid, $enabled);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(152,'getService','GetService',0,'function getServiceAction($uuid = null)',replace('/**\n     * Retrieve service settings or return defaults\n     * @param $uuid item unique id\n     * @return array monit service content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n         return $this->getBase("service", "service", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(153,'setService','SetService',0,'function setServiceAction($uuid)',replace('/**\n     * Update service with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("service", "service", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(154,'addService','AddService',0,'function addServiceAction()',replace('/**\n     * Add service with given properties\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("service", "service");\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(155,'delService','DelService',0,'function delServiceAction($uuid)',replace('/**\n     * Delete service by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("service", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(156,'searchService','SearchService',0,'function searchServiceAction()',replace('/**\n     * Search monit services\n     * @return array list of found services\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase("service", array("enabled", "name", "type"), "name");\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(157,'toggleService','ToggleService',0,'function toggleServiceAction($uuid, $enabled = null)',replace('/**\n     * Toggle service defined by uuid (enable/disable)\n     * @param $uuid service internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("service", $uuid, $enabled);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(158,'getTest','GetTest',0,'function getTestAction($uuid = null)',replace('/**\n     * Retrieve test settings or return defaults\n     * @param $uuid item unique id\n     * @return array monit test content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n         return $this->getBase("test", "test", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(159,'setTest','SetTest',0,'function setTestAction($uuid)',replace('/**\n     * Update test with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("test", "test", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(160,'addTest','AddTest',0,'function addTestAction()',replace('/**\n     * Add test with given properties\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("test", "test");\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(161,'delTest','DelTest',0,'function delTestAction($uuid)',replace('/**\n     * Delete test by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("test", $uuid);\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(162,'searchTest','SearchTest',0,'function searchTestAction()',replace('/**\n     * Search monit services\n     * @return array list of found services\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase("test", array("name", "condition", "action"), "name");\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(163,'getGeneral','GetGeneral',0,'function getGeneralAction()',replace('/**\n     * Retrieve general settings\n     * @return array monit general settings content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n         return [''monit'' => $this->getModel()->general->getNodes(), ''result'' => ''ok''];\n    }','\n',char(10)),29,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(164,'get','Get',0,'function getAction($format = ''xml'')',replace('/**\n     * get monit status page\n     * see monit(1)\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n\n        $socketPath = "/var/run/monit.sock";\n\n        // map the requested html format from the status page to the Monit text format\n        $format = $format == ''html'' ? ''text'' : $format;\n\n        // check monit httpd socket defined in monitrc by ''set httpd ...''\n        if (file_exists($socketPath) && filetype($socketPath) == "socket") {\n            // set curl options\n            $ch = curl_init("http://127.0.0.1/_status?format=" . $format);\n            curl_setopt($ch, CURLOPT_UNIX_SOCKET_PATH, $socketPath);\n            curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n\n            // get credentials if configured\n            $mdlMonit = new Monit(false);\n            if (\n                $mdlMonit->general->httpdUsername->__toString() != null && trim($mdlMonit->general->httpdUsername->__toString()) !== "" &&\n                $mdlMonit->general->httpdPassword->__toString() != null && trim($mdlMonit->general->httpdPassword->__toString()) !== ""\n            ) {\n                    curl_setopt($ch, CURLOPT_USERPWD, $mdlMonit->general->httpdUsername->__toString() . ":" . $mdlMonit->general->httpdPassword->__toString());\n            }\n\n            // send request\n            if (!$response = curl_exec($ch)) {\n                $result[''status''] = curl_error($ch);\n                return $result;\n            }\n            $HTTPCode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n\n            if ($HTTPCode != 200) {\n                $result[''status''] = ''Monit returns with code '' . $HTTPCode;\n            } else {\n                $result[''result''] = "ok";\n\n                // format the response\n                if ($format == ''xml'') {\n                    $result[''status''] = simplexml_load_string($response);\n                } elseif ($format === ''text'') {\n                    $result[''status''] = ''<div class="alert"><pre>'' . $this->bashColorToCSS($response) . ''</pre></div>'';\n                }\n            }\n        } else {\n            $msg = "\nEither the file " . $socketPath . " does not exists or it is not a unix socket.\nPlease check if the Monit service is running.\n\nIf you have started Monit recently, wait for StartDelay seconds and refresh this page.";\n            if ($format == ''xml'') {\n                $result[''status''] = $msg;\n            } elseif ($format === ''text'') {\n                $result[''status''] = ''<div class="alert"><pre>'' . $msg . ''</pre></div>'';\n            }\n        }\n        return $result;\n    }','\n',char(10)),30,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(165,'providers','Providers',0,'function providersAction()',replace('/**\n     * list providers\n     * @return array list of configured openvpn providers (servers)\n     * @throws \Exception when unable to contact configd\n     */','\n',char(10)),replace('{\n        $result = array();\n        foreach ($this->openvpnServers() as $server) {\n            $vpnid = (string)$server->vpnid;\n            $result[$vpnid] = array();\n            // visible name\n            $result[$vpnid]["name"] = empty($server->description) ? "server" : (string)$server->description;\n            $result[$vpnid]["name"] .= " " . $server->protocol . ":" . $server->local_port;\n            // relevant properties\n            $result[$vpnid]["mode"] = (string)$server->mode;\n            $result[$vpnid]["vpnid"] = $vpnid;\n            $result[$vpnid] = array_merge($result[$vpnid], $this->configuredSetttings($vpnid));\n        }\n        return $result;\n    }','\n',char(10)),31,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(166,'accounts','Accounts',1,'function accountsAction($vpnid)',replace('/**\n     * list configured accounts\n     * @param string $vpnid server handle\n     * @return array list of configured accounts\n     */','\n',char(10)),replace('{\n        $result = array();\n        $server = $this->findServer($vpnid);\n        if ($server !== null) {\n            // collect certificates for this server''s ca\n            if (isset(Config::getInstance()->object()->cert)) {\n                foreach (Config::getInstance()->object()->cert as $cert) {\n                    if (isset($cert->refid) && isset($cert->caref) && (string)$server->caref == $cert->caref) {\n                        $result[(string)$cert->refid] = array(\n                            "description" => (string)$cert->descr,\n                            "users" => array()\n                        );\n                    }\n                }\n            }\n            // collect linked users\n            foreach (Config::getInstance()->object()->system->user as $user) {\n                if (isset($user->cert)) {\n                    foreach ($user->cert as $cert) {\n                        if (!empty($result[(string)$cert])) {\n                            $result[(string)$cert][''users''][] = (string)$user->name;\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * list configured export options (client types)\n     * @return array list of templates\n     */\n    public function templatesAction()\n    {\n        $result = array();\n        $factory = new ExportFactory();\n        foreach ($factory->listProviders() as $key => $provider) {\n            $result[$key] = array(\n                "name" => $provider[''handle'']->getName(),\n                "supportedOptions" => $provider[''handle'']->supportedOptions()\n            );\n        }\n\n        return $result;\n    }\n\n    /**\n     * validate user/model input for configurable options\n     * @param $vpnid server handle\n     * @return array status and validation output\n     * @throws \OPNsense\Base\ModelException\n     */\n    public function validatePresetsAction($vpnid)\n    {\n        $result = array("result" => "");\n        if ($this->request->isPost()) {\n            $result[''result''] = ''ok'';\n            $result[''changed''] = false;\n            $serverModel = $this->getModel()->getServer($vpnid);\n            foreach ($this->request->getPost(''openvpn_export'') as $key => $value) {\n                if ($serverModel->$key !== null) {\n                    $serverModel->$key = (string)$value;\n                    $result[''changed''] = $result[''changed''] ? $result[''changed''] : $serverModel->$key->isFieldChanged();\n                }\n            }\n            foreach ($this->getModel()->performValidation() as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                    $result["result"] = "failed";\n                }\n                $fieldnm = str_replace($serverModel->__reference, ''openvpn_export'', $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n        }\n        return $result;\n    }\n\n\n    /**\n     * store presets when valid and changed\n     * @param $vpnid server handle\n     * @return array status and validation output\n     * @throws \OPNsense\Base\ModelException\n     */\n    public function storePresetsAction($vpnid)\n    {\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $result = $this->validatePresetsAction($vpnid);\n            if ($result[''result''] == ''ok'' && $result[''changed'']) {\n                $this->getModel()->serializeToConfig();\n                Config::getInstance()->save();\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * download configuration\n     * @param string $vpnid server handle\n     * @param string $certref certificate to export if applicable\n     * @param null $config\n     * @return array\n     * @throws \OPNsense\Base\ModelException\n     * @throws UserException when invalid user input\n     */\n    public function downloadAction($vpnid, $certref = null)\n    {\n        $response = array("status" => "failed");\n        if ($this->request->isPost()) {\n            $server = $this->findServer($vpnid);\n            if ($server !== null) {\n                // fetch server config data\n                $config = array();\n                foreach (\n                    array(''disable'', ''description'', ''local_port'', ''protocol'', ''crypto'', ''digest'',\n                             ''tunnel_networkv6'', ''reneg-sec'', ''local_network'', ''local_networkv6'',\n                             ''tunnel_network'', ''compression'', ''passtos'', ''shared_key'', ''mode'',\n                             ''dev_mode'', ''tls'', ''client_mgmt_port'') as $field\n                ) {\n                    if (isset($server->$field) && $server->$field !== "") {\n                        $config[$field] = (string)$server->$field;\n                    } else {\n                        $config[$field] = null;\n                    }\n                }\n                // fetch associated certificate data, add to config\n                $config[''server_ca_chain''] = array();\n                $config[''server_subject_name''] = null;\n                $config[''server_cert_is_srv''] = null;\n                if (!empty($server->certref)) {\n                    if (isset(Config::getInstance()->object()->cert)) {\n                        foreach (Config::getInstance()->object()->cert as $cert) {\n                            if (isset($cert->refid) && (string)$server->certref == $cert->refid) {\n                                // extract ca_chain\n                                $item = $cert;\n                                while (($item = $this->getCA($item->caref)) != null) {\n                                    $config[''server_ca_chain''][] = base64_decode((string)$item->crt);\n                                }\n                                // certificate CN\n                                $str_crt = base64_decode((string)$cert->crt);\n                                $inf_crt = openssl_x509_parse($str_crt);\n\n                                $config[''server_subject_name''] = !empty($inf_crt[''name'']) ? $inf_crt[''name''] : null;\n                                $config[''server_subject''] = !empty($inf_crt[''subject'']) ? $inf_crt[''subject''] : null;\n                                // Is server type cert\n                                $config[''server_cert_is_srv''] = (\n                                    isset($inf_crt[''extensions''][''extendedKeyUsage'']) &&\n                                    strstr($inf_crt[''extensions''][''extendedKeyUsage''], ''TLS Web Server Authentication'') !== false &&\n                                    isset($inf_crt[''extensions''][''keyUsage'']) &&\n                                    strpos($inf_crt[''extensions''][''keyUsage''], ''Digital Signature'') !== false &&\n                                    (strpos($inf_crt[''extensions''][''keyUsage''], ''Key Encipherment'') !== false ||\n                                        strpos($inf_crt[''extensions''][''keyUsage''], ''Key Agreement'') !== false)\n                                );\n                            }\n                        }\n                    }\n                }\n                if ($certref !== null) {\n                    if (isset(Config::getInstance()->object()->cert)) {\n                        foreach (Config::getInstance()->object()->cert as $cert) {\n                            if (isset($cert->refid) && (string)$certref == $cert->refid) {\n                                // certificate CN\n                                $str_crt = base64_decode((string)$cert->crt);\n                                $inf_crt = openssl_x509_parse($str_crt);\n                                $config[''client_cn''] = $inf_crt[''subject''][''CN''];\n                                $config[''client_crt''] = base64_decode((string)$cert->crt);\n                                $config[''client_prv''] = base64_decode((string)$cert->prv);\n                                break;\n                            }\n                        }\n                    }\n                    if (empty($config[''client_cn''])) {\n                        throw new UserException("Client certificate not found", gettext("OpenVPN export"));\n                    }\n                }\n\n                // overlay (saved) user settings\n                if ($this->request->hasPost(''openvpn_export'')) {\n                    $response = $this->storePresetsAction($vpnid);\n                    // p12 password shouldn''t be saved to the config, so we need to copy the content here as\n                    // not defined in either model or configuration data.\n                    if (!empty($this->request->getPost(''openvpn_export'')[''p12_password''])) {\n                        $config[''p12_password''] = $this->request->getPost(''openvpn_export'')[''p12_password''];\n                    }\n                }\n                foreach ($this->getModel()->getServer($vpnid)->iterateItems() as $key => $value) {\n                    if ($value !== "") {\n                        $config[$key] = (string)$value;\n                    }\n                }\n                if ($response[''result''] == ''ok'') {\n                    // request config generation\n                    $factory = new ExportFactory();\n                    $provider = $factory->getProvider($config[''template'']);\n                    if ($provider !== null) {\n                        $provider->setConfig($config);\n                        $response[''filename''] = $provider->getFilename();\n                        $response[''filetype''] = $provider->getFileType();\n                        $response[''content''] = base64_encode($provider->getContent());\n                    }\n                }\n            }','\n',char(10)),31,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(167,'reset','Reset',1,'function resetAction()',replace('/**\n     * reload template only (for example PAC does not need to change squid configuration)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            return array(''status'' => $backend->configdRun(''proxy reset''));\n        } else {\n            return array(''error'' => ''This API endpoint must be called via POST'',\n                         ''status'' => ''error'');\n        }\n    }','\n',char(10)),32,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(168,'refreshTemplate','RefreshTemplate',1,'function refreshTemplateAction()',replace('/**\n     * reload template only (for example PAC does not need to change squid configuration)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            return array(''status'' => $backend->configdRun(''template reload OPNsense/Proxy''));\n        } else {\n            return array(''error'' => ''This API endpoint must be called via POST'',\n                         ''status'' => ''error'');\n        }\n    }','\n',char(10)),32,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(169,'fetchacls','Fetchacls',1,'function fetchaclsAction()',replace('/**\n     * fetch acls (download + install)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Proxy'');\n\n            // fetch files\n            $response = $backend->configdRun("proxy fetchacls");\n            return array("response" => $response,"status" => "ok");\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),32,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(170,'downloadacls','Downloadacls',1,'function downloadaclsAction()',replace('/**\n     * download (only) acls\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Proxy'');\n\n            // download files\n            $response = $backend->configdRun("proxy downloadacls");\n            return array("response" => $response,"status" => "ok");\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),32,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(171,'searchRemoteBlacklists','SearchRemoteBlacklists',0,'function searchRemoteBlacklistsAction()',replace('/**\n     *\n     * search remote blacklists\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $mdlProxy = $this->getModel();\n        $grid = new UIModelGrid($mdlProxy->forward->acl->remoteACLs->blacklists->blacklist);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "filename", "url", "description"),\n            "description"\n        );\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(172,'getRemoteBlacklist','GetRemoteBlacklist',0,'function getRemoteBlacklistAction($uuid = null)',replace('/**\n     * retrieve remote blacklist settings or return defaults\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->getBase("blacklist", "forward.acl.remoteACLs.blacklists.blacklist", $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(173,'setRemoteBlacklist','SetRemoteBlacklist',0,'function setRemoteBlacklistAction($uuid)',replace('/**\n     * update remote blacklist item\n     * @param string $uuid\n     * @return array result status\n     * @throws \Phalcon\Validation\Exception\n     */','\n',char(10)),replace('{\n        return $this->setBase(''blacklist'', ''forward.acl.remoteACLs.blacklists.blacklist'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(174,'addRemoteBlacklist','AddRemoteBlacklist',0,'function addRemoteBlacklistAction()',replace('/**\n     * add new blacklist and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        return $this->addBase(''blacklist'', ''forward.acl.remoteACLs.blacklists.blacklist'');\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(175,'delRemoteBlacklist','DelRemoteBlacklist',0,'function delRemoteBlacklistAction($uuid)',replace('/**\n     * delete blacklist by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->delBase(''forward.acl.remoteACLs.blacklists.blacklist'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(176,'toggleRemoteBlacklist','ToggleRemoteBlacklist',0,'function toggleRemoteBlacklistAction($uuid)',replace('/**\n     * toggle blacklist by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->toggleBase(''forward.acl.remoteACLs.blacklists.blacklist'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(177,'fetchRBCron','FetchRbcron',1,'function fetchRBCronAction()',replace('/**\n     * create new cron item for remote acl or return already available one\n     * @return array status action\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n\n        if ($this->request->isPost()) {\n            $mdlProxy = $this->getModel();\n            if ((string)$mdlProxy->forward->acl->remoteACLs->UpdateCron == "") {\n                $mdlCron = new Cron();\n                // update cron relation (if this doesn''t break consistency)\n                $uuid = $mdlCron->newDailyJob("Proxy", "proxy fetchacls", "fetch proxy acls", "1");\n                $mdlProxy->forward->acl->remoteACLs->UpdateCron = $uuid;\n\n                if ($mdlCron->performValidation()->count() == 0) {\n                    $mdlCron->serializeToConfig();\n                    // save data to config, do not validate because the current in memory model doesn''t know about the\n                    // cron item just created.\n                    $mdlProxy->serializeToConfig($validateFullModel = false, $disable_validation = true);\n                    Config::getInstance()->save();\n                    $result[''result''] = "new";\n                    $result[''uuid''] = $uuid;\n                } else {\n                    $result[''result''] = "unable to add cron";\n                }\n            } else {\n                $result[''result''] = "existing";\n                $result[''uuid''] = (string)$mdlProxy->forward->acl->remoteACLs->UpdateCron;\n            }\n        }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(178,'searchPACRule','SearchPacrule',0,'function searchPACRuleAction()',replace('/**\n     *\n     * search PAC Rule\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return $this->searchBase(''pac.rule'', array("enabled", "description", "proxies", "matches"), "description");\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(179,'getPACRule','GetPacrule',0,'function getPACRuleAction($uuid = null)',replace('/**\n     * retrieve PAC Rule or return defaults\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return array("pac" => $this->getBase(''rule'', ''pac.rule'', $uuid));\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(180,'addPACRule','AddPacrule',0,'function addPACRuleAction()',replace('/**\n     * add new PAC Rule and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->addBase(''rule'', ''pac.rule'');\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(181,'setPACRule','SetPacrule',0,'function setPACRuleAction($uuid)',replace('/**\n     * update PAC Rule\n     * @param string $uuid\n     * @return array result status\n     * @throws \Phalcon\Validation\Exception\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->setBase(''rule'', ''pac.rule'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(182,'togglePACRule','TogglePacrule',0,'function togglePACRuleAction($uuid)',replace('/**\n     * toggle PAC Rule by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->toggleBase(''pac.rule'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(183,'delPACRule','DelPacrule',0,'function delPACRuleAction($uuid)',replace('/**\n     * delete PAC Rule by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->delBase(''pac.rule'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(184,'searchPACProxy','SearchPacproxy',0,'function searchPACProxyAction()',replace('/**\n     *\n     * search PAC Proxy\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return $this->searchBase(''pac.proxy'', array("enabled","proxy_type", "name", "url", "description"), "description");\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(185,'getPACProxy','GetPacproxy',0,'function getPACProxyAction($uuid = null)',replace('/**\n     * retrieve PAC Proxy or return defaults\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return array("pac" => $this->getBase(''proxy'', ''pac.proxy'', $uuid));\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(186,'addPACProxy','AddPacproxy',0,'function addPACProxyAction()',replace('/**\n     * add new PAC Proxy and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->addBase(''proxy'', ''pac.proxy'');\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(187,'setPACProxy','SetPacproxy',0,'function setPACProxyAction($uuid)',replace('/**\n     * update PAC Proxy\n     * @param string $uuid\n     * @return array result status\n     * @throws \Phalcon\Validation\Exception\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->setBase(''proxy'', ''pac.proxy'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(188,'delPACProxy','DelPacproxy',0,'function delPACProxyAction($uuid)',replace('/**\n     * delete PAC Proxy by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->delBase(''pac.proxy'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(189,'searchPACMatch','SearchPacmatch',0,'function searchPACMatchAction()',replace('/**\n     * search PAC Match\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return $this->searchBase(''pac.match'', array("enabled", "name", "description", "negate", "match_type"), "name");\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(190,'getPACMatch','GetPacmatch',0,'function getPACMatchAction($uuid = null)',replace('/**\n     * retrieve PAC Match or return defaults\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        return array("pac" => $this->getBase(''match'', ''pac.match'', $uuid));\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(191,'addPACMatch','AddPacmatch',0,'function addPACMatchAction()',replace('/**\n     * add new PAC Proxy and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->addBase(''match'', ''pac.match'');\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(192,'setPACMatch','SetPacmatch',0,'function setPACMatchAction($uuid)',replace('/**\n     * update PAC Rule\n     * @param string $uuid\n     * @return array result status\n     * @throws \Phalcon\Validation\Exception\n     */','\n',char(10)),replace('{\n        $this->pac_set_helper();\n        return $this->setBase(''match'', ''pac.match'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(193,'delPACMatch','DelPacmatch',0,'function delPACMatchAction($uuid)',replace('/**\n     * delete PAC Match by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        return $this->delBase(''pac.match'', $uuid);\n    }','\n',char(10)),33,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(194,'set','Set',1,'function setAction()',replace('/**\n     * save template\n     * @return array status\n     * @throws \Phalcon\Validation\Exception on validation issues\n     * @throws \ReflectionException when binding to the model class fails\n     * @throws UserException when denied write access\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost() && $this->request->hasPost("content")) {\n            $this->sessionClose();\n            $mdl = $this->getModel();\n            $mdl->error_pages->template = $this->request->getPost("content", "striptags");\n            $result = $this->validate();\n            if (empty($result[''validations''])) {\n                // save config if validated correctly\n                $this->save();\n                $result = array("result" => "saved");\n            } else {\n                $result["result"] = "failed";\n            }\n            return $result;\n        } else {\n            return array("result" => "failed");\n        }\n    }','\n',char(10)),34,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(195,'reset','Reset',1,'function resetAction()',replace('/**\n     * reset error_pages template\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $mdl = $this->getModel();\n            $mdl->error_pages->template = null;\n            $this->save();\n            return array("result" => "saved");\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),34,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(196,'get','Get',0,'function getAction()',replace('/**\n     * retrieve error pages template, overlay provided template zip file on top of OPNsense error pages\n     * using configd calls\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $backend->configdRun("template reload OPNsense/Proxy");\n        $result = json_decode($backend->configdRun("proxy download_error_pages"), true);\n        if ($result != null) {\n            $this->response->setRawHeader("Content-Type: application/octet-stream");\n            $this->response->setRawHeader("Content-Disposition: attachment; filename=proxy_template.zip");\n            return base64_decode($result[''payload'']);\n        } else {\n            // return empty response on error\n            return "";\n        }\n    }','\n',char(10)),34,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(197,'status','Status',0,'function statusAction()','',replace('{\n        $result = ["items" => [], "status" => "failed"];\n        $backend = new Backend();\n        $gw_status = json_decode($backend->configdRun(''interface gateways status''), true);\n\n        if (!empty($gw_status)) {\n            $result[''items''] = $gw_status;\n            $result[''status''] = "ok";\n        }\n\n        return $result;\n    }','\n',char(10)),35,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(198,'searchroute','Searchroute',0,'function searchrouteAction()',replace('/**\n     * search routes\n     * @return array search results\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "route",\n            array(''disabled'', ''network'', ''gateway'', ''descr''),\n            "description"\n        );\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(199,'setroute','Setroute',0,'function setrouteAction($uuid)',replace('/**\n     * Update route with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("route", "route", $uuid);\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(200,'addroute','Addroute',0,'function addrouteAction()',replace('/**\n     * Add new route and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        return $this->addBase("route", "route");\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(201,'getroute','Getroute',0,'function getrouteAction($uuid = null)',replace('/**\n     * Retrieve route settings or return defaults for new one\n     * @param $uuid item unique id\n     * @return array route content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("route", "route", $uuid);\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(202,'toggleroute','Toggleroute',1,'function togglerouteAction($uuid, $disabled = null)',replace('/**\n     * toggle, we can not use our default action here since enabled/disabled are swapped\n     * @param string $uuid id to toggled\n     * @param string|null $disabled set disabled by default\n     * @return array status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $uuid != null) {\n            $node = $this->getModel()->getNodeByReference(''route.'' . $uuid);\n            if ($node != null) {\n                if ($disabled == ''0'' || $disabled == ''1'') {\n                    $node->disabled = (string)$disabled;\n                } elseif ((string)$node->disabled == ''1'') {\n                    $node->disabled = ''0'';\n                } else {\n                    $node->disabled = ''1'';\n                }\n                $result[''result''] = (string)$node->disabled == ''1'' ? ''Disabled'' : ''Enabled'';\n                $this->save();\n            }\n        }\n        return $result;\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(203,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure routes\n     * @return array reconfigure status\n     * @throws \Exception when unable to execute configd command\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            $bckresult = trim($backend->configdRun(''interface routes configure''));\n            if ($bckresult == ''OK'') {\n                $status = ''ok'';\n            } else {\n                $status = "error reloading routes ($bckresult)";\n            }\n\n            return array(''status'' => $status);\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),36,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(204,'stats','Stats',0,'function statsAction()',replace('/**\n     * fetch syslog-ng statistics\n     * @return array of stat records\n     */','\n',char(10)),replace('{\012        $this->sessionClose();\012        // transform stats data to recordset\012        $destinations = array();\012        foreach ($this->getModel()->destinations->destination->iterateItems() as $destid => $dest) {\012            $destinations["d_" . str_replace(''-'', '''', (string)$destid)] = array(\012                "uuid" => $destid,\012                "description" => (string)$dest->description\012            );\012        }\012        $stats = trim((new Backend())->configdRun(''syslog stats''));\012        $fieldnames = array();\012        $records = array();\012        foreach (explode("\n", $stats) as $line) {\012            $parts = explode(";", $line);\012            if (empty($fieldnames)) {\012                foreach ($parts as $item) {\012                    $fieldnames[] = $item;\012                }\012            } else {\012                $record = array(''Description'' => '''');\012                for ($i = 0; $i < count($fieldnames); $i++) {\012                    $record[$fieldnames[$i]] = $parts[$i];\012                }\012                if (!empty($record[''SourceId''])) {\012                    $id = explode(''#'', $record[''SourceId''])[0];\012                    if (!empty($destinations[$id])) {\012                        $record[''Description''] = $destinations[$id][''description''];\012                    }\012                }\012                $records[md5($line)] = $record;\012            }\012        }\012\012        // handle query if specified\012        $itemsPerPage = intval($this->request->getPost(''rowCount'', ''int'', 9999));\012        $currentPage = intval($this->request->getPost(''current'', ''int'', 1));\012        $offset = ($currentPage - 1) * $itemsPerPage;\012        $entry_keys = array_keys($records);\012        if ($this->request->hasPost(''searchPhrase'') && $this->request->getPost(''searchPhrase'') !== '''') {\012            $searchPhrase = $this->request->getPost(''searchPhrase'');\012            $entry_keys = array_filter($entry_keys, function ($key) use ($searchPhrase, $records) {\012                foreach ($records[$key] as $itemval) {\012                    if (strpos($itemval, $searchPhrase)) {\012                        return true;\012                    }\012                }\012                return false;\012            });\012        }\012        $formatted = array_map(function ($value) use (&$records) {\012            $item = [''#'' => $value];\012            foreach ($records[$value] as $ekey => $evalue) {\012                $item[$ekey] = $evalue;\012            }\012            return $item;\012        }, array_slice($entry_keys, $offset, $itemsPerPage));\012\012        if ($this->request->hasPost(''sort'') && is_array($this->request->getPost(''sort''))) {\012            $keys = array_keys($this->request->getPost(''sort''));\012            $order = $this->request->getPost(''sort'')[$keys[0]];\012            $keys = array_column($formatted, $keys[0]);\012            array_multisort($keys, $order == ''asc'' ? SORT_ASC : SORT_DESC, $formatted);\012        }\012\012        return [\012           ''total'' => count($entry_keys),\012           ''rowCount'' => $itemsPerPage,\012           ''current'' => $currentPage,\012           ''rows'' => $formatted,\012        ];\012    }','\012',char(10)),37,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(205,'searchDestinations','SearchDestinations',0,'function searchDestinationsAction()',replace('/**\n     * Search syslog destinations\n     * @return array list of found rules\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "destinations.destination",\n            array("enabled", "description", "transport", "program", "level", "facility", "hostname", "port"),\n            "description"\n        );\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(206,'getDestination','GetDestination',0,'function getDestinationAction($uuid = null)',replace('/**\n     * Retrieve destination settings or return defaults for a new one\n     * @param $uuid item unique id\n     * @return array destination content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("destination", "destinations.destination", $uuid);\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(207,'setDestination','SetDestination',0,'function setDestinationAction($uuid)',replace('/**\n     * Update destination with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("destination", "destinations.destination", $uuid);\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(208,'addDestination','AddDestination',0,'function addDestinationAction()',replace('/**\n     * Add new destination and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     */','\n',char(10)),replace('{\n        return $this->addBase(''destination'', ''destinations.destination'');\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(209,'delDestination','DelDestination',0,'function delDestinationAction($uuid)',replace('/**\n     * Delete destination by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("destinations.destination", $uuid);\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(210,'toggleDestination','ToggleDestination',0,'function toggleDestinationAction($uuid, $enabled = null)',replace('/**\n     * Toggle destination defined by uuid (enable/disable)\n     * @param $uuid user defined rule internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("destinations.destination", $uuid, $enabled);\n    }','\n',char(10)),38,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(211,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure ipfw, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            $backend->configdRun(''template reload OPNsense/IPFW'');\n            $bckresult = trim($backend->configdRun("ipfw reload"));\n            if ($bckresult == "OK") {\n                $status = "ok";\n            } else {\n                $status = "error reloading shaper (" . $bckresult . ")";\n            }\n\n            return array("status" => $status);\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),39,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(212,'flushreload','Flushreload',1,'function flushreloadAction()',replace('/**\n     * flush all ipfw rules\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $backend = new Backend();\n            $status = trim($backend->configdRun("ipfw flush"));\n            $status = trim($backend->configdRun("ipfw reload"));\n            return array("status" => $status);\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),39,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(213,'statistics','Statistics',0,'function statisticsAction()',replace('/**\n     * fetch current statistics\n     */','\n',char(10)),replace('{\n        $result = array("status" => "failed");\n        if ($this->request->isGet()) {\n            // close session for long running action\n            $this->sessionClose();\n            $ipfwstats = json_decode((new Backend())->configdRun("ipfw stats"), true);\n            if ($ipfwstats != null) {\n                // ipfw stats are stuctured as they would be using the various ipfw commands, let''s reformat\n                // into something easier to handle from the UI and attach model data.\n                $result[''status''] = "ok";\n                $result[''items''] = array();\n                $pipenrs = array();\n                if (!empty($ipfwstats[''pipes''])) {\n                    $shaperModel = new TrafficShaper();\n\n                    // link pipe and queue descriptions and sort\n                    foreach ([''pipes'', ''queues''] as $objectType) {\n                        if ($objectType == ''pipes'') {\n                            $root = $shaperModel->pipes->pipe;\n                        } else {\n                            $root = $shaperModel->queues->queue;\n                        }\n                        $idfield = $objectType == ''queues'' ? "flow_set_nr" : "pipe";\n                        foreach ($ipfwstats[$objectType] as &$ipfwObject) {\n                            $ipfwObject[''description''] = "";\n                            foreach ($root->iterateItems() as $node) {\n                                if ((string)$node->number == $ipfwObject[$idfield]) {\n                                      $ipfwObject[''description''] = (string)$node->description;\n                                      $ipfwObject[''uuid''] = (string)$node->getAttribute(''uuid'');\n                                      break;\n                                }\n                            }\n                        }\n                        uasort($ipfwstats[$objectType], function ($item1, $item2) {\n                            return $item1[''description''] <=> $item2[''description''];\n                        });\n                    }\n\n                    foreach ($ipfwstats[''pipes''] as $pipeid => &$pipe) {\n                        $pipenrs[] = $pipeid;\n                        $item = $pipe;\n                        $item[''type''] = "pipe";\n                        $item[''id''] = $pipeid;\n                        // move flows to "template" queue\n                        $item[''flows''] = [];\n                        $result[''items''][] = $item;\n                        if (!empty($pipe[''flowset''])) {\n                            // template queues seem to be automatically attached to pipes\n                            $item = $pipe[''flowset''];\n                            $item[''type''] = "queue";\n                            $item[''template''] = true;\n                            $item[''pipe''] = $pipeid;\n                            $item[''id''] = $pipeid . "." . $item[''flow_set_nr''];\n                            $item[''flows''] = $pipe[''flows''];\n                            $result[''items''][] = $item;\n                        }\n                        foreach ($ipfwstats[''queues''] as $queueid => $queue) {\n                            if ($queue[''sched_nr''] == $pipeid) {\n                                // XXX: sched_nr seems to be the linking pin to pipe\n                                $item = $queue;\n                                $item[''type''] = "queue";\n                                $item[''id''] = $pipeid . "." . $queueid;\n                                $result[''items''][] = $item;\n                            }\n                        }\n                    }\n                    // XXX: If not directly connected, we better still list the queues so we know what we miss.\n                    //      current assumption is this doesn''t happen on our setups, should be removed in the future\n                    $stray_queues = false;\n                    foreach ($ipfwstats[''queues''] as $queueid => $queue) {\n                        if (!in_array($queue[''sched_nr''], $pipenrs)) {\n                            if (!$stray_queues) {\n                                $result[''items''][] = [\n                                    "type" => "unknown",\n                                    "id" => "XXXXX"\n                                ];\n                                $stray_queues = true;\n                            }\n                            $item = $queue;\n                            $item[''type''] = "queue";\n                            $item[''id''] = "XXXXX." . $queueid;\n                            $result[''items''][] = $item;\n                        }\n                    }\n                    // link rules (with statistics)\n                    foreach ($result[''items''] as &$item) {\n                        $item[''rules''] = [];\n                        if ($item[''type''] == ''pipe'') {\n                            continue;\n                        }\n                        $idfield = empty($item[''template'']) ? "flow_set_nr" : "pipe";\n                        $rule_type = empty($item[''template'']) ? "queues" : "pipes";\n                        if (!empty($ipfwstats[''rules''][$rule_type])) {\n                            foreach ($ipfwstats[''rules''][$rule_type] as $rule) {\n                                if ($item[$idfield] == $rule[''attached_to'']) {\n                                    $rule[''description''] = "";\n                                    if ($rule[''rule_uuid''] != null) {\n                                        $node = $shaperModel->getNodeByReference("rules.rule.{$rule[''rule_uuid'']}");\n                                        if ($node != null) {\n                                            $rule[''description''] = (string)$node->description;\n                                        }\n                                    }\n                                    $item[''rules''][] = $rule;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }','\n',char(10)),39,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(214,'getPipe','GetPipe',0,'function getPipeAction($uuid = null)',replace('/**\n     * Retrieve pipe settings or return defaults\n     * @param $uuid item unique id\n     * @return array traffic shaper pipe content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("pipe", "pipes.pipe", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(215,'setPipe','SetPipe',0,'function setPipeAction($uuid)',replace('/**\n     * Update  pipe with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("pipe", "pipes.pipe", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(216,'addPipe','AddPipe',0,'function addPipeAction()',replace('/**\n     * Add new pipe and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     */','\n',char(10)),replace('{\n        return $this->addBase("pipe", "pipes.pipe", [\n            "origin" => "TrafficShaper",\n            "number" => (new TrafficShaper())->newPipeNumber()\n        ]);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(217,'delPipe','DelPipe',0,'function delPipeAction($uuid)',replace('/**\n     * Delete pipe by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("pipes.pipe", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(218,'togglePipe','TogglePipe',0,'function togglePipeAction($uuid, $enabled = null)',replace('/**\n     * Toggle pipe defined by uuid (enable/disable)\n     * @param $uuid user defined rule internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("pipes.pipe", $uuid, $enabled);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(219,'searchPipes','SearchPipes',0,'function searchPipesAction()',replace('/**\n     * Search traffic shaper pipes\n     * @return array list of found pipes\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "pipes.pipe",\n            array("enabled","number", "bandwidth","bandwidthMetric","description","mask","origin"),\n            "number"\n        );\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(220,'searchQueues','SearchQueues',0,'function searchQueuesAction()',replace('/**\n     * Search traffic shaper queues\n     * @return array list of found queues\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "queues.queue",\n            array("enabled","number", "pipe","weight","description","mask","origin"),\n            "number"\n        );\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(221,'getQueue','GetQueue',0,'function getQueueAction($uuid = null)',replace('/**\n     * Retrieve queue settings or return defaults\n     * @param $uuid item unique id\n     * @return array traffic shaper queue content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->getBase("queue", "queues.queue", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(222,'setQueue','SetQueue',0,'function setQueueAction($uuid)',replace('/**\n     * Update queue with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("queue", "queues.queue", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(223,'addQueue','AddQueue',0,'function addQueueAction()',replace('/**\n     * Add new queue and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->addBase("queue", "queues.queue", [\n            "origin" => "TrafficShaper",\n            "number" => (new TrafficShaper())->newQueueNumber()\n        ]);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(224,'delQueue','DelQueue',0,'function delQueueAction($uuid)',replace('/**\n     * Delete queue by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("queues.queue", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(225,'toggleQueue','ToggleQueue',0,'function toggleQueueAction($uuid, $enabled = null)',replace('/**\n     * Toggle queue defined by uuid (enable/disable)\n     * @param $uuid user defined rule internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("queues.queue", $uuid, $enabled);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(226,'searchRules','SearchRules',0,'function searchRulesAction()',replace('/**\n     * Search traffic shaper rules\n     * @return array list of found rules\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->searchBase(\n            "rules.rule",\n            array("enabled", "interface", "proto", "source_not","source", "destination_not",\n                  "destination", "description", "origin", "sequence", "target"),\n            "sequence"\n        );\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(227,'getRule','GetRule',0,'function getRuleAction($uuid = null)',replace('/**\n     * Retrieve rule settings or return defaults for new rule\n     * @param $uuid item unique id\n     * @return array traffic shaper rule content\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        $fetchmode = $this->request->has("fetchmode") ? $this->request->get("fetchmode") : null;\n        $result = $this->getBase("rule", "rules.rule", $uuid);\n        if ($uuid === null || $fetchmode == ''copy'') {\n            $result["rule"]["sequence"] = (string)((new TrafficShaper())->getMaxRuleSequence() + 1);\n        }\n        return $result;\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(228,'setRule','SetRule',0,'function setRuleAction($uuid)',replace('/**\n     * Update rule with given properties\n     * @param string $uuid internal id\n     * @return array save result + validation output\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->setBase("rule", "rules.rule", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(229,'addRule','AddRule',0,'function addRuleAction()',replace('/**\n     * Add new rule and set with attributes from post\n     * @return array save result + validation output\n     * @throws \OPNsense\Base\ModelException when not bound to model\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     */','\n',char(10)),replace('{\n        return $this->addBase(''rule'', ''rules.rule'', [ "origin" => "TrafficShaper"]);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(230,'delRule','DelRule',0,'function delRuleAction($uuid)',replace('/**\n     * Delete rule by uuid\n     * @param string $uuid internal id\n     * @return array save status\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return  $this->delBase("rules.rule", $uuid);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(231,'toggleRule','ToggleRule',0,'function toggleRuleAction($uuid, $enabled = null)',replace('/**\n     * Toggle rule defined by uuid (enable/disable)\n     * @param $uuid user defined rule internal id\n     * @param $enabled desired state enabled(1)/disabled(1), leave empty for toggle\n     * @return array save result\n     * @throws \Phalcon\Validation\Exception when field validations fail\n     * @throws \ReflectionException when not bound to model\n     */','\n',char(10)),replace('{\n        return $this->toggleBase("rules.rule", $uuid, $enabled);\n    }','\n',char(10)),40,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(232,'stats','Stats',0,'function statsAction()',replace('/**\n     * reconfigure return the stats\n     */','\n',char(10)),replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode($backend->configdRun(''unbound stats''), true);\n        if ($result != null) {\n            $ret[''status''] = "ok";\n            $ret[''data''] = $result;\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(233,'dumpcache','Dumpcache',0,'function dumpcacheAction()',replace('/**\n     * return the entries of the cache\n     */','\n',char(10)),replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode(trim($backend->configdRun("unbound dumpcache")), true);\n        if ($result !== null) {\n            $ret[''data''] = $result;\n            $ret[''status''] = ''ok'';\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(234,'dumpinfra','Dumpinfra',0,'function dumpinfraAction()','',replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode(trim($backend->configdRun("unbound dumpinfra")), true);\n        if ($result !== null) {\n            $ret[''data''] = $result;\n            $ret[''status''] = ''ok'';\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(235,'listlocaldata','Listlocaldata',0,'function listlocaldataAction()','',replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode(trim($backend->configdRun("unbound listlocaldata")), true);\n        if ($result !== null) {\n            $ret[''data''] = $result;\n            $ret[''status''] = ''ok'';\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(236,'listlocalzones','Listlocalzones',0,'function listlocalzonesAction()','',replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode(trim($backend->configdRun("unbound listlocalzones")), true);\n        if ($result !== null) {\n            $ret[''data''] = $result;\n            $ret[''status''] = ''ok'';\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(237,'listinsecure','Listinsecure',0,'function listinsecureAction()','',replace('{\n        $ret[''status''] = "failed";\n        $backend = new Backend();\n        $result = json_decode(trim($backend->configdRun("unbound listinsecure")), true);\n        if ($result !== null) {\n            $ret[''data''] = $result;\n            $ret[''status''] = ''ok'';\n        }\n        return $ret;\n    }','\n',char(10)),41,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(238,'dnsbl','Dnsbl',0,'function dnsblAction()','',replace('{\n        $this->sessionClose();\n        $mdl = new Dnsbl();\n        $backend = new Backend();\n        $backend->configdRun(''template reload OPNsense/Unbound'');\n        $response = $backend->configdpRun(''unbound dnsbl'', array((string)$mdl->type));\n        return array("status" => $response);\n    }','\n',char(10)),44,1,0,NULL,NULL,NULL,NULL,'20.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(239,'set','Set',0,'function setAction()','',replace('{\n        $backend = new Backend();\n\n      // if no socket file exist, we know that the service is not running\n        if (!file_exists("/var/run/iperf-manager.sock")) {\n            $backend->configdRun(''iperf start'');\n        }\n        if (!isset($_POST[''instance''][''interface''])) {\n            return array(''status'' => ''error'',\n                    ''error'' => ''interface parameter is missing'');\n        }\n        $interface_name = $_POST[''instance''][''interface''];\n        if ($interface = $this->get_real_interface_name($interface_name)) {\n            // start iperf\n            return $this->send_command("start $interface", $backend);\n        } else {\n            return array(''status'' => ''error'',\n                      ''error'' => ''interface is unknown'');\n        }\n    }','\n',char(10)),45,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(240,'query','Query',0,'function queryAction()','',replace('{\n        $backend = new Backend();\n        return $this->send_command(''query'', $backend);\n    }','\n',char(10)),45,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(241,'status','Status',0,'function statusAction()','',replace('{\n        $backend = new Backend();\n        $result = array(''result'' => ''failed'');\n        $res = $backend->configdRun(''iperf status'');\n        if (stripos($res, ''is running'')) {\n            $result[''result''] = ''running'';\n        } else {\n            $result[''result''] = ''stopped'';\n        }\n        return $result;\n    }','\n',char(10)),46,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(242,'start','Start',0,'function startAction()','',replace('{\n        $backend = new Backend();\n        $result = array(''result'' => $backend->configdRun(''iperf start''));\n        return $result;\n    }','\n',char(10)),46,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(243,'stop','Stop',0,'function stopAction()','',replace('{\n        $backend = new Backend();\n        $result = array("result" => $backend->configdRun(''iperf stop''));\n        return $result;\n    }','\n',char(10)),46,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(244,'restart','Restart',0,'function restartAction()','',replace('{\n        $this->stopAction();\n        return $this->startAction();\n    }','\n',char(10)),46,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(245,'resetdb','Resetdb',0,'function resetdbAction()',replace('/**\n     * remove database folder\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("redis resetdb");\n        return array("response" => $response);\n    }','\n',char(10)),47,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(246,'searchItem','SearchItem',0,'function searchItemAction()','',replace('{\n        return $this->searchBase("addresses.address", array(''enabled'', ''email''), "email");\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(247,'setItem','SetItem',0,'function setItemAction($uuid)','',replace('{\n        return $this->setBase("address", "addresses.address", $uuid);\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(248,'addItem','AddItem',0,'function addItemAction()','',replace('{\n        return $this->addBase("address", "addresses.address");\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(249,'getItem','GetItem',0,'function getItemAction($uuid = null)','',replace('{\n        return $this->getBase("address", "addresses.address", $uuid);\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(250,'delItem','DelItem',0,'function delItemAction($uuid)','',replace('{\n        return $this->delBase("addresses.address", $uuid);\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(251,'toggleItem','ToggleItem',0,'function toggleItemAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase("addresses.address", $uuid, $enabled);\n    }','\n',char(10)),49,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(252,'reload','Reload',1,'function reloadAction()',replace('/**\n     * reconfigure HelloWorld\n     */','\n',char(10)),replace('{\n        $status = "failed";\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $bckresult = trim($backend->configdRun(''template reload OPNsense/HelloWorld''));\n            if ($bckresult == "OK") {\n                $status = "ok";\n            }\n        }\n        return array("status" => $status);\n    }','\n',char(10)),50,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(253,'test','Test',1,'function testAction()',replace('/**\n     * test HelloWorld\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $bckresult = json_decode(trim($backend->configdRun("helloworld test")), true);\n            if ($bckresult !== null) {\n                // only return valid json type responses\n                return $bckresult;\n            }\n        }\n        return array("message" => "unable to run config action");\n    }','\n',char(10)),50,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(254,'get','Get',0,'function getAction()',replace('/**\n     * retrieve HelloWorld general settings\n     * @return array general settings\n     * @throws \OPNsense\Base\ModelException\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlHelloWorld = new HelloWorld();\n            $result[''helloworld''] = $mdlHelloWorld->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),51,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(255,'set','Set',1,'function setAction()',replace('/**\n     * update HelloWorld settings\n     * @return array status\n     * @throws \OPNsense\Base\ModelException\n     * @throws \ReflectionException\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlHelloWorld = new HelloWorld();\n            $mdlHelloWorld->setNodes($this->request->getPost("helloworld"));\n\n            // perform validation\n            $valMsgs = $mdlHelloWorld->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["helloworld." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlHelloWorld->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),51,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(256,'searchAcl','SearchAcl',0,'function searchAclAction()','',replace('{\n        return $this->searchBase(''acls.acl'', array("enabled", "name", "networks"));\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(257,'getAcl','GetAcl',0,'function getAclAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''acl'', ''acls.acl'', $uuid);\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(258,'addAcl','AddAcl',0,'function addAclAction()','',replace('{\n        return $this->addBase(''acl'', ''acls.acl'');\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(259,'delAcl','DelAcl',0,'function delAclAction($uuid)','',replace('{\n        return $this->delBase(''acls.acl'', $uuid);\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(260,'setAcl','SetAcl',0,'function setAclAction($uuid)','',replace('{\n        return $this->setBase(''acl'', ''acls.acl'', $uuid);\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(261,'toggleAcl','ToggleAcl',0,'function toggleAclAction($uuid)','',replace('{\n        return $this->toggleBase(''acls.acl'', $uuid);\n    }','\n',char(10)),53,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(262,'searchDomain','SearchDomain',0,'function searchDomainAction()','',replace('{\n        return $this->searchBase(''domains.domain'', array(\n            "enabled", "type", "masterip", "domainname", "allowtransfer", "allowquery", "ttl",\n            "refresh", "retry", "expire", "negative", "mailadmin", "dnsserver"\n        ));\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(263,'getDomain','GetDomain',0,'function getDomainAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''domain'', ''domains.domain'', $uuid);\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(264,'addDomain','AddDomain',0,'function addDomainAction($uuid = null)','',replace('{\n        return $this->addBase(''domain'', ''domains.domain'');\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(265,'delDomain','DelDomain',0,'function delDomainAction($uuid)','',replace('{\n        return $this->delBase(''domains.domain'', $uuid);\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(266,'setDomain','SetDomain',0,'function setDomainAction($uuid = null)','',replace('{\n        return $this->setBase(''domain'', ''domains.domain'', $uuid);\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(267,'toggleDomain','ToggleDomain',0,'function toggleDomainAction($uuid)','',replace('{\n        return $this->toggleBase(''domains.domain'', $uuid);\n    }','\n',char(10)),55,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(268,'searchRecord','SearchRecord',0,'function searchRecordAction()','',replace('{\n        $domain = $this->request->get(''domain'');\n        $filter_funct = null;\n        if (!empty($domain)) {\n            $filter_funct = function ($record) use ($domain) {\n                return $record->domain == $domain;\n            };\n        }\n\n        return $this->searchBase(\n            ''records.record'',\n            array("enabled", "domain", "name", "type", "value"),\n            null,\n            $filter_funct\n        );\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(269,'getRecord','GetRecord',0,'function getRecordAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        $domain = $this->request->get(''domain'');\n        $result = $this->getBase(''record'', ''records.record'', $uuid);\n        if ($uuid == null && !empty($result[''record''][''domain''])) {\n            // set domain selection\n            foreach ($result[''record''][''domain''] as $key => &$value) {\n                if ($key == $domain) {\n                    $value[''selected''] = 1;\n                } else {\n                    $value[''selected''] = 0;\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(270,'addRecord','AddRecord',0,'function addRecordAction()','',replace('{\n        $result = $this->addBase(''record'', ''records.record'');\n        if (!empty($result[''uuid''])) {\n            $this->setDomainSerial($result[''uuid'']);\n        }\n        return $result;\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(271,'delRecord','DelRecord',0,'function delRecordAction($uuid)','',replace('{\n        $result =  $this->delBase(''records.record'', $uuid);\n        if ($result[''result''] == ''deleted'') {\n            $this->setDomainSerial($uuid);\n        }\n        return $result;\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(272,'setRecord','SetRecord',0,'function setRecordAction($uuid = null)','',replace('{\n        $result =  $this->setBase(''record'', ''records.record'', $uuid);\n        if ($result[''result''] == ''saved'') {\n            $this->setDomainSerial($uuid);\n        }\n        return $result;\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(273,'toggleRecord','ToggleRecord',0,'function toggleRecordAction($uuid)','',replace('{\n        $result =  $this->toggleBase(''records.record'', $uuid);\n        if (!empty($result[''changed''])) {\n            $this->setDomainSerial($uuid);\n        }\n        return $result;\n    }','\n',char(10)),57,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(274,'dnsbl','Dnsbl',0,'function dnsblAction()','',replace('{\n        $this->sessionClose();\n        $mdl = new Dnsbl();\n        $backend = new Backend();\n        $response = $backend->configdpRun(''bind dnsbl'', array((string)$mdl->type));\n        return array("response" => $response);\n    }','\n',char(10)),58,1,0,NULL,NULL,NULL,NULL,'1.13',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(275,'searchCloak','SearchCloak',0,'function searchCloakAction()','',replace('{\n        return $this->searchBase(''cloaks.cloak'', array("enabled", "name", "destination"));\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(276,'getCloak','GetCloak',0,'function getCloakAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''cloak'', ''cloaks.cloak'', $uuid);\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(277,'addCloak','AddCloak',0,'function addCloakAction()','',replace('{\n        return $this->addBase(''cloak'', ''cloaks.cloak'');\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(278,'delCloak','DelCloak',0,'function delCloakAction($uuid)','',replace('{\n        return $this->delBase(''cloaks.cloak'', $uuid);\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(279,'setCloak','SetCloak',0,'function setCloakAction($uuid)','',replace('{\n        return $this->setBase(''cloak'', ''cloaks.cloak'', $uuid);\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(280,'toggleCloak','ToggleCloak',0,'function toggleCloakAction($uuid)','',replace('{\n        return $this->toggleBase(''cloaks.cloak'', $uuid);\n    }','\n',char(10)),59,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(281,'searchForward','SearchForward',0,'function searchForwardAction()','',replace('{\n        return $this->searchBase(''forwards.forward'', array("enabled", "domain", "dnsserver"));\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(282,'getForward','GetForward',0,'function getForwardAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''forward'', ''forwards.forward'', $uuid);\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(283,'addForward','AddForward',0,'function addForwardAction()','',replace('{\n        return $this->addBase(''forward'', ''forwards.forward'');\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(284,'delForward','DelForward',0,'function delForwardAction($uuid)','',replace('{\n        return $this->delBase(''forwards.forward'', $uuid);\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(285,'setForward','SetForward',0,'function setForwardAction($uuid)','',replace('{\n        return $this->setBase(''forward'', ''forwards.forward'', $uuid);\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(286,'toggleForward','ToggleForward',0,'function toggleForwardAction($uuid)','',replace('{\n        return $this->toggleBase(''forwards.forward'', $uuid);\n    }','\n',char(10)),61,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(287,'searchServer','SearchServer',0,'function searchServerAction()','',replace('{\n        return $this->searchBase(''servers.server'', array("enabled", "name", "stamp"));\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(288,'getServer','GetServer',0,'function getServerAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''server'', ''servers.server'', $uuid);\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(289,'addServer','AddServer',0,'function addServerAction()','',replace('{\n        return $this->addBase(''server'', ''servers.server'');\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(290,'delServer','DelServer',0,'function delServerAction($uuid)','',replace('{\n        return $this->delBase(''servers.server'', $uuid);\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(291,'setServer','SetServer',0,'function setServerAction($uuid)','',replace('{\n        return $this->setBase(''server'', ''servers.server'', $uuid);\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(292,'toggleServer','ToggleServer',0,'function toggleServerAction($uuid)','',replace('{\n        return $this->toggleBase(''servers.server'', $uuid);\n    }','\n',char(10)),63,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(293,'dnsbl','Dnsbl',0,'function dnsblAction()','',replace('{\n        $this->sessionClose();\n        $mdl = new Dnsbl();\n        $backend = new Backend();\n        $response = $backend->configdpRun(''dnscryptproxy dnsbl'', array((string)$mdl->type));\n        return array("response" => $response);\n    }','\n',char(10)),64,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(294,'searchWhitelist','SearchWhitelist',0,'function searchWhitelistAction()','',replace('{\n        return $this->searchBase(''whitelists.whitelist'', array("enabled", "name", "description"));\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(295,'getWhitelist','GetWhitelist',0,'function getWhitelistAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''whitelist'', ''whitelists.whitelist'', $uuid);\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(296,'addWhitelist','AddWhitelist',0,'function addWhitelistAction()','',replace('{\n        return $this->addBase(''whitelist'', ''whitelists.whitelist'');\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(297,'delWhitelist','DelWhitelist',0,'function delWhitelistAction($uuid)','',replace('{\n        return $this->delBase(''whitelists.whitelist'', $uuid);\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(298,'setWhitelist','SetWhitelist',0,'function setWhitelistAction($uuid)','',replace('{\n        return $this->setBase(''whitelist'', ''whitelists.whitelist'', $uuid);\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(299,'toggleWhitelist','ToggleWhitelist',0,'function toggleWhitelistAction($uuid)','',replace('{\n        return $this->toggleBase(''whitelists.whitelist'', $uuid);\n    }','\n',char(10)),65,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(300,'searchAddress','SearchAddress',0,'function searchAddressAction()','',replace('{\n        return $this->searchBase(''addresses.address'', array("enabled", "from", "to"));\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(301,'getAddress','GetAddress',0,'function getAddressAction($uuid = null)','',replace('{\n        return $this->getBase(''address'', ''addresses.address'', $uuid);\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(302,'addAddress','AddAddress',0,'function addAddressAction()','',replace('{\n        return $this->addBase(''address'', ''addresses.address'');\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(303,'delAddress','DelAddress',0,'function delAddressAction($uuid)','',replace('{\n        return $this->delBase(''addresses.address'', $uuid);\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(304,'setAddress','SetAddress',0,'function setAddressAction($uuid)','',replace('{\n        return $this->setBase(''address'', ''addresses.address'', $uuid);\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(305,'toggleAddress','ToggleAddress',0,'function toggleAddressAction($uuid)','',replace('{\n        return $this->toggleBase(''addresses.address'', $uuid);\n    }','\n',char(10)),66,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(306,'searchDomain','SearchDomain',0,'function searchDomainAction()','',replace('{\n        return $this->searchBase(''domains.domain'', array("enabled", "domainname", "destination"));\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(307,'getDomain','GetDomain',0,'function getDomainAction($uuid = null)','',replace('{\n        return $this->getBase(''domain'', ''domains.domain'', $uuid);\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(308,'addDomain','AddDomain',0,'function addDomainAction()','',replace('{\n        return $this->addBase(''domain'', ''domains.domain'');\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(309,'delDomain','DelDomain',0,'function delDomainAction($uuid)','',replace('{\n        return $this->delBase(''domains.domain'', $uuid);\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(310,'setDomain','SetDomain',0,'function setDomainAction($uuid)','',replace('{\n        return $this->setBase(''domain'', ''domains.domain'', $uuid);\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(311,'toggleDomain','ToggleDomain',0,'function toggleDomainAction($uuid)','',replace('{\n        return $this->toggleBase(''domains.domain'', $uuid);\n    }','\n',char(10)),68,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(312,'searchRecipientbcc','SearchRecipientbcc',0,'function searchRecipientbccAction()','',replace('{\n        return $this->searchBase(''recipientbccs.recipientbcc'', array("enabled", "from", "to"));\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(313,'getRecipientbcc','GetRecipientbcc',0,'function getRecipientbccAction($uuid = null)','',replace('{\n        return $this->getBase(''recipientbcc'', ''recipientbccs.recipientbcc'', $uuid);\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(314,'addRecipientbcc','AddRecipientbcc',0,'function addRecipientbccAction()','',replace('{\n        return $this->addBase(''recipientbcc'', ''recipientbccs.recipientbcc'');\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(315,'delRecipientbcc','DelRecipientbcc',0,'function delRecipientbccAction($uuid)','',replace('{\n        return $this->delBase(''recipientbccs.recipientbcc'', $uuid);\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(316,'setRecipientbcc','SetRecipientbcc',0,'function setRecipientbccAction($uuid)','',replace('{\n        return $this->setBase(''recipientbcc'', ''recipientbccs.recipientbcc'', $uuid);\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(317,'toggleRecipientbcc','ToggleRecipientbcc',0,'function toggleRecipientbccAction($uuid)','',replace('{\n        return $this->toggleBase(''recipientbccs.recipientbcc'', $uuid);\n    }','\n',char(10)),70,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(318,'searchRecipient','SearchRecipient',0,'function searchRecipientAction()','',replace('{\n        return $this->searchBase(''recipients.recipient'', array("enabled", "address", "action"));\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(319,'getRecipient','GetRecipient',0,'function getRecipientAction($uuid = null)','',replace('{\n        return $this->getBase(''recipient'', ''recipients.recipient'', $uuid);\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(320,'addRecipient','AddRecipient',0,'function addRecipientAction()','',replace('{\n        return $this->addBase(''recipient'', ''recipients.recipient'');\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(321,'delRecipient','DelRecipient',0,'function delRecipientAction($uuid)','',replace('{\n        return $this->delBase(''recipients.recipient'', $uuid);\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(322,'setRecipient','SetRecipient',0,'function setRecipientAction($uuid)','',replace('{\n        return $this->setBase(''recipient'', ''recipients.recipient'', $uuid);\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(323,'toggleRecipient','ToggleRecipient',0,'function toggleRecipientAction($uuid)','',replace('{\n        return $this->toggleBase(''recipients.recipient'', $uuid);\n    }','\n',char(10)),71,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(324,'searchSenderbcc','SearchSenderbcc',0,'function searchSenderbccAction()','',replace('{\n        return $this->searchBase(''senderbccs.senderbcc'', array("enabled", "from", "to"));\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(325,'getSenderbcc','GetSenderbcc',0,'function getSenderbccAction($uuid = null)','',replace('{\n        return $this->getBase(''senderbcc'', ''senderbccs.senderbcc'', $uuid);\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(326,'addSenderbcc','AddSenderbcc',0,'function addSenderbccAction()','',replace('{\n        return $this->addBase(''senderbcc'', ''senderbccs.senderbcc'');\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(327,'delSenderbcc','DelSenderbcc',0,'function delSenderbccAction($uuid)','',replace('{\n        return $this->delBase(''senderbccs.senderbcc'', $uuid);\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(328,'setSenderbcc','SetSenderbcc',0,'function setSenderbccAction($uuid)','',replace('{\n        return $this->setBase(''senderbcc'', ''senderbccs.senderbcc'', $uuid);\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(329,'toggleSenderbcc','ToggleSenderbcc',0,'function toggleSenderbccAction($uuid)','',replace('{\n        return $this->toggleBase(''senderbccs.senderbcc'', $uuid);\n    }','\n',char(10)),72,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(330,'searchSendercanonical','SearchSendercanonical',0,'function searchSendercanonicalAction()','',replace('{\n        return $this->searchBase(''sendercanonicals.sendercanonical'', array("enabled", "from", "to"));\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(331,'getSendercanonical','GetSendercanonical',0,'function getSendercanonicalAction($uuid = null)','',replace('{\n        return $this->getBase(''sendercanonical'', ''sendercanonicals.sendercanonical'', $uuid);\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(332,'addSendercanonical','AddSendercanonical',0,'function addSendercanonicalAction()','',replace('{\n        return $this->addBase(''sendercanonical'', ''sendercanonicals.sendercanonical'');\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(333,'delSendercanonical','DelSendercanonical',0,'function delSendercanonicalAction($uuid)','',replace('{\n        return $this->delBase(''sendercanonicals.sendercanonical'', $uuid);\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(334,'setSendercanonical','SetSendercanonical',0,'function setSendercanonicalAction($uuid)','',replace('{\n        return $this->setBase(''sendercanonical'', ''sendercanonicals.sendercanonical'', $uuid);\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(335,'toggleSendercanonical','ToggleSendercanonical',0,'function toggleSendercanonicalAction($uuid)','',replace('{\n        return $this->toggleBase(''sendercanonicals.sendercanonical'', $uuid);\n    }','\n',char(10)),73,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(336,'searchSender','SearchSender',0,'function searchSenderAction()','',replace('{\n        return $this->searchBase(''senders.sender'', array("enabled", "address", "action"));\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(337,'getSender','GetSender',0,'function getSenderAction($uuid = null)','',replace('{\n        return $this->getBase(''sender'', ''senders.sender'', $uuid);\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(338,'addSender','AddSender',0,'function addSenderAction()','',replace('{\n        return $this->addBase(''sender'', ''senders.sender'');\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(339,'delSender','DelSender',0,'function delSenderAction($uuid)','',replace('{\n        return $this->delBase(''senders.sender'', $uuid);\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(340,'setSender','SetSender',0,'function setSenderAction($uuid)','',replace('{\n        return $this->setBase(''sender'', ''senders.sender'', $uuid);\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(341,'toggleSender','ToggleSender',0,'function toggleSenderAction($uuid)','',replace('{\n        return $this->toggleBase(''senders.sender'', $uuid);\n    }','\n',char(10)),74,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(342,'checkrspamd','Checkrspamd',0,'function checkrspamdAction()',replace('/**\n     * check rspamd\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("firmware plugin rspamd");\n        return $response;\n    }','\n',char(10)),75,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(343,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure postfix, generate config and reload\n     *\n     * XXX overwrites the base one for make-transport\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop postfix if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Postfix'');\n            $backend->configdRun(''postfix make-transport'');\n\n            // (res)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),75,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(344,'apply','Apply',1,'function applyAction($rollback_revision = null)','',replace('{\n        if ($this->request->isPost()) {\n            if ($rollback_revision != null) {\n                // background rollback timer\n                (new Backend())->configdpRun(''pfplugin rollback_timer'', [$rollback_revision], true);\n            }\n            return array("status" => (new Backend())->configdRun(''filter reload''));\n        } else {\n            return array("status" => "error");\n        }\n    }','\n',char(10)),80,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(345,'cancelRollback','CancelRollback',1,'function cancelRollbackAction($rollback_revision)','',replace('{\n        if ($this->request->isPost()) {\n            return array(\n                "status" => (new Backend())->configdpRun(''pfplugin cancel_rollback'', [$rollback_revision])\n            );\n        } else {\n            return array("status" => "error");\n        }\n    }','\n',char(10)),80,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(346,'savepoint','Savepoint',1,'function savepointAction()','',replace('{\n        if ($this->request->isPost()) {\n            // trigger a save, so we know revision->time matches our running config\n            Config::getInstance()->save();\n            return array(\n                "status" => "ok",\n                "retention" => (string)Config::getInstance()->backupCount(),\n                "revision" => (string)Config::getInstance()->object()->revision->time\n            );\n        } else {\n            return array("status" => "error");\n        }\n    }','\n',char(10)),80,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(347,'revert','Revert',1,'function revertAction($revision)','',replace('{\n        if ($this->request->isPost()) {\n            Config::getInstance()->lock();\n            $filename = Config::getInstance()->getBackupFilename($revision);\n            if (!$filename) {\n                Config::getInstance()->unlock();\n                return ["status" => gettext("unknown (or removed) savepoint")];\n            }\n            $this->getModel()->rollback($revision);\n            Config::getInstance()->unlock();\n            (new Backend())->configdRun(''filter reload'');\n            return ["status" => "ok"];\n        } else {\n            return array("status" => "error");\n        }\n    }','\n',char(10)),80,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(348,'searchRule','SearchRule',0,'function searchRuleAction()','',replace('{\n        return $this->searchBase("rules.rule", array(''enabled'', ''sequence'', ''description''), "sequence");\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(349,'setRule','SetRule',0,'function setRuleAction($uuid)','',replace('{\n        return $this->setBase("rule", "rules.rule", $uuid);\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(350,'addRule','AddRule',0,'function addRuleAction()','',replace('{\n        return $this->addBase("rule", "rules.rule");\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(351,'getRule','GetRule',0,'function getRuleAction($uuid = null)','',replace('{\n        return $this->getBase("rule", "rules.rule", $uuid);\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(352,'delRule','DelRule',0,'function delRuleAction($uuid)','',replace('{\n        return $this->delBase("rules.rule", $uuid);\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(353,'toggleRule','ToggleRule',0,'function toggleRuleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase("rules.rule", $uuid, $enabled);\n    }','\n',char(10)),81,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(354,'searchRule','SearchRule',0,'function searchRuleAction()','',replace('{\n        return $this->searchBase("snatrules.rule", array(''enabled'', ''sequence'', ''description''), "sequence");\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(355,'setRule','SetRule',0,'function setRuleAction($uuid)','',replace('{\n        return $this->setBase("rule", "snatrules.rule", $uuid);\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(356,'addRule','AddRule',0,'function addRuleAction()','',replace('{\n        return $this->addBase("rule", "snatrules.rule");\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(357,'getRule','GetRule',0,'function getRuleAction($uuid = null)','',replace('{\n        return $this->getBase("rule", "snatrules.rule", $uuid);\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(358,'delRule','DelRule',0,'function delRuleAction($uuid)','',replace('{\n        return $this->delBase("snatrules.rule", $uuid);\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(359,'toggleRule','ToggleRule',0,'function toggleRuleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase("snatrules.rule", $uuid, $enabled);\n    }','\n',char(10)),82,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(360,'searchAvpair','SearchAvpair',0,'function searchAvpairAction()','',replace('{\n        return $this->searchBase(''avpairs.avpair'', array("enabled", "name", "operator", "value"));\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(361,'getAvpair','GetAvpair',0,'function getAvpairAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''avpair'', ''avpairs.avpair'', $uuid);\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(362,'addAvpair','AddAvpair',0,'function addAvpairAction()','',replace('{\n        return $this->addBase(''avpair'', ''avpairs.avpair'');\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(363,'delAvpair','DelAvpair',0,'function delAvpairAction($uuid)','',replace('{\n        return $this->delBase(''avpairs.avpair'', $uuid);\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(364,'setAvpair','SetAvpair',0,'function setAvpairAction($uuid)','',replace('{\n        return $this->setBase(''avpair'', ''avpairs.avpair'', $uuid);\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(365,'toggleAvpair','ToggleAvpair',0,'function toggleAvpairAction($uuid)','',replace('{\n        return $this->toggleBase(''avpairs.avpair'', $uuid);\n    }','\n',char(10)),83,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(366,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlClient = new Client();\n            $result[''client''] = $mdlClient->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(367,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlClient = new Client();\n            $mdlClient->setNodes($this->request->getPost("client"));\n            // perform validation\n            $valMsgs = $mdlClient->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["client." . $msg->getField()] = $msg->getMessage();\n            }\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlClient->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(368,'searchClient','SearchClient',0,'function searchClientAction()','',replace('{\n        $this->sessionClose();\n        $mdlClient = $this->getModel();\n        $grid = new UIModelGrid($mdlClient->clients->client);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "name", "secret", "ip" )\n        );\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(369,'getClient','GetClient',0,'function getClientAction($uuid = null)','',replace('{\n        $mdlClient = $this->getModel();\n        if ($uuid != null) {\n            $node = $mdlClient->getNodeByReference(''clients.client.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("client" => $node->getNodes());\n            }\n        } else {\n            $node = $mdlClient->clients->client->add();\n            return array("client" => $node->getNodes());\n        }\n        return array();\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(370,'addClient','AddClient',1,'function addClientAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("client")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlClient = $this->getModel();\n            $node = $mdlClient->clients->client->Add();\n            $node->setNodes($this->request->getPost("client"));\n            $valMsgs = $mdlClient->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "client", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n            if (count($result[''validations'']) == 0) {\n                unset($result[''validations'']);\n                // save config if validated correctly\n                $mdlClient->serializeToConfig();\n                Config::getInstance()->save();\n                unset($result[''validations'']);\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(371,'delClient','DelClient',1,'function delClientAction($uuid)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlClient = $this->getModel();\n            if ($uuid != null) {\n                if ($mdlClient->clients->client->del($uuid)) {\n                    $mdlClient->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result[''result''] = ''deleted'';\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(372,'setClient','SetClient',1,'function setClientAction($uuid)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("client")) {\n            $mdlSetting = $this->getModel();\n            if ($uuid != null) {\n                $node = $mdlSetting->getNodeByReference(''clients.client.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $clientInfo = $this->request->getPost("client");\n                    $node->setNodes($clientInfo);\n                    $valMsgs = $mdlSetting->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "client", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n                    if (count($result[''validations'']) == 0) {\n                        // save config if validated correctly\n                        $mdlSetting->serializeToConfig();\n                        Config::getInstance()->save();\n                        $result = array("result" => "saved");\n                    }\n                    return $result;\n                }\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(373,'toggleClient','ToggleClient',0,'function toggleClientAction($uuid)','',replace('{\n        return $this->toggle_handler($uuid, ''clients'', ''client'');\n    }','\n',char(10)),84,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(374,'searchDhcp','SearchDhcp',0,'function searchDhcpAction()','',replace('{\n        return $this->searchBase(''dhcps.dhcp'', array("enabled", "dns", "netmask", "gatewayip"));\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(375,'getDhcp','GetDhcp',0,'function getDhcpAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''dhcp'', ''dhcps.dhcp'', $uuid);\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(376,'addDhcp','AddDhcp',0,'function addDhcpAction()','',replace('{\n        return $this->addBase(''dhcp'', ''dhcps.dhcp'');\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(377,'delDhcp','DelDhcp',0,'function delDhcpAction($uuid)','',replace('{\n        return $this->delBase(''dhcps.dhcp'', $uuid);\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(378,'setDhcp','SetDhcp',0,'function setDhcpAction($uuid)','',replace('{\n        return $this->setBase(''dhcp'', ''dhcps.dhcp'', $uuid);\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(379,'toggleDhcp','ToggleDhcp',0,'function toggleDhcpAction($uuid)','',replace('{\n        return $this->toggleBase(''dhcps.dhcp'', $uuid);\n    }','\n',char(10)),85,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(380,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlEAP = new EAP();\n            $result[''eap''] = $mdlEAP->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),86,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(381,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlEAP = new EAP();\n            $mdlEAP->setNodes($this->request->getPost("eap"));\n\n            // perform validation\n            $valMsgs = $mdlEAP->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["eap." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlEAP->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),86,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(382,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlGeneral = new General();\n            $result[''general''] = $mdlGeneral->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),87,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(383,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlGeneral = new General();\n            $mdlGeneral->setNodes($this->request->getPost("general"));\n\n            // perform validation\n            $valMsgs = $mdlGeneral->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["general." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlGeneral->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),87,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(384,'searchLease','SearchLease',0,'function searchLeaseAction()','',replace('{\n        return $this->searchBase(''leases.lease'', array("enabled", "mac", "ip"));\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(385,'getLease','GetLease',0,'function getLeaseAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''lease'', ''leases.lease'', $uuid);\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(386,'addLease','AddLease',0,'function addLeaseAction()','',replace('{\n        return $this->addBase(''lease'', ''leases.lease'');\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(387,'delLease','DelLease',0,'function delLeaseAction($uuid)','',replace('{\n        return $this->delBase(''leases.lease'', $uuid);\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(388,'setLease','SetLease',0,'function setLeaseAction($uuid)','',replace('{\n        return $this->setBase(''lease'', ''leases.lease'', $uuid);\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(389,'toggleLease','ToggleLease',0,'function toggleLeaseAction($uuid)','',replace('{\n        return $this->toggleBase(''leases.lease'', $uuid);\n    }','\n',char(10)),89,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(390,'start','Start',1,'function startAction()',replace('/**\n     * start freeradius service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''freeradius start'');\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),90,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(391,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop freeradius service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun("freeradius stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),90,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(392,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart freeradius service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun("freeradius restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),90,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(393,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of freeradius\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("freeradius status");\n\n        if (strpos($response, "not running") > 0) {\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif ($mdlGeneral->enabled->__toString() == 0) {\n            $status = "disabled";\n        } else {\n            $status = "unkown";\n        }\n\n\n        return array("status" => $status);\n    }','\n',char(10)),90,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(394,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure freeradius, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop freeradius if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Freeradius'');\n\n            // (res)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),90,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(395,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlUser = new User();\n            $result[''user''] = $mdlUser->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(396,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlUser = new User();\n            $mdlUser->setNodes($this->request->getPost("user"));\n            // perform validation\n            $valMsgs = $mdlUser->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["user." . $msg->getField()] = $msg->getMessage();\n            }\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlUser->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(397,'searchUser','SearchUser',0,'function searchUserAction()','',replace('{\n        $this->sessionClose();\n        $mdlUser = $this->getModel();\n        $grid = new UIModelGrid($mdlUser->users->user);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "username", "password", "description", "ip", "subnet", "vlan" )\n        );\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(398,'getUser','GetUser',0,'function getUserAction($uuid = null)','',replace('{\n        $mdlUser = $this->getModel();\n        if ($uuid != null) {\n            $node = $mdlUser->getNodeByReference(''users.user.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("user" => $node->getNodes());\n            }\n        } else {\n            $node = $mdlUser->users->user->add();\n            return array("user" => $node->getNodes());\n        }\n        return array();\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(399,'addUser','AddUser',1,'function addUserAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("user")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlUser = $this->getModel();\n            $node = $mdlUser->users->user->Add();\n            $node->setNodes($this->request->getPost("user"));\n            $valMsgs = $mdlUser->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "user", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n            if (count($result[''validations'']) == 0) {\n                unset($result[''validations'']);\n                // save config if validated correctly\n                $mdlUser->serializeToConfig();\n                Config::getInstance()->save();\n                unset($result[''validations'']);\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(400,'delUser','DelUser',1,'function delUserAction($uuid)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlUser = $this->getModel();\n            if ($uuid != null) {\n                if ($mdlUser->users->user->del($uuid)) {\n                    $mdlUser->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result[''result''] = ''deleted'';\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(401,'setUser','SetUser',1,'function setUserAction($uuid)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("user")) {\n            $mdlSetting = $this->getModel();\n            if ($uuid != null) {\n                $node = $mdlSetting->getNodeByReference(''users.user.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $userInfo = $this->request->getPost("user");\n                    $node->setNodes($userInfo);\n                    $valMsgs = $mdlSetting->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "user", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n                    if (count($result[''validations'']) == 0) {\n                        // save config if validated correctly\n                        $mdlSetting->serializeToConfig();\n                        Config::getInstance()->save();\n                        $result = array("result" => "saved");\n                    }\n                    return $result;\n                }\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(402,'toggleUser','ToggleUser',0,'function toggleUserAction($uuid)','',replace('{\n        return $this->toggle_handler($uuid, ''users'', ''user'');\n    }','\n',char(10)),91,1,0,NULL,NULL,NULL,NULL,'1.9.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(403,'searchNeighbor','SearchNeighbor',0,'function searchNeighborAction()','',replace('{\n        return $this->searchBase(\n            ''neighbors.neighbor'',\n            array("enabled",\n                  "address",\n                  "remoteas",\n                  "updatesource",\n                  "nexthopself",\n                  "multihop",\n                  "defaultoriginate",\n                  "linkedPrefixlistIn",\n                  "linkedPrefixlistOut",\n                  "linkedRoutemapIn",\n                  "linkedRoutemapOut")\n        );\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(404,'getNeighbor','GetNeighbor',0,'function getNeighborAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''neighbor'', ''neighbors.neighbor'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(405,'addNeighbor','AddNeighbor',0,'function addNeighborAction()','',replace('{\n        return $this->addBase(''neighbor'', ''neighbors.neighbor'');\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(406,'delNeighbor','DelNeighbor',0,'function delNeighborAction($uuid)','',replace('{\n        return $this->delBase(''neighbors.neighbor'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(407,'setNeighbor','SetNeighbor',0,'function setNeighborAction($uuid)','',replace('{\n        return $this->setBase(''neighbor'', ''neighbors.neighbor'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(408,'searchAspath','SearchAspath',0,'function searchAspathAction()','',replace('{\n        return $this->searchBase(\n            ''aspaths.aspath'',\n            array("enabled", "number", "action", "as" )\n        );\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(409,'getAspath','GetAspath',0,'function getAspathAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''aspath'', ''aspaths.aspath'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(410,'addAspath','AddAspath',0,'function addAspathAction()','',replace('{\n        return $this->addBase(''aspath'', ''aspaths.aspath'');\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(411,'delAspath','DelAspath',0,'function delAspathAction($uuid)','',replace('{\n        return $this->delBase(''aspaths.aspath'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(412,'setAspath','SetAspath',0,'function setAspathAction($uuid)','',replace('{\n        return $this->setBase(''aspath'', ''aspaths.aspath'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(413,'searchPrefixlist','SearchPrefixlist',0,'function searchPrefixlistAction()','',replace('{\n        return $this->searchBase(\n            ''prefixlists.prefixlist'',\n            array("enabled", "name", "seqnumber", "action", "network" )\n        );\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(414,'getPrefixlist','GetPrefixlist',0,'function getPrefixlistAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''prefixlist'', ''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(415,'addPrefixlist','AddPrefixlist',0,'function addPrefixlistAction()','',replace('{\n        return $this->addBase(''prefixlist'', ''prefixlists.prefixlist'');\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(416,'delPrefixlist','DelPrefixlist',0,'function delPrefixlistAction($uuid)','',replace('{\n        return $this->delBase(''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(417,'setPrefixlist','SetPrefixlist',0,'function setPrefixlistAction($uuid)','',replace('{\n        return $this->setBase(''prefixlist'', ''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(418,'searchRoutemap','SearchRoutemap',0,'function searchRoutemapAction()','',replace('{\n        return $this->searchBase(\n            ''routemaps.routemap'',\n            array("enabled", "name", "action", "id", "match", "match2", "set")\n        );\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(419,'getRoutemap','GetRoutemap',0,'function getRoutemapAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''routemap'', ''routemaps.routemap'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(420,'addRoutemap','AddRoutemap',0,'function addRoutemapAction()','',replace('{\n        return $this->addBase(''routemap'', ''routemaps.routemap'');\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(421,'delRoutemap','DelRoutemap',0,'function delRoutemapAction($uuid)','',replace('{\n        return $this->delBase(''routemaps.routemap'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(422,'setRoutemap','SetRoutemap',0,'function setRoutemapAction($uuid)','',replace('{\n        return $this->setBase(''routemap'', ''routemaps.routemap'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(423,'toggleNeighbor','ToggleNeighbor',0,'function toggleNeighborAction($uuid)','',replace('{\n        return $this->toggleBase(''neighbors.neighbor'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(424,'toggleAspath','ToggleAspath',0,'function toggleAspathAction($uuid)','',replace('{\n        return $this->toggleBase(''aspaths.aspath'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(425,'togglePrefixlist','TogglePrefixlist',0,'function togglePrefixlistAction($uuid)','',replace('{\n        return $this->toggleBase(''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(426,'toggleRoutemap','ToggleRoutemap',0,'function toggleRoutemapAction($uuid)','',replace('{\n        return $this->toggleBase(''routemaps.routemap'', $uuid);\n    }','\n',char(10)),92,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(427,'showipbgp','Showipbgp',0,'function showipbgpAction()',replace('/**\n     * show ip bgp\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = json_decode(trim($backend->configdRun("quagga diag-bgp2")));\n        return array("response" => $response);\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(428,'showipbgpsummary','Showipbgpsummary',0,'function showipbgpsummaryAction()',replace('/**\n     * show ip bgp summary\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("quagga diag-bgp summary");\n        return array("response" => $response);\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(429,'showrunningconfig','Showrunningconfig',0,'function showrunningconfigAction()','',replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("quagga general-runningconfig");\n        return array("response" => $response);\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(430,'ospfoverview','Ospfoverview',0,'function ospfoverviewAction()','',replace('{\n        return $this->get_ospf_information(''overview'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(431,'ospfneighbor','Ospfneighbor',0,'function ospfneighborAction()','',replace('{\n        return $this->get_ospf_information(''neighbor'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(432,'ospfroute','Ospfroute',0,'function ospfrouteAction()','',replace('{\n        return $this->get_ospf_information(''route'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(433,'ospfdatabase','Ospfdatabase',0,'function ospfdatabaseAction()','',replace('{\n        return $this->get_ospf_information(''database'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(434,'ospfinterface','Ospfinterface',0,'function ospfinterfaceAction()','',replace('{\n        return $this->get_ospf_information(''interface'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(435,'ospfv3overview','Ospfv3overview',0,'function ospfv3overviewAction()','',replace('{\n        return $this->get_ospf3_information(''overview'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(436,'ospfv3neighbor','Ospfv3neighbor',0,'function ospfv3neighborAction()','',replace('{\n        return $this->get_ospf3_information(''neighbor'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(437,'ospfv3route','Ospfv3route',0,'function ospfv3routeAction()','',replace('{\n        return $this->get_ospf3_information(''route'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(438,'ospfv3database','Ospfv3database',0,'function ospfv3databaseAction()','',replace('{\n        return $this->get_ospf3_information(''database'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(439,'ospfv3interface','Ospfv3interface',0,'function ospfv3interfaceAction()','',replace('{\n        return $this->get_ospf3_information(''interface'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(440,'generalroutes','Generalroutes',0,'function generalroutesAction()','',replace('{\n        return $this->get_general_information(''routes'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(441,'log','Log',0,'function logAction()','',replace('{\n        return $this->get_general_information(''log'')[''response''][''general_log''];\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(442,'generalroutes6','Generalroutes6',0,'function generalroutes6Action()','',replace('{\n        return $this->get_general_information(''routes6'');\n    }','\n',char(10)),93,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(443,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlGeneral = new General();\n            $result[''general''] = $mdlGeneral->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),94,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(444,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlGeneral = new General();\n            $mdlGeneral->setNodes($this->request->getPost("general"));\n\n            // perform validation\n            $valMsgs = $mdlGeneral->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["general." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlGeneral->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),94,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(445,'searchInterface','SearchInterface',0,'function searchInterfaceAction()','',replace('{\n        return $this->searchBase(''interfaces.interface'', array("enabled", "interfacename", "area", "networktype"));\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(446,'getInterface','GetInterface',0,'function getInterfaceAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''interface'', ''interfaces.interface'', $uuid);\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(447,'addInterface','AddInterface',0,'function addInterfaceAction()','',replace('{\n        return $this->addBase(''interface'', ''interfaces.interface'');\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(448,'delInterface','DelInterface',0,'function delInterfaceAction($uuid)','',replace('{\n        return $this->delBase(''interfaces.interface'', $uuid);\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(449,'setInterface','SetInterface',0,'function setInterfaceAction($uuid)','',replace('{\n        return $this->setBase(''interface'', ''interfaces.interface'', $uuid);\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(450,'toggleInterface','ToggleInterface',0,'function toggleInterfaceAction($uuid)','',replace('{\n        return $this->toggleBase(''interfaces.interface'', $uuid);\n    }','\n',char(10)),95,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(451,'searchNetwork','SearchNetwork',0,'function searchNetworkAction()','',replace('{\n        return $this->searchBase(''networks.network'', array("enabled", "ipaddr", "netmask", "area"));\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(452,'searchInterface','SearchInterface',0,'function searchInterfaceAction()','',replace('{\n        return $this->searchBase(''interfaces.interface'', array("enabled", "interfacename", "networktype", "authtype", "area"));\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(453,'searchPrefixlist','SearchPrefixlist',0,'function searchPrefixlistAction()','',replace('{\n        return $this->searchBase(''prefixlists.prefixlist'', array("enabled", "name", "seqnumber", "action", "network" ));\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(454,'searchRoutemap','SearchRoutemap',0,'function searchRoutemapAction()','',replace('{\n        return $this->searchBase(''routemaps.routemap'', array("enabled", "name", "action", "id", "match2", "set"));\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(455,'getNetwork','GetNetwork',0,'function getNetworkAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''network'', ''networks.network'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(456,'getInterface','GetInterface',0,'function getInterfaceAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''interface'', ''interfaces.interface'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(457,'getPrefixlist','GetPrefixlist',0,'function getPrefixlistAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''prefixlist'', ''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(458,'getRoutemap','GetRoutemap',0,'function getRoutemapAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''routemap'', ''routemaps.routemap'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(459,'addNetwork','AddNetwork',0,'function addNetworkAction()','',replace('{\n        return $this->addBase(''network'', ''networks.network'');\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(460,'addInterface','AddInterface',0,'function addInterfaceAction()','',replace('{\n        return $this->addBase(''interface'', ''interfaces.interface'');\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(461,'addPrefixlist','AddPrefixlist',0,'function addPrefixlistAction()','',replace('{\n        return $this->addBase(''prefixlist'', ''prefixlists.prefixlist'');\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(462,'addRoutemap','AddRoutemap',0,'function addRoutemapAction()','',replace('{\n        return $this->addBase(''routemap'', ''routemaps.routemap'');\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(463,'delNetwork','DelNetwork',0,'function delNetworkAction($uuid)','',replace('{\n        return $this->delBase(''networks.network'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(464,'delInterface','DelInterface',0,'function delInterfaceAction($uuid)','',replace('{\n        return $this->delBase(''interfaces.interface'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(465,'delPrefixlist','DelPrefixlist',0,'function delPrefixlistAction($uuid)','',replace('{\n        return $this->delBase(''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(466,'delRoutemap','DelRoutemap',0,'function delRoutemapAction($uuid)','',replace('{\n        return $this->delBase(''routemaps.routemap'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(467,'setNetwork','SetNetwork',0,'function setNetworkAction($uuid)','',replace('{\n        return $this->setBase(''network'', ''networks.network'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(468,'setInterface','SetInterface',0,'function setInterfaceAction($uuid)','',replace('{\n        return $this->setBase(''interface'', ''interfaces.interface'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(469,'setPrefixlist','SetPrefixlist',0,'function setPrefixlistAction($uuid)','',replace('{\n        return $this->setBase(''prefixlist'', ''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(470,'setRoutemap','SetRoutemap',0,'function setRoutemapAction($uuid)','',replace('{\n        return $this->setBase(''routemap'', ''routemaps.routemap'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(471,'toggleNetwork','ToggleNetwork',0,'function toggleNetworkAction($uuid)','',replace('{\n        return $this->toggleBase(''networks.network'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(472,'toggleInterface','ToggleInterface',0,'function toggleInterfaceAction($uuid)','',replace('{\n        return $this->toggleBase(''interfaces.interface'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(473,'togglePrefixlist','TogglePrefixlist',0,'function togglePrefixlistAction($uuid)','',replace('{\n        return $this->toggleBase(''prefixlists.prefixlist'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(474,'toggleRoutemap','ToggleRoutemap',0,'function toggleRoutemapAction($uuid)','',replace('{\n        return $this->toggleBase(''routemaps.routemap'', $uuid);\n    }','\n',char(10)),96,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(475,'start','Start',1,'function startAction()',replace('/**\n     * start quagga service and reload filter rules to pass OSPF\n     * before the bogon filter kills the routing protocol packets\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''quagga start'');\n            $backend->configdRun(''filter reload'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),98,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(476,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop quagga service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''quagga stop'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),98,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(477,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart quagga service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''quagga restart'');\n            $backend->configdRun(''filter reload'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),98,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(478,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of quagga\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun(''quagga status'');\n\n        if (strpos($response, ''not running'') > 0) {\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $status = ''stopped'';\n            } else {\n                $status = ''disabled'';\n            }\n        } elseif (strpos($response, ''is running'') > 0) {\n            $status = ''running'';\n        } elseif ($mdlGeneral->enabled->__toString() == 0) {\n            $status = ''disabled'';\n        } else {\n            $status = ''unknown'';\n        }\n\n\n        return array(''status'' => $status);\n    }','\n',char(10)),98,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(479,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure quagga, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop quagga if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Quagga'');\n\n            // (res)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array(''status'' => ''ok'');\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),98,1,0,NULL,NULL,NULL,NULL,'1.15',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(480,'status','Status',1,'function statusAction($uuid)','',replace('{\n        $result = array("result" => "failed", "function" => "status");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlFtpProxy = new FtpProxy();\n            $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''status'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(481,'start','Start',1,'function startAction($uuid)',replace('/**\n     * start a ftp-proxy process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "start");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlFtpProxy = new FtpProxy();\n            $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''start'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(482,'stop','Stop',1,'function stopAction($uuid)',replace('/**\n     * stop a ftp-proxy process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "stop");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlFtpProxy = new FtpProxy();\n            $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''stop'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(483,'restart','Restart',1,'function restartAction($uuid)',replace('/**\n     * restart a ftp-proxy process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlFtpProxy = new FtpProxy();\n            $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''restart'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(484,'config','Config',1,'function configAction()',replace('/**\n     * recreate configuration file from template\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "config");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        $result[''result''] = $this->callBackend(''template'');\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(485,'reload','Reload',1,'function reloadAction()',replace('/**\n     * reload configuration\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        $result = $this->configAction();\n        if ($result[''result''] == ''OK'') {\n            $result[''function''] = "reload";\n            $result[''result''] = $this->callBackend(''reload'');\n        }\n        return $result;\n    }','\n',char(10)),99,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(486,'setProxy','SetProxy',1,'function setProxyAction($uuid)',replace('/**\n     * update ftpproxy with given properties\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("ftpproxy")) {\n            $mdlFtpProxy = new FtpProxy();\n            // keep a list to detect duplicates later\n            $CurrentProxies =  $mdlFtpProxy->getNodes();\n            if ($uuid != null) {\n                $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n                if ($node != null) {\n                    $Enabled = $node->enabled->__toString();\n                    $result = array("result" => "failed", "validations" => array());\n                    $proxyInfo = $this->request->getPost("ftpproxy");\n\n                    $node->setNodes($proxyInfo);\n                    $valMsgs = $mdlFtpProxy->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "ftpproxy", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n\n                    if (count($result[''validations'']) == 0) {\n                        // check for duplicates\n                        foreach ($CurrentProxies[''ftpproxy''] as $CurrentUUID => &$CurrentProxy) {\n                            if (\n                                $node->listenaddress->__toString() == $CurrentProxy[''listenaddress''] &&\n                                $node->listenport->__toString() == $CurrentProxy[''listenport''] &&\n                                $uuid != $CurrentUUID\n                            ) {\n                                return array(\n                                          "result" => "failed",\n                                          "validations" => array(\n                                             "ftpproxy.listenaddress" => "Listen address in combination with Listen port already exists.",\n                                             "ftpproxy.listenport" => "Listen port in combination with Listen address already exists."\n                                          )\n                                       );\n                            }\n                        }\n\n                        // save config if validated correctly\n                        $mdlFtpProxy->serializeToConfig();\n                        Config::getInstance()->save();\n                        // reload config\n                        $svcFtpProxy = new ServiceController();\n                        $result = $svcFtpProxy->reloadAction();\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),100,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(487,'addProxy','AddProxy',1,'function addProxyAction()',replace('/**\n     * add new ftpproxy and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("ftpproxy")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlFtpProxy = new FtpProxy();\n            // keep a list to detect duplicates later\n            $CurrentProxies =  $mdlFtpProxy->getNodes();\n            $node = $mdlFtpProxy->ftpproxy->Add();\n            $node->setNodes($this->request->getPost("ftpproxy"));\n\n            $valMsgs = $mdlFtpProxy->performValidation();\n\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "ftpproxy", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n\n            if (count($result[''validations'']) == 0) {\n                foreach ($CurrentProxies[''ftpproxy''] as &$CurrentProxy) {\n                    if (\n                        $node->listenaddress->__toString() == $CurrentProxy[''listenaddress'']\n                            && $node->listenport->__toString() == $CurrentProxy[''listenport'']\n                    ) {\n                        return array(\n                                  "result" => "failed",\n                                  "validations" => array(\n                                     "ftpproxy.listenaddress" => "Listen address in combination with Listen port already exists.",\n                                     "ftpproxy.listenport" => "Listen port in combination with Listen address already exists."\n                                   )\n                               );\n                    }\n                }\n\n                // save config if validated correctly\n                $mdlFtpProxy->serializeToConfig();\n                Config::getInstance()->save();\n                // reload config\n                $svcFtpProxy = new ServiceController();\n                $result = $svcFtpProxy->reloadAction();\n            }\n        }\n        return $result;\n    }','\n',char(10)),100,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(488,'delProxy','DelProxy',1,'function delProxyAction($uuid)',replace('/**\n     * delete ftpproxy by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlFtpProxy = new FtpProxy();\n            if ($uuid != null) {\n                $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n                if ($node != null) {\n                    if ($mdlFtpProxy->ftpproxy->del($uuid) == true) {\n                        // if item is removed, serialize to config and save\n                        $mdlFtpProxy->serializeToConfig();\n                        Config::getInstance()->save();\n                        // reload config\n                        $svcFtpProxy = new ServiceController();\n                        $result = $svcFtpProxy->reloadAction();\n                    }\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),100,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(489,'toggleProxy','ToggleProxy',1,'function toggleProxyAction($uuid)',replace('/**\n     * toggle ftpproxy by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlFtpProxy = new FtpProxy();\n            if ($uuid != null) {\n                $node = $mdlFtpProxy->getNodeByReference(''ftpproxy.'' . $uuid);\n                if ($node != null) {\n                    if ($node->enabled->__toString() == "1") {\n                        $node->enabled = "0";\n                    } else {\n                        $node->enabled = "1";\n                    }\n                    // if item has toggled, serialize to config and save\n                    $mdlFtpProxy->serializeToConfig();\n                    Config::getInstance()->save();\n                    // reload config\n                    $svcFtpProxy = new ServiceController();\n                    $result = $svcFtpProxy->reloadAction();\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),100,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(490,'searchProxy','SearchProxy',0,'function searchProxyAction()',replace('/**\n     *\n     * search ftpproxy\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $fields = array(\n                "enabled",\n                "listenaddress",\n                "listenport",\n                "sourceaddress",\n                "rewritesourceport",\n                "idletimeout",\n                "maxsessions",\n                "reverseaddress",\n                "reverseport",\n                "logconnections",\n                "debuglevel",\n                "description"\n        );\n        $mdlFtpProxy = new FtpProxy();\n\n        $grid = new UIModelGrid($mdlFtpProxy->ftpproxy);\n        $response = $grid->fetchBindRequest(\n            $this->request,\n            $fields,\n            "listenport"\n        );\n        $svcFtpProxy = new ServiceController();\n        foreach ($response[''rows''] as &$row) {\n            $result = $svcFtpProxy->statusAction($row[''uuid'']);\n            if ($result[''result''] == ''OK'') {\n                $row[''status''] = 0;\n                continue;\n            }\n            $row[''status''] = 2;\n        }\n\n        return $response;\n    }','\n',char(10)),100,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(491,'configtest','Configtest',0,'function configtestAction()',replace('/**\n     * run syntax check for haproxy configuration\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        // first generate template based on current configuration\n        $backend->configdRun(''template reload OPNsense/HAProxy'');\n        // now export all the required files (or syntax check will fail)\n        $backend->configdRun("haproxy setup");\n        // finally run the syntax check\n        $response = $backend->configdRun("haproxy configtest");\n        return array("result" => $response);\n    }','\n',char(10)),101,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(492,'getFrontend','GetFrontend',0,'function getFrontendAction($uuid = null)','',replace('{\n        return $this->getBase(''frontend'', ''frontends.frontend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(493,'setFrontend','SetFrontend',0,'function setFrontendAction($uuid)','',replace('{\n        return $this->setBase(''frontend'', ''frontends.frontend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(494,'addFrontend','AddFrontend',0,'function addFrontendAction()','',replace('{\n        return $this->addBase(''frontend'', ''frontends.frontend'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(495,'delFrontend','DelFrontend',0,'function delFrontendAction($uuid)','',replace('{\n        return $this->delBase(''frontends.frontend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(496,'toggleFrontend','ToggleFrontend',0,'function toggleFrontendAction($uuid)','',replace('{\n        return $this->toggleBase(''frontends.frontend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(497,'searchFrontends','SearchFrontends',0,'function searchFrontendsAction()','',replace('{\n        return $this->searchBase(''frontends.frontend'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(498,'getBackend','GetBackend',0,'function getBackendAction($uuid = null)','',replace('{\n        return $this->getBase(''backend'', ''backends.backend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(499,'setBackend','SetBackend',0,'function setBackendAction($uuid)','',replace('{\n        return $this->setBase(''backend'', ''backends.backend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(500,'addBackend','AddBackend',0,'function addBackendAction()','',replace('{\n        return $this->addBase(''backend'', ''backends.backend'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(501,'delBackend','DelBackend',0,'function delBackendAction($uuid)','',replace('{\n        return $this->delBase(''backends.backend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(502,'toggleBackend','ToggleBackend',0,'function toggleBackendAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''backends.backend'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(503,'searchBackends','SearchBackends',0,'function searchBackendsAction()','',replace('{\n        return $this->searchBase(''backends.backend'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(504,'getServer','GetServer',0,'function getServerAction($uuid = null)','',replace('{\n        return $this->getBase(''server'', ''servers.server'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(505,'setServer','SetServer',0,'function setServerAction($uuid)','',replace('{\n        return $this->setBase(''server'', ''servers.server'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(506,'addServer','AddServer',0,'function addServerAction()','',replace('{\n        return $this->addBase(''server'', ''servers.server'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(507,'delServer','DelServer',0,'function delServerAction($uuid)','',replace('{\n        return $this->delBase(''servers.server'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(508,'toggleServer','ToggleServer',0,'function toggleServerAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''servers.server'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(509,'searchServers','SearchServers',0,'function searchServersAction()','',replace('{\n        return $this->searchBase(''servers.server'', array(''enabled'', ''name'', ''address'', ''port'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(510,'getHealthcheck','GetHealthcheck',0,'function getHealthcheckAction($uuid = null)','',replace('{\n        return $this->getBase(''healthcheck'', ''healthchecks.healthcheck'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(511,'setHealthcheck','SetHealthcheck',0,'function setHealthcheckAction($uuid)','',replace('{\n        return $this->setBase(''healthcheck'', ''healthchecks.healthcheck'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(512,'addHealthcheck','AddHealthcheck',0,'function addHealthcheckAction()','',replace('{\n        return $this->addBase(''healthcheck'', ''healthchecks.healthcheck'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(513,'delHealthcheck','DelHealthcheck',0,'function delHealthcheckAction($uuid)','',replace('{\n        return $this->delBase(''healthchecks.healthcheck'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(514,'searchHealthchecks','SearchHealthchecks',0,'function searchHealthchecksAction()','',replace('{\n        return $this->searchBase(''healthchecks.healthcheck'', array(''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(515,'getAcl','GetAcl',0,'function getAclAction($uuid = null)','',replace('{\n        return $this->getBase(''acl'', ''acls.acl'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(516,'setAcl','SetAcl',0,'function setAclAction($uuid)','',replace('{\n        return $this->setBase(''acl'', ''acls.acl'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(517,'addAcl','AddAcl',0,'function addAclAction()','',replace('{\n        return $this->addBase(''acl'', ''acls.acl'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(518,'delAcl','DelAcl',0,'function delAclAction($uuid)','',replace('{\n        return $this->delBase(''acls.acl'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(519,'searchAcls','SearchAcls',0,'function searchAclsAction()','',replace('{\n        return $this->searchBase(''acls.acl'', array(''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(520,'getAction','GetAction',0,'function getActionAction($uuid = null)','',replace('{\n        return $this->getBase(''action'', ''actions.action'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(521,'setAction','SetAction',0,'function setActionAction($uuid)','',replace('{\n        return $this->setBase(''action'', ''actions.action'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(522,'addAction','AddAction',0,'function addActionAction()','',replace('{\n        return $this->addBase(''action'', ''actions.action'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(523,'delAction','DelAction',0,'function delActionAction($uuid)','',replace('{\n        return $this->delBase(''actions.action'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(524,'searchActions','SearchActions',0,'function searchActionsAction()','',replace('{\n        return $this->searchBase(''actions.action'', array(''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(525,'getLua','GetLua',0,'function getLuaAction($uuid = null)','',replace('{\n        return $this->getBase(''lua'', ''luas.lua'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(526,'setLua','SetLua',0,'function setLuaAction($uuid)','',replace('{\n        return $this->setBase(''lua'', ''luas.lua'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(527,'addLua','AddLua',0,'function addLuaAction()','',replace('{\n        return $this->addBase(''lua'', ''luas.lua'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(528,'delLua','DelLua',0,'function delLuaAction($uuid)','',replace('{\n        return $this->delBase(''luas.lua'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(529,'toggleLua','ToggleLua',0,'function toggleLuaAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''luas.lua'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(530,'searchLuas','SearchLuas',0,'function searchLuasAction()','',replace('{\n        return $this->searchBase(''luas.lua'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(531,'getErrorfile','GetErrorfile',0,'function getErrorfileAction($uuid = null)','',replace('{\n        return $this->getBase(''errorfile'', ''errorfiles.errorfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(532,'setErrorfile','SetErrorfile',0,'function setErrorfileAction($uuid)','',replace('{\n        return $this->setBase(''errorfile'', ''errorfiles.errorfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(533,'addErrorfile','AddErrorfile',0,'function addErrorfileAction()','',replace('{\n        return $this->addBase(''errorfile'', ''errorfiles.errorfile'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(534,'delErrorfile','DelErrorfile',0,'function delErrorfileAction($uuid)','',replace('{\n        return $this->delBase(''errorfiles.errorfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(535,'searchErrorfiles','SearchErrorfiles',0,'function searchErrorfilesAction()','',replace('{\n        return $this->searchBase(''errorfiles.errorfile'', array(''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(536,'getMapfile','GetMapfile',0,'function getMapfileAction($uuid = null)','',replace('{\n        return $this->getBase(''mapfile'', ''mapfiles.mapfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(537,'setMapfile','SetMapfile',0,'function setMapfileAction($uuid)','',replace('{\n        return $this->setBase(''mapfile'', ''mapfiles.mapfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(538,'addMapfile','AddMapfile',0,'function addMapfileAction()','',replace('{\n        return $this->addBase(''mapfile'', ''mapfiles.mapfile'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(539,'delMapfile','DelMapfile',0,'function delMapfileAction($uuid)','',replace('{\n        return $this->delBase(''mapfiles.mapfile'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(540,'searchMapfiles','SearchMapfiles',0,'function searchMapfilesAction()','',replace('{\n        return $this->searchBase(''mapfiles.mapfile'', array(''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(541,'getCpu','GetCpu',0,'function getCpuAction($uuid = null)','',replace('{\n        return $this->getBase(''cpu'', ''cpus.cpu'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(542,'setCpu','SetCpu',0,'function setCpuAction($uuid)','',replace('{\n        return $this->setBase(''cpu'', ''cpus.cpu'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(543,'addCpu','AddCpu',0,'function addCpuAction()','',replace('{\n        return $this->addBase(''cpu'', ''cpus.cpu'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(544,'delCpu','DelCpu',0,'function delCpuAction($uuid)','',replace('{\n        return $this->delBase(''cpus.cpu'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(545,'toggleCpu','ToggleCpu',0,'function toggleCpuAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''cpus.cpu'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(546,'searchCpus','SearchCpus',0,'function searchCpusAction()','',replace('{\n        return $this->searchBase(''cpus.cpu'', array(''enabled'', ''name'', ''process_id'', ''thread_id'', ''cpu_id''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(547,'getGroup','GetGroup',0,'function getGroupAction($uuid = null)','',replace('{\n        return $this->getBase(''group'', ''groups.group'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(548,'setGroup','SetGroup',0,'function setGroupAction($uuid)','',replace('{\n        return $this->setBase(''group'', ''groups.group'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(549,'addGroup','AddGroup',0,'function addGroupAction()','',replace('{\n        return $this->addBase(''group'', ''groups.group'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(550,'delGroup','DelGroup',0,'function delGroupAction($uuid)','',replace('{\n        return $this->delBase(''groups.group'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(551,'toggleGroup','ToggleGroup',0,'function toggleGroupAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''groups.group'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(552,'searchGroups','SearchGroups',0,'function searchGroupsAction()','',replace('{\n        return $this->searchBase(''groups.group'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(553,'getUser','GetUser',0,'function getUserAction($uuid = null)','',replace('{\n        return $this->getBase(''user'', ''users.user'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(554,'setUser','SetUser',0,'function setUserAction($uuid)','',replace('{\n        return $this->setBase(''user'', ''users.user'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(555,'addUser','AddUser',0,'function addUserAction()','',replace('{\n        return $this->addBase(''user'', ''users.user'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(556,'delUser','DelUser',0,'function delUserAction($uuid)','',replace('{\n        return $this->delBase(''users.user'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(557,'toggleUser','ToggleUser',0,'function toggleUserAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''users.user'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(558,'searchUsers','SearchUsers',0,'function searchUsersAction()','',replace('{\n        return $this->searchBase(''users.user'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(559,'getresolver','Getresolver',0,'function getresolverAction($uuid = null)','',replace('{\n        return $this->getBase(''resolver'', ''resolvers.resolver'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(560,'setresolver','Setresolver',0,'function setresolverAction($uuid)','',replace('{\n        return $this->setBase(''resolver'', ''resolvers.resolver'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(561,'addresolver','Addresolver',0,'function addresolverAction()','',replace('{\n        return $this->addBase(''resolver'', ''resolvers.resolver'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(562,'delresolver','Delresolver',0,'function delresolverAction($uuid)','',replace('{\n        return $this->delBase(''resolvers.resolver'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(563,'toggleresolver','Toggleresolver',0,'function toggleresolverAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''resolvers.resolver'', $uuid);\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(564,'searchresolvers','Searchresolvers',0,'function searchresolversAction()','',replace('{\n        return $this->searchBase(''resolvers.resolver'', array(''enabled'', ''name'', ''nameservers''), ''name'');\n    }','\n',char(10)),102,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(565,'info','Info',0,'function infoAction($zoneid = 0)',replace('/**\n     * get info\n     * @return array|mixed\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $responseRaw = $backend->configdRun("haproxy statistics info");\n        $response = json_decode($responseRaw, true);\n        return $response;\n    }','\n',char(10)),103,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(566,'counters','Counters',0,'function countersAction($zoneid = 0)',replace('/**\n     * get counters\n     * @return array|mixed\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $responseRaw = $backend->configdRun("haproxy statistics stat");\n        $response = json_decode($responseRaw, true);\n        return $response;\n    }','\n',char(10)),103,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(567,'tables','Tables',0,'function tablesAction($zoneid = 0)',replace('/**\n     * get tables\n     * @return array|mixed\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $responseRaw = $backend->configdRun("haproxy statistics table");\n        $response = json_decode($responseRaw, true);\n        return $response;\n    }','\n',char(10)),103,1,0,NULL,NULL,NULL,NULL,'2.24',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(568,'status','Status',0,'function statusAction()','',replace('{\n        $backend = new Backend();\n        $result = array(''result'' => ''failed'');\n        $res = $backend->configdRun(''mdnsrepeater status'');\n        if (stripos($res, ''is running'')) {\n            $result[''result''] = ''running'';\n        } elseif (stripos($res, ''not running'')) {\n            $general = new MDNSRepeater();\n            if ((string)$general->enabled == ''1'') {\n                $result[''result''] = ''stopped'';\n            } else {\n                $result[''result''] = ''disabled'';\n            }\n        } else {\n            $result[''message''] = $res;\n        }\n        return $result;\n    }','\n',char(10)),104,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(569,'start','Start',0,'function startAction()','',replace('{\n        $backend = new Backend();\n        $result = array(''result'' => ''failed'');\n        $backend->configdRun(''template reload OPNsense/MDNSRepeater'');\n        $result[''result''] = $backend->configdRun(''mdnsrepeater start'');\n        return $result;\n    }','\n',char(10)),104,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(570,'stop','Stop',0,'function stopAction()','',replace('{\n        $backend = new Backend();\n        $result = array("result" => "failed");\n        $result[''result''] = $backend->configdRun(''mdnsrepeater stop'');\n        return $result;\n    }','\n',char(10)),104,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(571,'restart','Restart',0,'function restartAction()','',replace('{\n        $this->stopAction();\n        return $this->startAction();\n    }','\n',char(10)),104,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(572,'checkredis','Checkredis',0,'function checkredisAction()',replace('/**\n     * check if Redis plugin is installed\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("firmware plugin redis");\n        return $response;\n    }','\n',char(10)),107,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(573,'configtest','Configtest',1,'function configtestAction()',replace('/**\n     * test relayd configuration\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $result[''status''] = ''ok'';\n            $this->sessionClose();\n\n            $backend = new Backend();\n\n            $result[''function''] = "configtest";\n            $result[''template''] = trim($backend->configdRun(''template reload OPNsense/Relayd''));\n            if ($result[''template''] != ''OK'') {\n                $result[''result''] = "Template error: " . $result[''template''];\n                return $result;\n            }\n            $result[''result''] = trim($backend->configdRun(''relayd configtest''));\n            return $result;\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),108,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(574,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure relayd\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            if ($this->lock()) {\n                $this->sessionClose();\n                $result[''function''] = "reconfigure";\n                $result[''status''] = ''failed'';\n                $mdlRelayd = new Relayd();\n                $backend = new Backend();\n                $status = $this->statusAction();\n                if ($mdlRelayd->general->enabled->__toString() == 1) {\n                    $result = $this->configtestAction();\n                    if ($result[''template''] == ''OK'' && preg_match(''/configuration OK$/'', $result[''result'']) == 1) {\n                        if ($status[''status''] != ''running'') {\n                            $result[''result''] = trim($backend->configdRun(''relayd start''));\n                        } else {\n                            $result[''result''] = trim($backend->configdRun(''relayd reload''));\n                        }\n                    } else {\n                        return $result;\n                    }\n                } else {\n                    if ($status[''status''] == ''running'') {\n                        $result[''result''] = trim($backend->configdRun(''relayd stop''));\n                    }\n                }\n                $this->lock(1);\n                $mdlRelayd = new Relayd();\n                if ($mdlRelayd->configClean()) {\n                    $result[''status''] = ''ok'';\n                }\n                return $result;\n            } else {\n                throw new \Exception("Cannot get lock");\n            }\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),108,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(575,'dirty','Dirty',0,'function dirtyAction()',replace('/**\n     * check if changes to the relayd settings were made\n     * @return result array\n     */','\n',char(10)),replace('{\n        $result = array(''status'' => ''ok'');\n        $result[''relayd''][''dirty''] = $this->mdlRelayd->configChanged();\n        return $result;\n    }','\n',char(10)),109,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(576,'get','Get',0,'function getAction($nodeType = null, $uuid = null)',replace('/**\n     * query relayd settings\n     * @param $nodeType\n     * @param $uuid\n     * @return result array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isGet() && $nodeType != null) {\n            $this->validateNodeType($nodeType);\n            if ($nodeType == ''general'') {\n                $node = $this->mdlRelayd->getNodeByReference($nodeType);\n            } else {\n                if ($uuid != null) {\n                    $node = $this->mdlRelayd->getNodeByReference($nodeType . ''.'' . $uuid);\n                } else {\n                    $node = $this->mdlRelayd->$nodeType->Add();\n                }\n            }\n            if ($node != null) {\n                $result[''relayd''] = array($nodeType => $node->getNodes());\n                $result[''status''] = ''ok'';\n            }\n        }\n        return $result;\n    }','\n',char(10)),109,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(577,'set','Set',1,'function setAction($nodeType = null, $uuid = null)',replace('/**\n     * set relayd properties\n     * @param $nodeType\n     * @param $uuid\n     * @param $action set or add node\n     * @return status array\n     */','\n',char(10)),replace('{\n        $result = array(''result'' => ''failed'', ''validations'' => array());\n        if ($this->request->isPost() && $this->request->hasPost(''relayd'') && $nodeType != null) {\n            $this->validateNodeType($nodeType);\n            if ($nodeType == ''general'') {\n                $node = $this->mdlRelayd->getNodeByReference($nodeType);\n            } else {\n                if ($uuid != null) {\n                    $node = $this->mdlRelayd->getNodeByReference($nodeType . ''.'' . $uuid);\n                } else {\n                    $node = $this->mdlRelayd->$nodeType->Add();\n                }\n            }\n            if ($node != null) {\n                $relaydInfo = $this->request->getPost(''relayd'');\n\n                // perform plugin specific validations\n                if ($nodeType == ''virtualserver'') {\n                    // preset defaults for validations\n                    if (empty($relaydInfo[$nodeType][''type''])) {\n                        $relaydInfo[$nodeType][''type''] = $node->type->__toString();\n                    }\n                    if (empty($relaydInfo[$nodeType][''transport_tablemode''])) {\n                        $relaydInfo[$nodeType][''transport_tablemode''] = $node->transport_tablemode->__toString();\n                    }\n                    if (empty($relaydInfo[$nodeType][''backuptransport_tablemode''])) {\n                        $relaydInfo[$nodeType][''backuptransport_tablemode''] =\n                        $node->backuptransport_tablemode->__toString();\n                    }\n\n                    if ($relaydInfo[$nodeType][''type''] == ''redirect'') {\n                        if (\n                            $relaydInfo[$nodeType][''transport_tablemode''] != ''least-states'' &&\n                            $relaydInfo[$nodeType][''transport_tablemode''] != ''roundrobin''\n                        ) {\n                                $result[''validations''][''relayd.virtualserver.transport_tablemode''] = sprintf(\n                                    gettext(''Scheduler "%s" not supported for redirects.''),\n                                    $relaydInfo[$nodeType][''transport_tablemode'']\n                                );\n                        }\n                        if (\n                            $relaydInfo[$nodeType][''backuptransport_tablemode''] != ''least-states'' &&\n                            $relaydInfo[$nodeType][''backuptransport_tablemode''] != ''roundrobin''\n                        ) {\n                                $result[''validations''][''relayd.virtualserver.backuptransport_tablemode''] = sprintf(\n                                    gettext(''Scheduler "%s" not supported for redirects.''),\n                                    $relaydInfo[$nodeType][''backuptransport_tablemode'']\n                                );\n                        }\n                        if (\n                            $relaydInfo[$nodeType][''transport_type''] == ''route'' &&\n                            empty($relaydInfo[$nodeType][''routing_interface''])\n                        ) {\n                                $result[''validations''][''relayd.virtualserver.routing_interface''] =\n                                    gettext(''Routing interface cannot be empty'');\n                        }\n                    }\n                    if ($relaydInfo[$nodeType][''type''] == ''relay'') {\n                        if ($relaydInfo[$nodeType][''transport_tablemode''] == ''least-states'') {\n                            $result[''validations''][''relayd.virtualserver.transport_tablemode''] = sprintf(\n                                gettext(''Scheduler "%s" not supported for relays.''),\n                                $relaydInfo[$nodeType][''transport_tablemode'']\n                            );\n                        }\n                        if ($relaydInfo[$nodeType][''backuptransport_tablemode''] == ''least-states'') {\n                            $result[''validations''][''relayd.virtualserver.backuptransport_tablemode''] = sprintf(\n                                gettext(''Scheduler "%s" not supported for relays.''),\n                                $relaydInfo[$nodeType][''backuptransport_tablemode'']\n                            );\n                        }\n                    }\n                } elseif ($nodeType == ''tablecheck'') {\n                    switch ($relaydInfo[$nodeType][''type'']) {\n                        case ''send'':\n                            if (empty($relaydInfo[$nodeType][''expect''])) {\n                                $result[''validations''][''relayd.tablecheck.expect''] =\n                                gettext(''Expect Pattern cannot be empty.'');\n                            }\n                            break;\n                        case ''script'':\n                            if (empty($relaydInfo[$nodeType][''path''])) {\n                                $result[''validations''][''relayd.tablecheck.path''] =\n                                gettext(''Script path cannot be empty.'');\n                            }\n                            break;\n                        case ''http'':\n                            if (empty($relaydInfo[$nodeType][''path''])) {\n                                $result[''validations''][''relayd.tablecheck.path''] =\n                                gettext(''Path cannot be empty.'');\n                            }\n                            if (empty($relaydInfo[$nodeType][''code'']) && empty($relaydInfo[$nodeType][''digest''])) {\n                                $result[''validations''][''relayd.tablecheck.code''] =\n                                gettext(''Provide one of Response Code or Message Digest.'');\n                                $result[''validations''][''relayd.tablecheck.digest''] =\n                                gettext(''Provide one of Response Code or Message Digest.'');\n                            }\n                            break;\n                    }\n                }\n\n                $node->setNodes($relaydInfo[$nodeType]);\n                $valMsgs = $this->mdlRelayd->performValidation();\n                foreach ($valMsgs as $field => $msg) {\n                    $fieldnm = str_replace($node->__reference, "relayd." . $nodeType, $msg->getField());\n                    $result["validations"][$fieldnm] = $msg->getMessage();\n                }\n                if (empty($result["validations"])) {\n                    unset($result["validations"]);\n                    $this->mdlRelayd->serializeToConfig();\n                    $cfgRelayd = Config::getInstance()->save();\n                    if ($this->mdlRelayd->configDirty()) {\n                        $result[''status''] = ''ok'';\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),109,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(578,'del','Del',0,'function delAction($nodeType = null, $uuid = null)',replace('/**\n     * delete relayd settings\n     * @param $nodeType\n     * @param $uuid\n     * @return status array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($nodeType != null) {\n            $this->validateNodeType($nodeType);\n            if ($uuid != null) {\n                $node = $this->mdlRelayd->getNodeByReference($nodeType . ''.'' . $uuid);\n                if ($node != null) {\n                    $nodeName = $this->mdlRelayd->getNodeByReference($nodeType . ''.'' . $uuid . ''.name'')->__toString();\n                    if ($this->mdlRelayd->$nodeType->del($uuid) == true) {\n                        // delete relations\n                        switch ($nodeType) {\n                            case ''host'':\n                                $this->deleteRelations(\n                                    ''table'',\n                                    ''hosts'',\n                                    $uuid,\n                                    ''host'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                break;\n                            case ''tablecheck'':\n                                $this->deleteRelations(\n                                    ''virtualserver'',\n                                    ''transport_tablecheck'',\n                                    $uuid,\n                                    ''tablecheck'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                $this->deleteRelations(\n                                    ''virtualserver'',\n                                    ''backuptransport_tablecheck'',\n                                    $uuid,\n                                    ''tablecheck'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                break;\n                            case ''table'':\n                                $this->deleteRelations(\n                                    ''virtualserver'',\n                                    ''transport_table'',\n                                    $uuid,\n                                    ''table'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                $this->deleteRelations(\n                                    ''virtualserver'',\n                                    ''backuptransport_table'',\n                                    $uuid,\n                                    ''table'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                break;\n                            case ''protocol'':\n                                $this->deleteRelations(\n                                    ''virtualserver'',\n                                    ''protocol'',\n                                    $uuid,\n                                    ''protocol'',\n                                    $nodeName,\n                                    $this->mdlRelayd\n                                );\n                                break;\n                        }\n                        $this->mdlRelayd->serializeToConfig();\n                        Config::getInstance()->save();\n                        if ($this->mdlRelayd->configDirty()) {\n                            $result[''status''] = ''ok'';\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),109,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(579,'search','Search',1,'function searchAction($nodeType = null)',replace('/**\n     * search relayd settings\n     * @param $nodeType\n     * @return result array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        if ($this->request->isPost() && $nodeType != null) {\n            $this->validateNodeType($nodeType);\n            $grid = new UIModelGrid($this->mdlRelayd->$nodeType);\n            $fields = array();\n            switch ($nodeType) {\n                case ''host'':\n                    $fields = array(''name'', ''address'');\n                    break;\n                case ''tablecheck'':\n                    $fields = array(''name'', ''type'');\n                    break;\n                case ''table'':\n                    $fields = array(''enabled'', ''name'');\n                    break;\n                case ''protocol'':\n                    $fields = array(''name'', ''type'');\n                    break;\n                case ''virtualserver'':\n                    $fields = array(''enabled'', ''name'', ''type'');\n                    break;\n            }\n            $result = $grid->fetchBindRequest($this->request, $fields);\n            $result[''dirty''] = $this->mdlRelayd->configChanged();\n            return $result;\n        }\n    }','\n',char(10)),109,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(580,'sum','Sum',0,'function sumAction()',replace('/**\n     * get relayd summary\n     */','\n',char(10)),replace('{\012        $result = array("result" => "failed");\012        $backend = new Backend();\012        $output = array();\012        $output = explode("\n", trim($backend->configdRun(''relayd summary'')));\012        if (empty($output[0])) {\012            return $result;\012        }\012        $result["result"] = ''ok'';\012        $virtualServerId = 0;\012        $virtualServerType = '''';\012        $tableId = 0;\012        $virtualserver = array();\012        $rows = array();\012        foreach ($output as $line) {\012            $words = explode("\t", $line);\012            $id = trim($words[0]);\012            $type = trim($words[1]);\012            if ($type == ''redirect'' || $type == ''relay'') {\012                // new virtual server id/type means new record\012                if (\012                    ($id != $virtualServerId\012                    && $virtualServerId > 0)\012                    || ($type != $virtualServerType\012                    && strlen($virtualServerType) > 5)\012                ) {\012                    $rows[] = $virtualserver;\012                    $virtualserver = array();\012                }\012                $virtualServerId = $id;\012                $virtualServerType = $type;\012                $virtualserver[''id''] = $id;\012                $virtualserver[''type''] = $type;\012                $virtualserver[''name''] = trim($words[2]);\012                $virtualserver[''status''] = trim($words[4]);\012            }\012            if ($type == ''table'') {\012                $tableId = $id;\012                $virtualserver[''tables''][$tableId][''name''] = trim($words[2]);\012                $virtualserver[''tables''][$tableId][''status''] = trim($words[4]);\012            }\012            if ($type == ''host'') {\012                $hostId = trim($words[0]);\012                $virtualserver[''tables''][$tableId][''hosts''][$hostId][''name''] = trim($words[2]);\012                $virtualserver[''tables''][$tableId][''hosts''][$hostId][''avlblty''] = trim($words[3]);\012                $virtualserver[''tables''][$tableId][''hosts''][$hostId][''status''] = trim($words[4]);\012            }\012        }\012        $rows[] = $virtualserver;\012        $result["rows"] = $rows;\012        return $result;\012    }','\012',char(10)),110,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(581,'toggle','Toggle',1,'function toggleAction($nodeType = null, $id = null, $action = null)',replace('/**\n     * enable/disable relayd objects\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        $result = array("result" => "failed", "function" => "toggle");\n        if (\n            $nodeType != null &&\n                ($nodeType == ''redirect'' ||\n                 $nodeType == ''table'' ||\n                 $nodeType == ''host'')\n        ) {\n            if (\n                $action != null &&\n                    ($action == ''enable'' ||\n                     $action == ''disable'')\n            ) {\n                if ($id != null && $id > 0) {\n                    $backend = new Backend();\n                    $result["output"] = $backend->configdRun("relayd toggle $nodeType $action $id");\n                    if (isset($result["output"])) {\n                        $result["result"] = ''ok'';\n                    }\n                    $result["output"] = trim($result["output"]);\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),110,1,0,NULL,NULL,NULL,NULL,'2.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(582,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlDomain = new Domain();\n            $result[''domain''] = $mdlDomain->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(583,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlDomain = new Domain();\n            $mdlDomain->setNodes($this->request->getPost("domain"));\n            // perform validation\n            $valMsgs = $mdlDomain->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["domain." . $msg->getField()] = $msg->getMessage();\n            }\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlDomain->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(584,'searchDomain','SearchDomain',0,'function searchDomainAction()','',replace('{\n        $this->sessionClose();\n        $mdlDomain = $this->getModel();\n        $grid = new UIModelGrid($mdlDomain->domains->domain);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "name", "host", "port" )\n        );\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(585,'getDomain','GetDomain',0,'function getDomainAction($uuid = null)','',replace('{\n        $mdlDomain = $this->getModel();\n        if ($uuid != null) {\n            $node = $mdlDomain->getNodeByReference(''domains.domain.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("domain" => $node->getNodes());\n            }\n        } else {\n            $node = $mdlDomain->domains->domain->add();\n            return array("domain" => $node->getNodes());\n        }\n        return array();\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(586,'addDomain','AddDomain',1,'function addDomainAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("domain")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlDomain = $this->getModel();\n            $node = $mdlDomain->domains->domain->Add();\n            $node->setNodes($this->request->getPost("domain"));\n            $valMsgs = $mdlDomain->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "domain", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n            if (count($result[''validations'']) == 0) {\n                unset($result[''validations'']);\n                // save config if validated correctly\n                $mdlDomain->serializeToConfig();\n                Config::getInstance()->save();\n                unset($result[''validations'']);\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(587,'delDomain','DelDomain',1,'function delDomainAction($uuid)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlDomain = $this->getModel();\n            if ($uuid != null) {\n                if ($mdlDomain->domains->domain->del($uuid)) {\n                    $mdlDomain->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result[''result''] = ''deleted'';\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(588,'setDomain','SetDomain',1,'function setDomainAction($uuid)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("domain")) {\n            $mdlSetting = $this->getModel();\n            if ($uuid != null) {\n                $node = $mdlSetting->getNodeByReference(''domains.domain.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $domainInfo = $this->request->getPost("domain");\n                    $node->setNodes($domainInfo);\n                    $valMsgs = $mdlSetting->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "domain", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n                    if (count($result[''validations'']) == 0) {\n                        // save config if validated correctly\n                        $mdlSetting->serializeToConfig();\n                        Config::getInstance()->save();\n                        $result = array("result" => "saved");\n                    }\n                    return $result;\n                }\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(589,'toggleDomain','ToggleDomain',0,'function toggleDomainAction($uuid)','',replace('{\n        return $this->toggle_handler($uuid, ''domains'', ''domain'');\n    }','\n',char(10)),115,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(590,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlGeneral = new General();\n            $result[''general''] = $mdlGeneral->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),116,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(591,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlGeneral = new General();\n            $mdlGeneral->setNodes($this->request->getPost("general"));\n\n            // perform validation\n            $valMsgs = $mdlGeneral->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["general." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlGeneral->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),116,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(592,'showregistrations','Showregistrations',0,'function showregistrationsAction()',replace('/**\n     * show current SIP registrations\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("siproxd show-registrations");\n        return array("response" => $response);\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(593,'start','Start',1,'function startAction()',replace('/**\n     * start siproxd service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("siproxd start");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(594,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop siproxd service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("siproxd stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(595,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart siproxd service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("siproxd restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(596,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of siproxd\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("siproxd status");\n\n        if (strpos($response, "not running") > 0) {\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif ($mdlGeneral->enabled->__toString() == 0) {\n            $status = "disabled";\n        } else {\n            $status = "unkown";\n        }\n\n        return array("status" => $status);\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(597,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure siproxd, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop siproxd if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Siproxd'');\n\n            // (re)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),117,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(598,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlUser = new User();\n            $result[''user''] = $mdlUser->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(599,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlUser = new User();\n            $mdlUser->setNodes($this->request->getPost("user"));\n            // perform validation\n            $valMsgs = $mdlUser->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["user." . $msg->getField()] = $msg->getMessage();\n            }\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlUser->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(600,'searchUser','SearchUser',0,'function searchUserAction()','',replace('{\n        $this->sessionClose();\n        $mdlUser = $this->getModel();\n        $grid = new UIModelGrid($mdlUser->users->user);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "username", "password" )\n        );\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(601,'getUser','GetUser',0,'function getUserAction($uuid = null)','',replace('{\n        $mdlUser = $this->getModel();\n        if ($uuid != null) {\n            $node = $mdlUser->getNodeByReference(''users.user.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("user" => $node->getNodes());\n            }\n        } else {\n            $node = $mdlUser->users->user->add();\n            return array("user" => $node->getNodes());\n        }\n        return array();\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(602,'addUser','AddUser',1,'function addUserAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("user")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlUser = $this->getModel();\n            $node = $mdlUser->users->user->Add();\n            $node->setNodes($this->request->getPost("user"));\n            $valMsgs = $mdlUser->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "user", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n            if (count($result[''validations'']) == 0) {\n                unset($result[''validations'']);\n                // save config if validated correctly\n                $mdlUser->serializeToConfig();\n                Config::getInstance()->save();\n                unset($result[''validations'']);\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(603,'delUser','DelUser',1,'function delUserAction($uuid)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlUser = $this->getModel();\n            if ($uuid != null) {\n                if ($mdlUser->users->user->del($uuid)) {\n                    $mdlUser->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result[''result''] = ''deleted'';\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(604,'setUser','SetUser',1,'function setUserAction($uuid)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("user")) {\n            $mdlSetting = $this->getModel();\n            if ($uuid != null) {\n                $node = $mdlSetting->getNodeByReference(''users.user.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $userInfo = $this->request->getPost("user");\n                    $node->setNodes($userInfo);\n                    $valMsgs = $mdlSetting->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "user", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n                    if (count($result[''validations'']) == 0) {\n                        // save config if validated correctly\n                        $mdlSetting->serializeToConfig();\n                        Config::getInstance()->save();\n                        $result = array("result" => "saved");\n                    }\n                    return $result;\n                }\n            }\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(605,'toggleUser','ToggleUser',0,'function toggleUserAction($uuid)','',replace('{\n        return $this->toggle_handler($uuid, ''users'', ''user'');\n    }','\n',char(10)),118,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(606,'status','Status',1,'function statusAction($uuid)','',replace('{\n        $result = array("result" => "failed", "function" => "status");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''status'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(607,'start','Start',1,'function startAction($uuid)',replace('/**\n     * start a udpbroadcastrelay process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "start");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''start'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(608,'stop','Stop',1,'function stopAction($uuid)',replace('/**\n     * stop a udpbroadcastrelay process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "stop");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''stop'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(609,'restart','Restart',1,'function restartAction($uuid)',replace('/**\n     * restart a udpbroadcastrelay process\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        if ($uuid != null) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n            if ($node != null) {\n                $result[''result''] = $this->callBackend(''restart'', $node);\n            }\n        }\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(610,'config','Config',1,'function configAction()',replace('/**\n     * recreate configuration file from template\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed", "function" => "config");\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        $result[''result''] = $this->callBackend(''template'');\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(611,'reload','Reload',1,'function reloadAction()',replace('/**\n     * reload configuration\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n        }\n        $result = $this->configAction();\n        if ($result[''result''] == ''OK'') {\n            $result[''function''] = "reload";\n            $result[''result''] = $this->callBackend(''reload'');\n        }\n        return $result;\n    }','\n',char(10)),121,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(612,'setRelay','SetRelay',1,'function setRelayAction($uuid)',replace('/**\n     * update udpbroadcastrelay with given properties\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("udpbroadcastrelay")) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            // keep a list to detect duplicates later\n            $CurrentProxies =  $mdlUDPBroadcastRelay->getNodes();\n            if ($uuid != null) {\n                $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n                if ($node != null) {\n                    $Enabled = $node->enabled->__toString();\n                    $result = array("result" => "failed", "validations" => array());\n                    $relayInfo = $this->request->getPost("udpbroadcastrelay");\n\n                    $node->setNodes($relayInfo);\n                    $valMsgs = $mdlUDPBroadcastRelay->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "udpbroadcastrelay", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n\n                    if (count($result[''validations'']) == 0) {\n                        // check for duplicates\n\n                        foreach ($CurrentProxies[''udpbroadcastrelay''] as $CurrentUUID => &$CurrentRelay) {\n                            if (\n                                $node->InstanceID->__toString() == $CurrentRelay[''InstanceID''] &&\n                                $node->listenport->__toString() == $CurrentRelay[''listenport''] &&\n                                $uuid != $CurrentUUID\n                            ) {\n                                return array(\n                                          "result" => "failed",\n                                          "validations" => array(\n                                             "udpbroadcastrelay.InstanceID" => "Instance ID already in use.",\n                                             "udpbroadcastrelay.listenport" => "Listen port already in use."\n                                          )\n                                       );\n                            }\n                            if (\n                                $node->listenport->__toString() == $CurrentRelay[''listenport''] &&\n                                $uuid != $CurrentUUID\n                            ) {\n                                return array(\n                                          "result" => "failed",\n                                          "validations" => array(\n                                             "udpbroadcastrelay.listenport" => "Listen Port already in use."\n                                           )\n                                       );\n                            }\n                            if (\n                                $node->InstanceID->__toString() == $CurrentRelay[''InstanceID''] &&\n                                $uuid != $CurrentUUID\n                            ) {\n                                return array(\n                                          "result" => "failed",\n                                          "validations" => array(\n                                             "udpbroadcastrelay.InstanceID" => "Instance ID already In use."\n                                           )\n                                       );\n                            }\n                            $result = count(explode('','', $node->interfaces));\n                            if (\n                                $result < 2 &&\n                                $uuid != $CurrentUUID\n                            ) {\n                                return array(\n                                          "result" => "failed",\n                                          "validations" => array(\n                                             "udpbroadcastrelay.interfaces" => "At least two interfaces must be selected."\n                                           )\n                                       );\n                            }\n                        }\n\n                        // save config if validated correctly\n                        $mdlUDPBroadcastRelay->serializeToConfig();\n                        Config::getInstance()->save();\n                        // reload config\n                        $svcUDPBroadcastRelay = new ServiceController();\n                        $result = $svcUDPBroadcastRelay->reloadAction();\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),122,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(613,'addRelay','AddRelay',1,'function addRelayAction()',replace('/**\n     * add new udpbroadcastrelay and set with attributes from post\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("udpbroadcastrelay")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            // keep a list to detect duplicates later\n            $CurrentProxies =  $mdlUDPBroadcastRelay->getNodes();\n            $node = $mdlUDPBroadcastRelay->udpbroadcastrelay->Add();\n            $node->setNodes($this->request->getPost("udpbroadcastrelay"));\n\n            $valMsgs = $mdlUDPBroadcastRelay->performValidation();\n\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "udpbroadcastrelay", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n\n            if (count($result[''validations'']) == 0) {\n                foreach ($CurrentProxies[''udpbroadcastrelay''] as &$CurrentRelay) {\n                    if (\n                            $node->InstanceID->__toString() == $CurrentRelay[''InstanceID''] &&\n                            $node->listenport->__toString() == $CurrentRelay[''listenport'']\n                    ) {\n                            return array(\n                                      "result" => "failed",\n                                      "validations" => array(\n                                         "udpbroadcastrelay.InstanceID" => "Instance ID already in use.",\n                                         "udpbroadcastrelay.listenport" => "Listen port already in use."\n                                      )\n                                );\n                    }\n                    if (\n                        $node->listenport->__toString() == $CurrentRelay[''listenport'']\n                    ) {\n                        return array(\n                                  "result" => "failed",\n                                  "validations" => array(\n                                     "udpbroadcastrelay.listenport" => "Listen Port already in use."\n                                   )\n                               );\n                    }\n                    if (\n                        $node->InstanceID->__toString() == $CurrentRelay[''InstanceID'']\n                    ) {\n                        return array(\n                                  "result" => "failed",\n                                  "validations" => array(\n                                     "udpbroadcastrelay.InstanceID" => "Instance ID already In use."\n                                   )\n                               );\n                    }\n\n                    $result = count(explode('','', $node->interfaces));\n                    if (\n                        $result < 2\n                    ) {\n                        return array(\n                                  "result" => "failed",\n                                  "validations" => array(\n                                     "udpbroadcastrelay.interfaces" => "At least two interfaces must be selected."\n                                   )\n                               );\n                    }\n                }\n\n                // save config if validated correctly\n                $mdlUDPBroadcastRelay->serializeToConfig();\n                Config::getInstance()->save();\n                // reload config\n                $svcUDPBroadcastRelay = new ServiceController();\n                $result = $svcUDPBroadcastRelay->reloadAction();\n            }\n        }\n        return $result;\n    }','\n',char(10)),122,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(614,'delRelay','DelRelay',1,'function delRelayAction($uuid)',replace('/**\n     * delete udpbroadcastrelay by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            if ($uuid != null) {\n                $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n                if ($node != null) {\n                    if ($mdlUDPBroadcastRelay->udpbroadcastrelay->del($uuid) == true) {\n                        // if item is removed, serialize to config and save\n                        $mdlUDPBroadcastRelay->serializeToConfig();\n                        Config::getInstance()->save();\n                        // reload config\n                        $svcUDPBroadcastRelay = new ServiceController();\n                        $result = $svcUDPBroadcastRelay->reloadAction();\n                    }\n                } else {\n                    $result[''result''] = ''not found'';\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),122,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(615,'toggleRelay','ToggleRelay',1,'function toggleRelayAction($uuid)',replace('/**\n     * toggle udpbroadcastrelay by uuid (enable/disable)\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n            if ($uuid != null) {\n                $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $uuid);\n                if ($node != null) {\n                    if ($node->enabled->__toString() == "1") {\n                        $node->enabled = "0";\n                    } else {\n                        $node->enabled = "1";\n                    }\n                    // if item has toggled, serialize to config and save\n                    $mdlUDPBroadcastRelay->serializeToConfig();\n                    Config::getInstance()->save();\n                    // reload config\n                    $svcUDPBroadcastRelay = new ServiceController();\n                    $result = $svcUDPBroadcastRelay->reloadAction();\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),122,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(616,'searchRelay','SearchRelay',0,'function searchRelayAction()',replace('/**\n     *\n     * search udpbroadcastrelay\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $fields = array(\n                "enabled",\n                "interfaces",\n                "multicastaddress",\n                "sourceaddress",\n                "listenport",\n                "InstanceID",\n                "RevertTTL",\n                "description"\n        );\n        $mdlUDPBroadcastRelay = new UDPBroadcastRelay();\n\n        $grid = new UIModelGrid($mdlUDPBroadcastRelay->udpbroadcastrelay);\n        $response = $grid->fetchBindRequest(\n            $this->request,\n            $fields,\n            "InstanceID"\n        );\n        $svcUDPBroadcastRelay = new ServiceController();\n        foreach ($response[''rows''] as &$row) {\n            $result = $svcUDPBroadcastRelay->statusAction($row[''uuid'']);\n            if ($result[''result''] == ''OK'') {\n                $row[''status''] = 0;\n                continue;\n            }\n            $node = $mdlUDPBroadcastRelay->getNodeByReference(''udpbroadcastrelay.'' . $row[''uuid'']);\n            if ($node != null) {\n                if ($node->enabled->__toString() == "1") {\n                    $row[''status''] = 2;\n                } else {\n                    $row[''status''] = 5;\n                }\n            }\n        }\n\n        return $response;\n    }','\n',char(10)),122,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(617,'hourly','Hourly',0,'function hourlyAction()',replace('/**\n     * list hourly statistics\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("vnstat hourly");\n        return array("response" => $response);\n    }','\n',char(10)),124,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(618,'daily','Daily',0,'function dailyAction()',replace('/**\n     * list daily statistics\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("vnstat daily");\n        return array("response" => $response);\n    }','\n',char(10)),124,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(619,'monthly','Monthly',0,'function monthlyAction()',replace('/**\n     * list monthly statistics\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("vnstat monthly");\n        return array("response" => $response);\n    }','\n',char(10)),124,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(620,'resetdb','Resetdb',0,'function resetdbAction()',replace('/**\n     * remove database folder\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("vnstat resetdb");\n        return array("response" => $response);\n    }','\n',char(10)),124,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(621,'searchClient','SearchClient',0,'function searchClientAction()','',replace('{\n        return $this->searchBase(''clients.client'', array("enabled", "name", "pubkey", "tunneladdress", "serveraddress", "serverport"));\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(622,'getClient','GetClient',0,'function getClientAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''client'', ''clients.client'', $uuid);\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(623,'addClient','AddClient',0,'function addClientAction()','',replace('{\n        return $this->addBase(''client'', ''clients.client'');\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(624,'delClient','DelClient',0,'function delClientAction($uuid)','',replace('{\n        return $this->delBase(''clients.client'', $uuid);\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(625,'setClient','SetClient',0,'function setClientAction($uuid)','',replace('{\n        return $this->setBase(''client'', ''clients.client'', $uuid);\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(626,'toggleClient','ToggleClient',0,'function toggleClientAction($uuid)','',replace('{\n        return $this->toggleBase(''clients.client'', $uuid);\n    }','\n',char(10)),125,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(627,'searchServer','SearchServer',0,'function searchServerAction()','',replace('{\n        return $this->searchBase(''servers.server'', array("enabled", "name", "networks", "pubkey", "port", "tunneladdress"));\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(628,'getServer','GetServer',0,'function getServerAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''server'', ''servers.server'', $uuid);\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(629,'addServer','AddServer',1,'function addServerAction($uuid = null)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("server")) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''servers.server.'' . $uuid);\n            } else {\n                $node = $this->getModel()->servers->server->Add();\n            }\n            $node->setNodes($this->request->getPost("server"));\n            if (empty((string)$node->pubkey) && empty((string)$node->privkey)) {\n                // generate new keypair\n                $backend = new Backend();\n                $keyspriv = $backend->configdpRun("wireguard genkey", ''private'');\n                $keyspub = $backend->configdpRun("wireguard genkey", ''public'');\n                $node->privkey = $keyspriv;\n                $node->pubkey = $keyspub;\n            }\n            return $this->validateAndSave($node, ''server'');\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(630,'delServer','DelServer',0,'function delServerAction($uuid)','',replace('{\n        return $this->delBase(''servers.server'', $uuid);\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(631,'setServer','SetServer',1,'function setServerAction($uuid = null)','',replace('{\n        if ($this->request->isPost() && $this->request->hasPost("server")) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''servers.server.'' . $uuid);\n            } else {\n                $node = $this->getModel()->servers->server->Add();\n            }\n            $node->setNodes($this->request->getPost("server"));\n            if (empty((string)$node->pubkey) && empty((string)$node->privkey)) {\n                // generate new keypair\n                $backend = new Backend();\n                $keyspriv = $backend->configdpRun("wireguard genkey", ''private'');\n                $keyspub = $backend->configdpRun("wireguard genkey", ''public'');\n                $node->privkey = $keyspriv;\n                $node->pubkey = $keyspub;\n            }\n            return $this->validateAndSave($node, ''server'');\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(632,'toggleServer','ToggleServer',0,'function toggleServerAction($uuid)','',replace('{\n        return $this->toggleBase(''servers.server'', $uuid);\n    }','\n',char(10)),127,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(633,'showconf','Showconf',0,'function showconfAction()',replace('/**\n     * show wireguard config\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("wireguard showconf");\n        return array("response" => $response);\n    }','\n',char(10)),128,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(634,'showhandshake','Showhandshake',0,'function showhandshakeAction()',replace('/**\n     * show wireguard handshakes\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("wireguard showhandshake");\n        return array("response" => $response);\n    }','\n',char(10)),128,1,0,NULL,NULL,NULL,NULL,'1.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(635,'set','Set',1,'function setAction()','',replace('{\n        $result = array();\n        if ($this->request->isPost()) {\n            /* input validation */\n            $wol = $this->getModel();\n            $wolent = $wol->wolentry->Add();\n            if ($this->request->hasPost(''uuid'')) {\n                $uuid = $this->request->getPost(''uuid'');\n                $tmp = $wol->getNodeByReference(''wolentry.'' . $uuid);\n                if ($tmp) {\n                    $wolent = $tmp;\n                    $this->wakeHostByNode($wolent, $result);\n                }\n            } else {\n                $wolent->setNodes($this->request->getPost(''wake''));\n                if ($wol->performValidation()->count() == 0) {\n                    $this->wakeHostByNode($wolent, $result);\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(636,'delHost','DelHost',0,'function delHostAction($uuid)','',replace('{\n        $this->delBase(''wolentry'', $uuid);\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(637,'searchHost','SearchHost',0,'function searchHostAction()','',replace('{\n        return $this->searchBase(''wolentry'', array("interface", "mac", "descr"));\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(638,'getHost','GetHost',0,'function getHostAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''host'', ''wolentry'', $uuid);\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(639,'getwake','Getwake',0,'function getwakeAction()','',replace('{\n        return $this->getBase(''wake'', ''wolentry'', null);\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(640,'addHost','AddHost',0,'function addHostAction()','',replace('{\n        return $this->addBase(''host'', ''wolentry'');\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(641,'setHost','SetHost',0,'function setHostAction($uuid)','',replace('{\n        return $this->setBase(''host'', ''wolentry'', $uuid);\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(642,'wakeall','Wakeall',0,'function wakeallAction()','',replace('{\n        if (!$this->request->isPost()) {\n            return array(''error'' => ''Must be called via POST'');\n        }\n        $results = array(''results'' => array());\n        foreach ($this->getModel()->wolentry->iterateItems() as $wolent) {\n            $result = array(''mac'' => (string)$wolent->mac);\n            $this->wakeHostByNode($wolent, $result);\n            $results[''results''][] = $result;\n        }\n        return $results;\n    }','\n',char(10)),129,1,0,NULL,NULL,NULL,NULL,'2.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(643,'search','Search',0,'function searchAction()','',replace('{\n        $this->sessionClose();\n        $mdlZerotier = $this->getModel();\n        $grid = new UIModelGrid($mdlZerotier->networks->network);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "networkId", "description")\n        );\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(644,'get','Get',0,'function getAction($uuid = null)','',replace('{\n        $mdlZerotier = $this->getModel();\n        if ($uuid != null) {\n            $network = $mdlZerotier->getNodeByReference(''networks.network.'' . $uuid);\n            if ($network != null) {\n                return array("network" => $network->getNodes());\n            }\n        } else {\n            $network = $mdlZerotier->networks->network->add();\n            return array("network" => $network->getNodes());\n        }\n        return array();\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(645,'info','Info',0,'function infoAction($uuid = null)','',replace('{\n        $mdlZerotier = $this->getModel();\n        if ($uuid != null) {\n            $network = $mdlZerotier->getNodeByReference(''networks.network.'' . $uuid);\n            if ($network != null) {\n                $networkId = $network->networkId->__toString();\n                return array\n                    (\n                        "title" => gettext("Information on network") . " " . $networkId,\n                        "message" => $this->listZerotierNetwork($networkId)\n                    );\n            }\n        }\n        return array();\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(646,'set','Set',1,'function setAction($uuid = null)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("network")) {\n            if ($uuid != null) {\n                $mdlZerotier = $this->getModel();\n                $network = $mdlZerotier->getNodeByReference(''networks.network.'' . $uuid);\n                if ($network != null) {\n                    $network->setNodes($this->request->getPost("network"));\n                    $validationMessages = $mdlZerotier->performValidation();\n                    foreach ($validationMessages as $field => $msg) {\n                        if (!array_key_exists("validation", $result)) {\n                            $result["validations"] = array();\n                        }\n                        $result["validation"]["network." . $msg->getField()] = $msg->getMessage();\n                    }\n                    if ($validationMessages->count() == 0) {\n                        unset($result["validations"]);\n                        $mdlZerotier->serializeToConfig();\n                        Config::getInstance()->save();\n                        $result["result"] = "saved";\n                    }\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(647,'add','Add',1,'function addAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("network")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlZerotier = $this->getModel();\n            $network = $mdlZerotier->networks->network->add();\n            $network->setNodes($this->request->getPost("network"));\n            $validationMessages = $mdlZerotier->performValidation();\n            foreach ($validationMessages as $field => $msg) {\n                $fieldName = str_replace($network->__reference, "network", $msg->getField());\n                $result["validations"][$fieldName] = $msg->getMessage();\n            }\n            if ($validationMessages->count() == 0) {\n                unset($result["validations"]);\n                $mdlZerotier->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(648,'del','Del',1,'function delAction($uuid = null)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            if ($uuid != null) {\n                $mdlZerotier = $this->getModel();\n                if (!isEnabled($mdlZerotier)) {\n                    $result["result"] = "service_not_enabled";\n                    return $result;\n                }\n                $network = $mdlZerotier->getNodeByReference(''networks.network.'' . $uuid);\n                if (isEnabled($network)) {\n                    # Ensure we remove the interface before deleting the network\n                    $this->toggleZerotierNetwork($network->networkId, 0);\n                }\n                if ($mdlZerotier->networks->network->del($uuid)) {\n                    $mdlZerotier->serializeToConfig();\n                    Config::getInstance()->save();\n                    $result["result"] = "deleted";\n                } else {\n                    $result["result"] = "not_found";\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(649,'toggle','Toggle',1,'function toggleAction($uuid = null)','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            if ($uuid != null) {\n                $mdlZerotier = $this->getModel();\n                if (!isEnabled($mdlZerotier)) {\n                    $result["result"] = "service_not_enabled";\n                    return $result;\n                }\n                $network = $mdlZerotier->getNodeByReference(''networks.network.'' . $uuid);\n                if ($network != null) {\n                    $networkId = $network->networkId;\n                    if (isEnabled($network)) {\n                        $network->enabled = "0";\n                        $result[''result''] = $this->toggleZerotierNetwork($networkId, 0);\n                    } else {\n                        $network->enabled = "1";\n                        $result[''result''] = $this->toggleZerotierNetwork($networkId, 1);\n                    }\n                    $mdlZerotier->serializeToConfig();\n                    Config::getInstance()->save();\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),130,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(650,'get','Get',0,'function getAction()','',replace('{\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlZerotier = $this->getModel();\n            if (empty($mdlZerotier->localconf->__toString())) {\n                $mdlZerotier->localconf = ''{}'';\n            }\n            $result = array("zerotier" => $mdlZerotier->getNodes());\n        }\n        return $result;\n    }','\n',char(10)),131,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(651,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("zerotier")) {\n            $mdlZerotier = $this->getModel();\n            $mdlZerotier->setNodes($this->request->getPost("zerotier"));\n            $mdlZerotier->serializeToConfig();\n            Config::getInstance()->save();\n            $enabled = isEnabled($mdlZerotier);\n            $result["result"] = $this->toggleZerotierService($enabled);\n        }\n        return $result;\n    }','\n',char(10)),131,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(652,'status','Status',0,'function statusAction()','',replace('{\n        $mdlZerotier = $this->getModel();\n        $enabled = isEnabled($mdlZerotier);\n\n        $response = trim((new Backend())->configdRun(''zerotier status''));\n\n        if (strpos($response, "not running") > 0) {\n            if (isEnabled($mdlZerotier)) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif (!$enabled) {\n            $status = "disabled";\n        } else {\n            $status = "unknown";\n        }\n\n        return array("result" => $status);\n    }','\n',char(10)),131,1,0,NULL,NULL,NULL,NULL,'1.3.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(653,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlGeneral = new General();\n            $result[''general''] = $mdlGeneral->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),132,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(654,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlGeneral = new General();\n            $mdlGeneral->setNodes($this->request->getPost("general"));\n\n            // perform validation\n            $valMsgs = $mdlGeneral->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["general." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlGeneral->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),132,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(655,'start','Start',1,'function startAction()',replace('/**\n     * start collectd service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("collectd start");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),133,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(656,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop collectd service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("collectd stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),133,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(657,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart collectd service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("collectd restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),133,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(658,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of collectd\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("collectd status");\n\n        if (strpos($response, "not running") > 0) {\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif ($mdlGeneral->enabled->__toString() == 0) {\n            $status = "disabled";\n        } else {\n            $status = "unkown";\n        }\n\n        return array("status" => $status);\n    }','\n',char(10)),133,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(659,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure collectd, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop collectd if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Collectd'');\n\n            // (res)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),133,1,0,NULL,NULL,NULL,NULL,'1.3',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(660,'neighbor','Neighbor',0,'function neighborAction()',replace('/**\n     * show lldpd neighbors\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = $backend->configdRun("lldpd neighbor");\n        return array("response" => $response);\n    }','\n',char(10)),135,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(661,'searchUser','SearchUser',0,'function searchUserAction()','',replace('{\n        return $this->searchBase(''users.user'', array("enabled", "username", "password", "enckey"));\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(662,'getUser','GetUser',0,'function getUserAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''user'', ''users.user'', $uuid);\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(663,'addUser','AddUser',0,'function addUserAction()','',replace('{\n        return $this->addBase(''user'', ''users.user'');\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(664,'delUser','DelUser',0,'function delUserAction($uuid)','',replace('{\n        return $this->delBase(''users.user'', $uuid);\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(665,'setUser','SetUser',0,'function setUserAction($uuid)','',replace('{\n        return $this->setBase(''user'', ''users.user'', $uuid);\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(666,'toggleUser','ToggleUser',0,'function toggleUserAction($uuid)','',replace('{\n        return $this->toggleBase(''users.user'', $uuid);\n    }','\n',char(10)),138,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(667,'searchCommand','SearchCommand',0,'function searchCommandAction()','',replace('{\n        return $this->searchBase(''commands.command'', array("enabled", "name", "nrpecommand", "arguments"));\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(668,'getCommand','GetCommand',0,'function getCommandAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''command'', ''commands.command'', $uuid);\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(669,'addCommand','AddCommand',0,'function addCommandAction()','',replace('{\n        return $this->addBase(''command'', ''commands.command'');\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(670,'delCommand','DelCommand',0,'function delCommandAction($uuid)','',replace('{\n        return $this->delBase(''commands.command'', $uuid);\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(671,'setCommand','SetCommand',0,'function setCommandAction($uuid)','',replace('{\n        return $this->setBase(''command'', ''commands.command'', $uuid);\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(672,'toggleCommand','ToggleCommand',0,'function toggleCommandAction($uuid)','',replace('{\n        return $this->toggleBase(''commands.command'', $uuid);\n    }','\n',char(10)),141,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(673,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlGeneral = new General();\n            $result[''general''] = $mdlGeneral->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),144,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(674,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlGeneral = new General();\n            $mdlGeneral->setNodes($this->request->getPost("general"));\n\n            // perform validation\n            $valMsgs = $mdlGeneral->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["general." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlGeneral->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),144,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(675,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlInput = new Input();\n            $result[''input''] = $mdlInput->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),145,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(676,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlInput = new Input();\n            $mdlInput->setNodes($this->request->getPost("input"));\n\n            // perform validation\n            $valMsgs = $mdlInput->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["input." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlInput->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),145,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(677,'searchKey','SearchKey',0,'function searchKeyAction()','',replace('{\n        return $this->searchBase(''keys.key'', array("enabled", "name", "value"));\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(678,'getKey','GetKey',0,'function getKeyAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''key'', ''keys.key'', $uuid);\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(679,'addKey','AddKey',0,'function addKeyAction()','',replace('{\n        return $this->addBase(''key'', ''keys.key'');\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(680,'delKey','DelKey',0,'function delKeyAction($uuid)','',replace('{\n        return $this->delBase(''keys.key'', $uuid);\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(681,'setKey','SetKey',0,'function setKeyAction($uuid)','',replace('{\n        return $this->setBase(''key'', ''keys.key'', $uuid);\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(682,'toggleKey','ToggleKey',0,'function toggleKeyAction($uuid)','',replace('{\n        return $this->toggleBase(''keys.key'', $uuid);\n    }','\n',char(10)),146,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(683,'get','Get',0,'function getAction()','',replace('{\n        // define list of configurable settings\n        $result = array();\n        if ($this->request->isGet()) {\n            $mdlOutput = new Output();\n            $result[''output''] = $mdlOutput->getNodes();\n        }\n        return $result;\n    }','\n',char(10)),147,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(684,'set','Set',1,'function setAction()','',replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            // load model and update with provided data\n            $mdlOutput = new Output();\n            $mdlOutput->setNodes($this->request->getPost("output"));\n\n            // perform validation\n            $valMsgs = $mdlOutput->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists("validations", $result)) {\n                    $result["validations"] = array();\n                }\n                $result["validations"]["output." . $msg->getField()] = $msg->getMessage();\n            }\n\n            // serialize model to config and save\n            if ($valMsgs->count() == 0) {\n                $mdlOutput->serializeToConfig();\n                Config::getInstance()->save();\n                $result["result"] = "saved";\n            }\n        }\n        return $result;\n    }','\n',char(10)),147,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(685,'start','Start',1,'function startAction()',replace('/**\n     * start telegraf service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("telegraf start");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),148,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(686,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop telegraf service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("telegraf stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),148,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(687,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart telegraf service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("telegraf restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),148,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(688,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of telegraf\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("telegraf status");\n\n        if (strpos($response, "not running") > 0) {\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif ($mdlGeneral->enabled->__toString() == 0) {\n            $status = "disabled";\n        } else {\n            $status = "unkown";\n        }\n\n        return array("status" => $status);\n    }','\n',char(10)),148,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(689,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure telegraf, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $mdlGeneral = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop telegraf if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Telegraf'');\n\n            // (res)start daemon\n            if ($mdlGeneral->enabled->__toString() == 1) {\n                $this->startAction();\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),148,1,0,NULL,NULL,NULL,NULL,'1.8.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(690,'searchUserparameters','SearchUserparameters',0,'function searchUserparametersAction()','',replace('{\n        return $this->searchBase(''userparameters.userparameter'', array("enabled", "key", "command"));\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(691,'getUserparameter','GetUserparameter',0,'function getUserparameterAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''userparameter'', ''userparameters.userparameter'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(692,'addUserparameter','AddUserparameter',0,'function addUserparameterAction()','',replace('{\n        return $this->addBase(''userparameter'', ''userparameters.userparameter'');\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(693,'delUserparameter','DelUserparameter',0,'function delUserparameterAction($uuid)','',replace('{\n        return $this->delBase(''userparameters.userparameter'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(694,'setUserparameter','SetUserparameter',0,'function setUserparameterAction($uuid)','',replace('{\n        return $this->setBase(''userparameter'', ''userparameters.userparameter'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(695,'toggleUserparameter','ToggleUserparameter',0,'function toggleUserparameterAction($uuid)','',replace('{\n        return $this->toggleBase(''userparameters.userparameter'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(696,'searchAliases','SearchAliases',0,'function searchAliasesAction()','',replace('{\n        return $this->searchBase(''aliases.alias'', array("enabled", "key", "sourceKey"));\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(697,'getAlias','GetAlias',0,'function getAliasAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''alias'', ''aliases.alias'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(698,'addAlias','AddAlias',0,'function addAliasAction()','',replace('{\n        return $this->addBase(''alias'', ''aliases.alias'');\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(699,'delAlias','DelAlias',0,'function delAliasAction($uuid)','',replace('{\n        return $this->delBase(''aliases.alias'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(700,'setAlias','SetAlias',0,'function setAliasAction($uuid)','',replace('{\n        return $this->setBase(''alias'', ''aliases.alias'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(701,'toggleAlias','ToggleAlias',0,'function toggleAliasAction($uuid)','',replace('{\n        return $this->toggleBase(''aliases.alias'', $uuid);\n    }','\n',char(10)),150,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(702,'get','Get',0,'function getAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''account'', ''accounts.account'', $uuid);\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(703,'add','Add',0,'function addAction()','',replace('{\n        return $this->addBase(''account'', ''accounts.account'');\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(704,'update','Update',0,'function updateAction($uuid)','',replace('{\n        return $this->setBase(''account'', ''accounts.account'', $uuid);\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(705,'del','Del',0,'function delAction($uuid)','',replace('{\n        return $this->delBase(''accounts.account'', $uuid);\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(706,'toggle','Toggle',0,'function toggleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''accounts.account'', $uuid);\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(707,'search','Search',0,'function searchAction()','',replace('{\n        return $this->searchBase(''accounts.account'', array(''enabled'', ''name'', ''email''), ''name'');\n    }','\n',char(10)),155,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(708,'get','Get',0,'function getAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''action'', ''actions.action'', $uuid);\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(709,'add','Add',0,'function addAction()','',replace('{\n        return $this->addBase(''action'', ''actions.action'');\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(710,'update','Update',0,'function updateAction($uuid)','',replace('{\n        return $this->setBase(''action'', ''actions.action'', $uuid);\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(711,'del','Del',0,'function delAction($uuid)','',replace('{\n        return $this->delBase(''actions.action'', $uuid);\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(712,'toggle','Toggle',0,'function toggleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''actions.action'', $uuid);\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(713,'search','Search',0,'function searchAction()','',replace('{\n        return $this->searchBase(''actions.action'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(714,'sftpGetIdentity','SftpGetIdentity',0,'function sftpGetIdentityAction()','',replace('{\n        $result = ["status" => "unavailable"];\n\n        if ($response = $this->callBackend(["show-sftp-identity"], ["sftp_identity_type", "sftp_host"])) {\n            $result["status"] = "ok";\n            $result["identity"] = $response;\n        }\n\n        return $result;\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(715,'sftpTestConnection','SftpTestConnection',0,'function sftpTestConnectionAction()','',replace('{\n        if (\n            $response = $this->callBackend(\n                ["test-sftp-connection"],\n                ["sftp_host", "sftp_host_key", "sftp_port", "sftp_user", "sftp_identity_type", "sftp_remote_path", "sftp_chmod", "sftp_chgrp"]\n            )\n        ) {\n            return $response;\n        }\n\n        return ["status" => "unavailable"];\n    }','\n',char(10)),156,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(716,'get','Get',0,'function getAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''certificate'', ''certificates.certificate'', $uuid);\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(717,'add','Add',0,'function addAction()','',replace('{\n        return $this->addBase(''certificate'', ''certificates.certificate'');\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(718,'update','Update',0,'function updateAction($uuid)','',replace('{\n        return $this->setBase(''certificate'', ''certificates.certificate'', $uuid);\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(719,'del','Del',0,'function delAction($uuid)','',replace('{\n        # Remove the cert from list of certs known to acme.sh.\n        $mdlAcme = new AcmeClient();\n        if ($uuid != null) {\n            $node = $mdlAcme->getNodeByReference(''certificates.certificate.'' . $uuid);\n            if ($node != null) {\n                $cert_id = $node->id;\n                $backend = new Backend();\n                $response = $backend->configdRun("acmeclient remove-cert {$cert_id}");\n            }\n        }\n        return $this->delBase(''certificates.certificate'', $uuid);\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(720,'toggle','Toggle',0,'function toggleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''certificates.certificate'', $uuid);\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(721,'search','Search',0,'function searchAction()','',replace('{\n        return $this->searchBase(''certificates.certificate'', array(''enabled'', ''name'', ''altNames'', ''description'', ''lastUpdate'', ''statusCode'', ''statusLastUpdate''), ''name'');\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(722,'sign','Sign',1,'function signAction($uuid)',replace('/**\n     * sign certificate by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlAcme = new AcmeClient();\n\n            if ($uuid != null) {\n                $node = $mdlAcme->getNodeByReference(''certificates.certificate.'' . $uuid);\n                if ($node != null) {\n                    $cert_id = $node->id;\n                    $backend = new Backend();\n                    $response = $backend->configdRun("acmeclient sign-cert {$cert_id}");\n                    return array("response" => $response);\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(723,'removekey','Removekey',0,'function removekeyAction($uuid)',replace('/**\n     * remove private key from certificate by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        $mdlAcme = new AcmeClient();\n        if ($uuid != null) {\n            $node = $mdlAcme->getNodeByReference(''certificates.certificate.'' . $uuid);\n            if ($node != null) {\n                $cert_id = $node->id;\n                $backend = new Backend();\n                $response = $backend->configdRun("acmeclient remove-key {$cert_id}");\n            }\n        }\n        return $result;\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(724,'revoke','Revoke',1,'function revokeAction($uuid)',replace('/**\n     * revoke certificate by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            $mdlAcme = new AcmeClient();\n\n            if ($uuid != null) {\n                $node = $mdlAcme->getNodeByReference(''certificates.certificate.'' . $uuid);\n                if ($node != null) {\n                    $cert_id = $node->id;\n                    $backend = new Backend();\n                    $response = $backend->configdRun("acmeclient revoke-cert {$cert_id}");\n                    return array("response" => $response);\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(725,'automation','Automation',0,'function automationAction($uuid)',replace('/**\n     * rerun automation for the certificate by uuid\n     * @param $uuid item unique id\n     * @return array status\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        $mdlAcme = new AcmeClient();\n        if ($uuid != null) {\n            $node = $mdlAcme->getNodeByReference(''certificates.certificate.'' . $uuid);\n            if ($node != null) {\n                $cert_id = $node->id;\n                $backend = new Backend();\n                $response = $backend->configdRun("acmeclient run-automation {$cert_id}");\n            }\n        }\n        return $result;\n    }','\n',char(10)),157,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(726,'start','Start',1,'function startAction()',replace('/**\n     * start acmeclient service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("acmeclient http-start");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(727,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop acmeclient service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("acmeclient http-stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(728,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart acme_http_challenge service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("acmeclient http-restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(729,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of acme_http_challenge service\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $model = new AcmeClient();\n        $response = $backend->configdRun("acmeclient http-status");\n\n        if (strpos($response, "not running") > 0) {\n            if ($model->settings->enabled->__toString() == 1) {\n                $status = "stopped";\n            } else {\n                $status = "disabled";\n            }\n        } elseif (strpos($response, "is running") > 0) {\n            $status = "running";\n        } elseif ($model->settings->enabled->__toString() == 0) {\n            $status = "disabled";\n        } else {\n            $status = "unkown";\n        }\n\n        return array("status" => $status);\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(730,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure acmeclient, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $force_restart = false;\n\n            $mdlAcme = new AcmeClient();\n            $backend = new Backend();\n            $runStatus = $this->statusAction();\n\n            // stop acmeclient when disabled\n            if (\n                $runStatus[''status''] == "running" &&\n                ($mdlAcme->settings->enabled->__toString() == 0 ||\n                $force_restart)\n            ) {\n                $this->stopAction();\n            }\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/AcmeClient'');\n\n            // now setup the environment\n            $backend->configdRun("acmeclient setup");\n\n            // (res)start daemon\n            if ($mdlAcme->settings->enabled->__toString() == 1) {\n                if ($runStatus[''status''] == "running" && !$force_restart) {\n                    $backend->configdRun("acmeclient http-restart");\n                } else {\n                    $this->startAction();\n                }\n            }\n\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(731,'configtest','Configtest',0,'function configtestAction()',replace('/**\n     * run syntax check for our custom lighttpd configuration\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        // first generate template based on current configuration\n        $backend->configdRun(''template reload OPNsense/AcmeClient'');\n        // now setup the environment\n        $backend->configdRun("acmeclient setup");\n        // finally run the syntax check\n        $response = $backend->configdRun("acmeclient configtest");\n        return array("result" => $response);\n        // TODO: We may also want to check for duplicate cert names, etc.\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(732,'signallcerts','Signallcerts',0,'function signallcertsAction()',replace('/**\n     * Run sign or renew (if required) command for ALL certificates\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        // first setup the environment\n        $backend->configdRun("acmeclient setup");\n        // run the command\n        $response = $backend->configdRun("acmeclient sign-all-certs");\n        return array("result" => $response);\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(733,'reset','Reset',0,'function resetAction()',replace('/**\n     * Remove ALL certificate data and configuration and reset ALL states\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $model = new AcmeClient();\n        // reset certificate states\n        foreach ($model->getNodeByReference(''certificates.certificate'')->iterateItems() as $cert) {\n            $cert->lastUpdate = null;\n            $cert->statusCode = null;\n            $cert->statusLastUpdate = null;\n        }\n        // reset account states\n        foreach ($model->getNodeByReference(''accounts.account'')->iterateItems() as $account) {\n            $account->lastUpdate = null;\n        }\n        // reset acme.sh data\n        $backend = new Backend();\n        $response = $backend->configdRun("acmeclient reset-acme-client");\n        // serialize to config and save\n        $model->serializeToConfig();\n        Config::getInstance()->save();\n        return array("result" => $response);\n    }','\n',char(10)),158,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(734,'fetchHAProxyIntegration','FetchHaproxyIntegration',1,'function fetchHAProxyIntegrationAction()',replace('/**\n     * integrate with HAProxy plugin or return if already done\n     * @return array status action\n     */','\n',char(10)),replace('{\n        $result = array("result" => "no change");\n\n        if ($this->request->isPost()) {\n            $mdlAcme = $this->getModel();\n\n            // Check if the required plugin is installed\n            if ((string)$mdlAcme->isPluginInstalled(''haproxy'') != "1") {\n                $this->getLogger()->error("AcmeClient: HAProxy plugin is NOT installed, skipping integration");\n                return($result);\n            }\n\n            // Setup only if AcmeClient and HAProxy integration is enabled.\n            // NOTE: We provide HAProxy integration no matter if the HAProxy plugin\n            //       is actually enabled or not. This should avoid confusion.\n            if (\n                (string)$mdlAcme->settings->haproxyIntegration == "1" and\n                (string)$mdlAcme->settings->enabled == "1"\n            ) {\n                $mdlHAProxy = new \OPNsense\HAProxy\HAProxy();\n                $backend = new Backend();\n\n                // Get current status of HAProxy integration by running various checks.\n                $integration_found = false; // Switch to TRUE if something is found.\n                $integration_complete = true; // Switch to FALSE if anything is missing.\n                $integration_changes = false; // Switch to TRUE if config was changes.\n\n                // Check: HAProxy ACL\n                $acl_ref = (string)$mdlAcme->settings->haproxyAclRef;\n                if (!empty($acl_ref)) {\n                    $integration_found = true; // We found something.\n                    // Make sure the item was not deleted.\n                    if ($mdlHAProxy->getByAclID($acl_ref) === null) {\n                        $this->getLogger()->error("AcmeClient: HAProxy integration is incomplete: ACL item not found");\n                        $integration_complete = false; // Item is broken.\n                    }\n                } else {\n                    $integration_complete = false; // Item is missing.\n                }\n\n                // Check: HAProxy action\n                $action_ref = (string)$mdlAcme->settings->haproxyActionRef;\n                if (!empty($action_ref)) {\n                    $integration_found = true; // We found something.\n                    // Make sure the item was not deleted.\n                    if ($mdlHAProxy->getByActionID($action_ref) === null) {\n                        $this->getLogger()->error("AcmeClient: HAProxy integration is incomplete: action item not found");\n                        $integration_complete = false; // Item is broken.\n                    }\n                } else {\n                    $integration_complete = false; // Item is missing.\n                }\n\n                // Check: HAProxy server\n                $server_ref = (string)$mdlAcme->settings->haproxyServerRef;\n                if (!empty($server_ref)) {\n                    $integration_found = true; // We found something.\n                    // Make sure the item was not deleted.\n                    if ($mdlHAProxy->getByServerID($server_ref) === null) {\n                        $this->getLogger()->error("AcmeClient: HAProxy integration is incomplete: server item not found");\n                        $integration_complete = false; // Item is broken.\n                    }\n                } else {\n                    $integration_complete = false; // Item is missing.\n                }\n\n                // Check: HAProxy backend\n                $backend_ref = (string)$mdlAcme->settings->haproxyBackendRef;\n                if (!empty($backend_ref)) {\n                    $integration_found = true; // We found something.\n                    // Make sure the item was not deleted.\n                    if ($mdlHAProxy->getByBackendID($backend_ref) === null) {\n                        $this->getLogger()->error("AcmeClient: HAProxy integration is incomplete: backend item not found");\n                        $integration_complete = false; // Item is broken.\n                    }\n                } else {\n                    $integration_complete = false; // Item is missing.\n                }\n\n                // Check if HAProxy integration is already complete.\n                if ($integration_found and $integration_complete) {\n                    $this->getLogger()->error("AcmeClient: HAProxy integration is complete");\n                } else {\n                    $integration_changes = true;\n                    /**\n                     * Check if we need to remove relics of incomplete HAProxy integration.\n                     * NOTE: We try to automatically repair a broken HAProxy integration,\n                     *       although the user may have deleted some items intentionally.\n                     *       As long as the HAProxy integration is enabled we assume that\n                     *       this is an error that should *automatically* be fixed.\n                     */\n                    if ($integration_found and !$integration_complete) {\n                        // NOTE: We ignore the return value of the del() calls\n                        //       too keep this as simple as possible.\n                        $this->getLogger()->error("AcmeClient: HAProxy integration is incomplete, removing relics");\n                        // Remove obsolete backend item\n                        if (!empty($backend_ref)) {\n                            if ($mdlHAProxy->backends->backend->del($backend_ref)) {\n                                $this->getLogger()->error("AcmeClient: HAProxy integration: deleted obsolete backend item");\n                            }\n                        }\n                        // Remove obsolete server item\n                        if (!empty($server_ref)) {\n                            if ($mdlHAProxy->servers->server->del($server_ref)) {\n                                $this->getLogger()->error("AcmeClient: HAProxy integration: deleted obsolete server item");\n                            }\n                        }\n                        // Remove obsolete action item\n                        if (!empty($action_ref)) {\n                            if ($mdlHAProxy->actions->action->del($action_ref)) {\n                                $this->getLogger()->error("AcmeClient: HAProxy integration: deleted obsolete action item");\n                            }\n                        }\n                        // Remove obsolete ACL item\n                        if (!empty($acl_ref)) {\n                            if ($mdlHAProxy->acls->acl->del($acl_ref)) {\n                                $this->getLogger()->error("AcmeClient: HAProxy integration: deleted obsolete ACL item");\n                            }\n                        }\n                        // TODO: Remove obsolete ACL link from frontends\n\n                        // NOTE: We don''t clear the settings refs here, because they\n                        //       will be overwritten later anyway.\n                        $result[''result''] = "repaired";\n                    } else {\n                        $this->getLogger()->error("AcmeClient: HAProxy integration initializing");\n                        $result[''result''] = "new";\n                    }\n\n                    // Get TCP port for internal acme webserver from config.\n                    $acme_port = (string)$mdlAcme->settings->challengePort;\n\n                    // Add a new HAProxy ACL\n                    $acl_uuid = $mdlHAProxy->newAcl(\n                        "find_acme_challenge",\n                        "Added by Let''s Encrypt plugin",\n                        "path_beg",\n                        "0",\n                        array("path_beg" => "/.well-known/acme-challenge/")\n                    );\n\n                    // Add a new HAProxy backend\n                    $backend_uuid = $mdlHAProxy->newBackend(\n                        "1",\n                        "acme_challenge_backend",\n                        "Added by Let''s Encrypt plugin",\n                        "http",\n                        "source",\n                        "",\n                        ""\n                    );\n\n                    // Add a new HAProxy action\n                    $action_uuid = $mdlHAProxy->newAction(\n                        "redirect_acme_challenges",\n                        "Added by Let''s Encrypt plugin",\n                        "if",\n                        "",\n                        "and",\n                        "use_backend",\n                        // Use the new backend uuid in field "useBackend"\n                        array("use_backend" => $backend_uuid)\n                    );\n\n                    // NOTE: This action is linked to frontends.\n                    $action_ref = $action_uuid;\n\n                    // Add a new HAProxy server\n                    $server_uuid = $mdlHAProxy->newServer(\n                        "acme_challenge_host",\n                        "Added by Let''s Encrypt plugin",\n                        "127.0.0.1",\n                        $acme_port,\n                        "active",\n                        "0",\n                        "0",\n                        ""\n                    );\n\n                    // Update hidden fields to signal that HAProxy integration is complete.\n                    $mdlAcme->settings->haproxyAclRef = $acl_uuid;\n                    $mdlAcme->settings->haproxyActionRef = $action_uuid;\n                    $mdlAcme->settings->haproxyServerRef = $server_uuid;\n                    $mdlAcme->settings->haproxyBackendRef = $backend_uuid;\n\n                    // Link new ACL to HAProxy action\n                    $link_acl_result = $mdlHAProxy->linkAclToAction($acl_uuid, $action_uuid);\n\n                    // Link new server to HAProxy backend\n                    $link_server_result = $mdlHAProxy->linkServerToBackend($server_uuid, $backend_uuid);\n                }\n\n                // Ensure HAProxy frontend additions have been applied.\n                foreach ($mdlAcme->getNodeByReference(''validations.validation'')->iterateItems() as $validation) {\n                    // Find all (enabled) validation methods with HAProxy integration.\n                    if (\n                        (string)$validation->enabled == "1" and\n                        (string)$validation->method == "http01" and\n                        (string)$validation->http_service == "haproxy"\n                    ) {\n                        // Check if HAProxy frontends were specified.\n                        if (empty((string)$validation->http_haproxyFrontends)) {\n                            // Skip item, no HAProxy frontends were specified.\n                            continue;\n                        }\n                        $_frontends = explode('','', $validation->http_haproxyFrontends);\n                        // Walk through all linked frontends.\n                        foreach ($_frontends as $_frontend) {\n                            $frontend = $mdlHAProxy->getByFrontendID($_frontend);\n                            // Make sure the frontend was found in config.\n                            if (!is_null($frontend) && !empty((string)$frontend->id)) {\n                                // Check if the HAProxy ACME Action is linked to this frontend.\n                                $_actions = $frontend->linkedActions;\n                                if (strpos($_actions, $action_ref) !== false) {\n                                    // Match! Nothing to do.\n                                } else {\n                                    // Link to ACME Action is currently missing: add it!\n                                    if (!empty((string)$_actions)) {\n                                        // Extend existing string.\n                                        $_actions .= ",${action_ref}";\n                                    } else {\n                                        // First linked Action for this frontend.\n                                        $_actions = $action_ref;\n                                    }\n                                    // Add modified list of linked Actions to frontend.\n                                    $frontend->linkedActions = $_actions;\n                                    $this->getLogger()->error("AcmeClient: HAProxy integration: updating frontend ${_frontend}");\n                                    // We need to write changes to config.\n                                    $integration_changes = true;\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Changes made to configuration?\n                if ($integration_changes === true) {\n                    $this->getLogger()->error("AcmeClient: HAProxy integration: saving updated configuration");\n                    // Save updated configuration.\n                    // Do NOT validate because the current in-memory model doesn''t know about the\n                    // HAProxy items just created.\n                    // FIXME: works, but still leads to "Related item not found" errors in the log file\n                    $mdlHAProxy->serializeToConfig($validateFullModel = false, $disable_validation = true);\n                    $mdlAcme->serializeToConfig($validateFullModel = false, $disable_validation = true);\n                    Config::getInstance()->save();\n\n                    // Reconfigure HAProxy\n                    $backend->configdRun(''template reload OPNsense/HAProxy'');\n                    $response = $backend->configdRun("haproxy restart");\n                }\n            } else {\n                // NOTE: HAProxy integration is NOT removed if the user disables it, because\n                // we might destroy changes made by the user when doing so.\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * Check wether the Google Cloud plugin is installed.\n     * @return array status action\n     */\n    public function getGcloudPluginStatusAction()\n    {\n        $result = array("result" => "0");\n\n        $mdlAcme = $this->getModel();\n\n        // Check if the required plugin is installed\n        if ((string)$mdlAcme->isPluginInstalled(''google-cloud-sdk'') == "1") {\n            $result[''result''] = "1";\n        }\n\n        return $result;\n    }\n\n    /**\n     * Check wether the BIND plugin is installed.\n     * @return array status action\n     */\n    public function getBindPluginStatusAction()\n    {\n        $result = array("result" => "0");\n\n        $mdlAcme = $this->getModel();\n\n        // Check if the required plugin is installed\n        if ((string)$mdlAcme->isPluginInstalled(''bind'') == "1") {\n            $result[''result''] = "1";\n        }\n\n        return $result;\n    }\n}','\n',char(10)),159,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(735,'get','Get',0,'function getAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''validation'', ''validations.validation'', $uuid);\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(736,'add','Add',0,'function addAction()','',replace('{\n        return $this->addBase(''validation'', ''validations.validation'');\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(737,'update','Update',0,'function updateAction($uuid)','',replace('{\n        return $this->setBase(''validation'', ''validations.validation'', $uuid);\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(738,'del','Del',0,'function delAction($uuid)','',replace('{\n        return $this->delBase(''validations.validation'', $uuid);\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(739,'toggle','Toggle',0,'function toggleAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase(''validations.validation'', $uuid);\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(740,'search','Search',0,'function searchAction()','',replace('{\n        return $this->searchBase(''validations.validation'', array(''enabled'', ''name'', ''description''), ''name'');\n    }','\n',char(10)),160,1,0,NULL,NULL,NULL,NULL,'1.36',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(741,'freshclam','Freshclam',1,'function freshclamAction()',replace('/**\n     * load the initial signatures\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $command = ''clamav freshclam'';\n            if ($this->request->hasPost(''action'')) {\n                $command .= '' go'';\n            }\n            $response = trim($backend->configdRun($command));\n            return array(''status'' => $response);\n        } else {\n            return array(''status'' => ''error'');\n        }\n    }','\n',char(10)),162,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(742,'version','Version',0,'function versionAction()',replace('/**\n     * get ClamAV and signature versions\n     */','\n',char(10)),replace('{\n        $infos = array(\n            "clamav" => array("Version"),\n            "main" => array("main.cvd", "main.cld"),\n            "daily" => array("daily.cvd", "daily.cld"),\n            "bytecode" => array("bytecode.cvd", "bytecode.cld"),\n            "signatures" => array("Total number of signatures")\n        );\n        $backend = new Backend();\n        $result = array();\n        $response = json_decode($backend->configdRun("clamav version"));\n        if ($response != null) {\n            foreach ($response as $key => $value) {\n                foreach ($infos as $info_key => $info) {\n                    if (in_array($key, $info)) {\n                        $result[$info_key] = $value;\n                    }\n                }\n            }\n            return array("version" => $result);\n        } else {\n            return array();\n        }\n    }','\n',char(10)),162,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(743,'searchUrl','SearchUrl',0,'function searchUrlAction()','',replace('{\n        return $this->searchBase(''lists.list'', array("enabled", "name", "link"));\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(744,'getUrl','GetUrl',0,'function getUrlAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''list'', ''lists.list'', $uuid);\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(745,'addUrl','AddUrl',0,'function addUrlAction()','',replace('{\n        return $this->addBase(''list'', ''lists.list'');\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(746,'delUrl','DelUrl',0,'function delUrlAction($uuid)','',replace('{\n        return $this->delBase(''lists.list'', $uuid);\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(747,'setUrl','SetUrl',0,'function setUrlAction($uuid)','',replace('{\n        return $this->setBase(''list'', ''lists.list'', $uuid);\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(748,'toggleUrl','ToggleUrl',0,'function toggleUrlAction($uuid)','',replace('{\n        return $this->toggleBase(''lists.list'', $uuid);\n    }','\n',char(10)),163,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(749,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve system activity (top)\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $backend = new Backend();\n        $response = $backend->configdRun(''proofpoint et status'');\n        $activity = json_decode($response, true);\n\n        return $activity;\n    }','\n',char(10)),164,1,0,NULL,NULL,NULL,NULL,'1.4',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(750,'searchItem','SearchItem',0,'function searchItemAction()','',replace('{\n        return $this->searchBase("services.service", array(''enabled'', ''description''), "description");\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(751,'setItem','SetItem',0,'function setItemAction($uuid)','',replace('{\n        return $this->setBase("service", "services.service", $uuid);\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(752,'addItem','AddItem',0,'function addItemAction()','',replace('{\n        return $this->addBase("service", "services.service");\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(753,'getItem','GetItem',0,'function getItemAction($uuid = null)','',replace('{\n        return $this->getBase("service", "services.service", $uuid);\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(754,'delItem','DelItem',0,'function delItemAction($uuid)','',replace('{\n        return $this->delBase("services.service", $uuid);\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(755,'toggleItem','ToggleItem',0,'function toggleItemAction($uuid, $enabled = null)','',replace('{\n        return $this->toggleBase("services.service", $uuid, $enabled);\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(756,'get','Get',0,'function getAction()','',replace('{\n        $result = array();\n        $result[static::$internalModelName] = [\n            "general" => $this->getModel()->general->getNodes()\n        ];\n        return $result;\n    }','\n',char(10)),175,1,0,NULL,NULL,NULL,NULL,'1.0.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(757,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure captive portal\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $backend->configdRun(''template reload OPNsense/Tinc'');\n            return array("status" => "ok");\n        } else {\n            return array("status" => "failed");\n        }\n    }','\n',char(10)),176,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(758,'start','Start',1,'function startAction()',replace('/**\n     * start tinc service (in background)\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("tinc start");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),176,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(759,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop tinc service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("tinc stop");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),176,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(760,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart tinc service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n            $backend = new Backend();\n            $response = $backend->configdRun("tinc restart");\n            return array("response" => $response);\n        } else {\n            return array("response" => array());\n        }\n    }','\n',char(10)),176,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(761,'getNetwork','GetNetwork',1,'function getNetworkAction($uuid = null)',replace('/**\n     * get network action\n     * @param string $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($uuid == null) {\n            // generate new node, but don''t save to disc\n            $node = $this->getModel()->networks->network->Add();\n            return array("network" => $node->getNodes());\n        } else {\n            $node = $this->getModel()->getNodeByReference(''networks.network.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("network" => $node->getNodes());\n            }\n        }\n        return array();\n    }\n\n    /**\n     * set network action\n     * @param string $uuid item unique id\n     * @return array\n     */\n    public function setNetworkAction($uuid = null)\n    {\n        if ($this->request->isPost() && $this->request->hasPost("network")) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''networks.network.'' . $uuid);\n            } else {\n                $node = $this->getModel()->networks->network->Add();\n            }\n            $node->setNodes($this->request->getPost("network"));\n            if (empty((string)$node->pubkey) || empty((string)$node->privkey)) {\n                // generate new keypair\n                $backend = new Backend();\n                $keys = json_decode(trim($backend->configdRun("tinc gen-key")), true);\n                $node->pubkey = (string)$keys[''pub''];\n                $node->privkey = $keys[''priv''];\n            }\n            return $this->validateAndSave($node, ''network'');\n        }\n        return array("result" => "failed");\n    }\n\n\n    /**\n     * search user defined rules\n     * @return array list of found user rules\n     */\n    public function searchNetworkAction()\n    {\n        $this->sessionClose();\n        $grid = new UIModelGrid($this->getModel()->networks->network);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "name"),\n            "name"\n        );\n    }\n\n    /**\n     * del network action\n     * @param string $uuid item unique id\n     * @return array\n     */\n    public function delNetworkAction($uuid)\n    {\n        $result = array(''result'' => ''failed'');\n        if ($this->request->isPost()) {\n            if ($this->getModel()->networks->network->del($uuid)) {\n                $result = $this->validateAndSave();\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * toggle network item action\n     * @param string $uuid item unique id\n     * @param boolean $enabled\n     * @return array\n     */\n    public function toggleNetworkAction($uuid, $enabled = null)\n    {\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''networks.network.'' . $uuid);\n                if ($node != null) {\n                    if ($enabled == "0" || $enabled == "1") {\n                        $node->enabled = (string)$enabled;\n                    } elseif ((string)$node->enabled == "1") {\n                        $node->enabled = "0";\n                    } else {\n                        $node->enabled = "1";\n                    }\n                    $result[''result''] = $node->enabled;\n                    $this->save();\n                }\n            }\n        }\n        return $result;\n    }\n\n    /**\n     * get host action\n     * @param string $uuid item unique id\n     * @return array\n     */\n    public function getHostAction($uuid = null)\n    {\n        if ($uuid == null) {\n            // generate new node, but don''t save to disc\n            $node = $this->getModel()->hosts->host->Add();\n            return array("host" => $node->getNodes());\n        } else {\n            $node = $this->getModel()->getNodeByReference(''hosts.host.'' . $uuid);\n            if ($node != null) {\n                // return node\n                return array("host" => $node->getNodes());\n            }\n        }\n        return array();\n    }','\n',char(10)),177,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(762,'setHost','SetHost',1,'function setHostAction($uuid = null)',replace('/**\n     * set host action\n     * @param string $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost() && $this->request->hasPost("host")) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''hosts.host.'' . $uuid);\n            } else {\n                $node = $this->getModel()->hosts->host->Add();\n            }\n            $node->setNodes($this->request->getPost("host"));\n            return $this->validateAndSave($node, ''host'');\n        }\n        return array("result" => "failed");\n    }','\n',char(10)),177,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(763,'searchHost','SearchHost',0,'function searchHostAction()',replace('/**\n     * search user defined rules\n     * @return array list of found user rules\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $grid = new UIModelGrid($this->getModel()->hosts->host);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array("enabled", "hostname", ''network''),\n            "name"\n        );\n    }','\n',char(10)),177,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(764,'delHost','DelHost',1,'function delHostAction($uuid)',replace('/**\n     * del host action\n     * @param string $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array(''result'' => ''failed'');\n        if ($this->request->isPost()) {\n            if ($this->getModel()->hosts->host->del($uuid)) {\n                $result = $this->validateAndSave();\n            }\n        }\n        return $result;\n    }','\n',char(10)),177,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(765,'toggleHost','ToggleHost',1,'function toggleHostAction($uuid, $enabled = null)',replace('/**\n     * toggle host item action\n     * @param string $uuid item unique id\n     * @param boolean $enabled\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost()) {\n            if ($uuid != null) {\n                $node = $this->getModel()->getNodeByReference(''hosts.host.'' . $uuid);\n                if ($node != null) {\n                    if ($enabled == "0" || $enabled == "1") {\n                        $node->enabled = (string)$enabled;\n                    } elseif ((string)$node->enabled == "1") {\n                        $node->enabled = "0";\n                    } else {\n                        $node->enabled = "1";\n                    }\n                    $result[''result''] = $node->enabled;\n                    $this->save();\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),177,1,0,NULL,NULL,NULL,NULL,'1.5',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(766,'searchacl','Searchacl',0,'function searchaclAction()','',replace('{\n        return $this->searchBase(''policy'', array(''enabled'', ''type'', ''network'', ''action'', ''startport'', ''endport''));\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(767,'getacl','Getacl',0,'function getaclAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''exitpolicy'', ''policy'', $uuid);\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(768,'addacl','Addacl',0,'function addaclAction()','',replace('{\n        return $this->addBase(''exitpolicy'', ''policy'');\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(769,'delacl','Delacl',0,'function delaclAction($uuid)','',replace('{\n        return $this->delBase(''policy'', $uuid);\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(770,'setacl','Setacl',0,'function setaclAction($uuid)','',replace('{\n        return $this->setBase(''exitpolicy'', ''policy'', $uuid);\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(771,'toggleacl','Toggleacl',0,'function toggleaclAction($uuid)','',replace('{\n        return $this->toggleBase(''policy'', $uuid);\n    }','\n',char(10)),178,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(772,'set','Set',1,'function setAction()','',replace('{\n        $result = array(''result'' => ''failed'');\n        if ($this->request->isPost()) {\n            $mdl = new General();\n            $mdl->setNodes($this->request->getPost(''general''));\n\n            // perform validation\n            $valMsgs = $mdl->performValidation();\n            foreach ($valMsgs as $field => $msg) {\n                if (!array_key_exists(''validations'', $result)) {\n                    $result[''validations''] = array();\n                }\n                $result[''validations''][''general.'' . $msg->getField()] = $msg->getMessage();\n            }\n\n            if ($valMsgs->count() == 0) {\n                if (empty((string)$mdl->control_port_password) || empty((string)$mdl->control_port_password_hashed)) {\n                    $backend = new Backend();\n                    $keys = json_decode(trim($backend->configdRun(''tor genkey'')), true);\n                    $mdl->control_port_password_hashed = $keys[''hashed_control_password''];\n                    $mdl->control_port_password = $keys[''control_password''];\n                }\n                $mdl->serializeToConfig();\n                Config::getInstance()->save();\n                $result[''result''] = ''saved'';\n            }\n        }\n        return $result;\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(773,'searchhidservauth','Searchhidservauth',0,'function searchhidservauthAction()','',replace('{\n        return $this->searchBase(''client_authentications.client_auth'', array(''enabled'', ''onion_service'', ''auth_cookie''));\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(774,'gethidservauth','Gethidservauth',0,'function gethidservauthAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''client_auth'', ''client_authentications.client_auth'', $uuid);\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(775,'addhidservauth','Addhidservauth',0,'function addhidservauthAction()','',replace('{\n        return $this->addBase(''client_auth'', ''client_authentications.client_auth'');\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(776,'delhidservauth','Delhidservauth',0,'function delhidservauthAction($uuid)','',replace('{\n        return $this->delBase(''client_authentications.client_auth'', $uuid);\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(777,'sethidservauth','Sethidservauth',0,'function sethidservauthAction($uuid)','',replace('{\n        return $this->setBase(''client_auth'', ''client_authentications.client_auth'', $uuid);\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(778,'togglehidservauth','Togglehidservauth',0,'function togglehidservauthAction($uuid)','',replace('{\n        return $this->toggleBase(''client_authentications.client_auth'', $uuid);\n    }','\n',char(10)),179,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(779,'searchacl','Searchacl',0,'function searchaclAction()','',replace('{\n        return $this->searchBase(''hiddenserviceacl'', array(''enabled'', ''hiddenservice'', ''port'', ''target_host'', ''target_port''));\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(780,'getacl','Getacl',0,'function getaclAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''hiddenserviceacl'', ''hiddenserviceacl'', $uuid);\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(781,'addacl','Addacl',0,'function addaclAction()','',replace('{\n        return $this->addBase(''hiddenserviceacl'', ''hiddenserviceacl'');\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(782,'delacl','Delacl',0,'function delaclAction($uuid)','',replace('{\n        return $this->delBase(''hiddenserviceacl'', $uuid);\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(783,'setacl','Setacl',0,'function setaclAction($uuid)','',replace('{\n        return $this->setBase(''hiddenserviceacl'', ''hiddenserviceacl'', $uuid);\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(784,'toggleacl','Toggleacl',0,'function toggleaclAction($uuid)','',replace('{\n        return $this->toggleBase(''hiddenserviceacl'', $uuid);\n    }','\n',char(10)),180,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(785,'searchservice','Searchservice',0,'function searchserviceAction()','',replace('{\n        return $this->searchBase(''service'', array(''enabled'', ''name''));\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(786,'getservice','Getservice',0,'function getserviceAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''hiddenservice'', ''service'', $uuid);\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(787,'addservice','Addservice',0,'function addserviceAction()','',replace('{\n        return $this->addBase(''hiddenservice'', ''service'');\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(788,'delservice','Delservice',0,'function delserviceAction($uuid)','',replace('{\n        return $this->delBase(''service'', $uuid);\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(789,'setservice','Setservice',0,'function setserviceAction($uuid)','',replace('{\n        return $this->setBase(''hiddenservice'', ''service'', $uuid);\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(790,'toggleservice','Toggleservice',0,'function toggleserviceAction($uuid)','',replace('{\n        return $this->toggleBase(''service'', $uuid);\n    }','\n',char(10)),181,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(791,'start','Start',1,'function startAction()',replace('/**\n     * start tor service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''tor start'');\n            $backend->configdRun(''filter reload'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(792,'stop','Stop',1,'function stopAction()',replace('/**\n     * stop tor service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''tor stop'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(793,'get_hidden_services','GetHiddenServices',0,'function get_hidden_servicesAction()',replace('/**\n     * query tor hidden service hostnames\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = json_decode($backend->configdRun(''tor gethostnames''));\n        return array(''response'' => $response);\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(794,'restart','Restart',1,'function restartAction()',replace('/**\n     * restart tor service\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $response = $backend->configdRun(''tor restart'');\n            $backend->configdRun(''filter reload'');\n            return array(''response'' => $response);\n        } else {\n            return array(''response'' => array());\n        }\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(795,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of tor\n     * @return array\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $general = new General();\n        $response = $backend->configdRun(''tor status'');\n\n        if (strpos($response, ''not running'') > 0) {\n            if ($general->enabled->__toString() == 1) {\n                $status = ''stopped'';\n            } else {\n                $status = ''disabled'';\n            }\n        } elseif (strpos($response, ''is running'') > 0) {\n            $status = ''running'';\n        } elseif ($general->enabled->__toString() == 0) {\n            $status = ''disabled'';\n        } else {\n            $status = ''unknown'';\n        }\n\n\n        return array(''status'' => $status);\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(796,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure tor, generate config and reload\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            // close session for long running action\n            $this->sessionClose();\n\n            $general = new General();\n            $backend = new Backend();\n\n            $runStatus = $this->statusAction();\n\n            // stop tor if it is running or not\n            $this->stopAction();\n\n            // generate template\n            $backend->configdRun(''template reload OPNsense/Tor'');\n\n            // (re)start daemon\n            if ($general->enabled->__toString() == ''1'') {\n                $this->startAction();\n            }\n\n            return array(''status'' => ''ok'');\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(797,'circuits','Circuits',0,'function circuitsAction()',replace('/**\n     * query tor circuits\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = json_decode($backend->configdRun(''tor circuit''));\n        return array(''response'' => $response);\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(798,'streams','Streams',0,'function streamsAction()',replace('/**\n     * query tor streams\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $response = json_decode($backend->configdRun(''tor streams''));\n        return array(''response'' => $response);\n    }','\n',char(10)),183,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(799,'searchacl','Searchacl',0,'function searchaclAction()','',replace('{\n        return $this->searchBase(''policy'', array(''enabled'', ''type'', ''network'', ''action''));\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(800,'getacl','Getacl',0,'function getaclAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''policy'', ''policy'', $uuid);\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(801,'addacl','Addacl',0,'function addaclAction()','',replace('{\n        return $this->addBase(''policy'', ''policy'');\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(802,'delacl','Delacl',0,'function delaclAction($uuid)','',replace('{\n        return $this->delBase(''policy'', $uuid);\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(803,'setacl','Setacl',0,'function setaclAction($uuid)','',replace('{\n        return $this->setBase(''policy'', ''policy'', $uuid);\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(804,'toggleacl','Toggleacl',0,'function toggleaclAction($uuid)','',replace('{\n        return $this->toggleBase(''policy'', $uuid);\n    }','\n',char(10)),184,1,0,NULL,NULL,NULL,NULL,'1.8',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(805,'download','Download',0,'function downloadAction()','',replace('{\n        $this->response->setStatusCode(200, "OK");\n        $this->response->setContentType(''application/xml'', ''UTF-8'');\n        $this->response->setHeader("Content-Disposition", "attachment; filename=\"config.xml\"");\n        $data = file_get_contents(self::CONFIG_XML);\n        $this->response->setContent($data);\n    }','\n',char(10)),185,1,0,NULL,NULL,NULL,NULL,'1.0',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(806,'upsstatus','Upsstatus',0,'function upsstatusAction()','',replace('{\n        $this->sessionClose();\n        $mdl = new Nut();\n        $host = ''127.0.0.1'';\n        if (!empty((string)$mdl->netclient->address)) {\n            $host = (string)$mdl->netclient->address;\n        }\n        $upsname = ''UPSName'';\n        if (!empty((string)$mdl->general->name)) {\n            $upsname = (string)$mdl->general->name;\n        }\n        $backend = new Backend();\n        $response = $backend->configdpRun(''nut upsstatus'', array("{$upsname}@{$host}"));\n        return array("response" => $response);\n    }','\n',char(10)),190,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(807,'list','List',1,'function listAction()','',replace('{\n        if ($this->request->isPost()) {\n            return array("devices" => $this->getDevices());\n        }\n\n        return array("message" => "Unable to run list action");\n    }','\n',char(10)),193,1,0,NULL,NULL,NULL,NULL,'2.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(808,'info','Info',1,'function infoAction()','',replace('{\n        if ($this->request->isPost()) {\n            $device = $this->request->getPost(''device'');\n            $type   = $this->request->getPost(''type'');\n\n            if (!in_array($device, $this->getDevices())) {\n                return array("message" => "Invalid device name");\n            }\n\n            $valid_info_types = array("i", "H", "c", "A", "a");\n\n            if (!in_array($type, $valid_info_types)) {\n                return array("message" => "Invalid info type");\n            }\n\n            $backend = new Backend();\n\n            $output = $backend->configdpRun("smart", array("info", $type, "/dev/" . $device));\n\n            return array("output" => $output);\n        }\n\n        return array("message" => "Unable to run info action");\n    }','\n',char(10)),193,1,0,NULL,NULL,NULL,NULL,'2.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(809,'logs','Logs',1,'function logsAction()','',replace('{\n        if ($this->request->isPost()) {\n            $device = $this->request->getPost(''device'');\n            $type   = $this->request->getPost(''type'');\n\n            if (!in_array($device, $this->getDevices())) {\n                return array("message" => "Invalid device name");\n            }\n\n            $valid_log_types = array("error", "selftest");\n\n            if (!in_array($type, $valid_log_types)) {\n                return array("message" => "Invalid log type");\n            }\n\n            $backend = new Backend();\n\n            $output = $backend->configdpRun("smart", array("log", $type, "/dev/" . $device));\n\n            return array("output" => $output);\n        }\n\n        return array("message" => "Unable to run logs action");\n    }','\n',char(10)),193,1,0,NULL,NULL,NULL,NULL,'2.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(810,'test','Test',1,'function testAction()','',replace('{\n        if ($this->request->isPost()) {\n            $device = $this->request->getPost(''device'');\n            $type   = $this->request->getPost(''type'');\n\n            if (!in_array($device, $this->getDevices())) {\n                return array("message" => "Invalid device name");\n            }\n\n            $valid_test_types = array("offline", "short", "long", "conveyance");\n\n            if (!in_array($type, $valid_test_types)) {\n                return array("message" => "Invalid test type");\n            }\n\n            $backend = new Backend();\n\n            $output = $backend->configdpRun("smart", array("test", $type, "/dev/" . $device));\n\n            return array("output" => $output);\n        }\n\n        return array("message" => "Unable to run test action");\n    }','\n',char(10)),193,1,0,NULL,NULL,NULL,NULL,'2.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(811,'abort','Abort',1,'function abortAction()','',replace('{\n        if ($this->request->isPost()) {\n            $device = $this->request->getPost(''device'');\n\n            if (!in_array($device, $this->getDevices())) {\n                return array("message" => "Invalid device name");\n            }\n\n            $backend = new Backend();\n\n            $output = $backend->configdpRun("smart", array("abort", "/dev/" . $device));\n\n            return array("output" => $output);\n        }\n\n        return array("message" => "Unable to run abort action");\n    }','\n',char(10)),193,1,0,NULL,NULL,NULL,NULL,'2.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(812,'checkclamav','Checkclamav',0,'function checkclamavAction()',replace('/**\n     * check if ClamAV plugin is installed\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $mdlGeneral = new General();\n        $response = $backend->configdRun("firmware plugin clamav");\n        return $response;\n    }','\n',char(10)),196,1,0,NULL,NULL,NULL,NULL,'1.7',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(813,'searchban','Searchban',0,'function searchbanAction()','',replace('{\n        return $this->searchBase(''ban'', array(''ip'', ''time''));\n    }','\n',char(10)),197,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(814,'delban','Delban',1,'function delbanAction($uuid)','',replace('{\n        if ($this->request->isPost() || $this->request->isDelete()) {\n            $mdl = $this->getModel();\n            $node = $mdl->getNodeByReference(''ban.'' . $uuid);\n            $backend = new Backend();\n            $backend->configdRun(''nginx unlock '' . (string)$node->ip);\n            return $this->delBase(''ban'', $uuid);\n        } else {\n            return array(''result'' => ''most be called via POST'');\n        }\n    }','\n',char(10)),197,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(815,'accesses','Accesses',0,'function accessesAction($uuid = null)',replace('/**\n     * "/" -> list of access logs\n     * "/uuid" -> conent of access log\n     * @param null|string $uuid log uuid of the HTTP server from which the error log should be returned\n     * @return array if feasible, otherwise null and the data is sent directly back\n     * @throws \OPNsense\Base\ModelException ?\n     */','\n',char(10)),replace('{\n        $this->nginx = new Nginx();\n        if (!isset($uuid)) {\n            // emulate REST API -> /accesses delivers a list of servers with access logs\n            return $this->list_vhosts();\n        } else {\n            // emulate REST call for a specific log /accesses/uuid\n            $this->call_configd(''access'', $uuid);\n        }\n    }','\n',char(10)),198,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(816,'tls_handshakes','TlsHandshakes',0,'function tls_handshakesAction()',replace('/**\n     * action to query the TLS handshake information - useful for building fingerprint databases\n     * @throws \Exception\n     */','\n',char(10)),replace('{\n        $this->sendConfigdToClient(''nginx tls_handshakes'');\n    }','\n',char(10)),198,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(817,'errors','Errors',0,'function errorsAction($uuid = null)',replace('/**\n     * "/" -> list of error logs\n     * "/uuid" -> conent of error log\n     * @param null|string $uuid uuid of the HTTP server from which the error log should be returned\n     * @return array if feasible, otherwise null and the data is sent directly back\n     * @throws \OPNsense\Base\ModelException ?\n     */','\n',char(10)),replace('{\n        $this->nginx = new Nginx();\n        if (!isset($uuid)) {\n            // emulate REST API -> /errors delivers a list of servers with error logs\n            return $this->list_vhosts();\n        } else {\n            // emulate REST call for a specific log /errors/uuid\n            $this->call_configd(''error'', $uuid);\n        }\n    }','\n',char(10)),198,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(818,'stream_accesses','StreamAccesses',0,'function stream_accessesAction($uuid = null)',replace('/**\n     * "/" -> list of access logs\n     * "/uuid" -> conent of access log\n     * @param null|string $uuid log uuid of the stream server from which the error log should be returned\n     * @return array if feasible, otherwise null and the data is sent directly back\n     * @throws \OPNsense\Base\ModelException ?\n     */','\n',char(10)),replace('{\n        $this->nginx = new Nginx();\n        if (!isset($uuid)) {\n            // emulate REST API -> /stream_accesses delivers a list of servers with access logs\n            return $this->list_streams();\n        } else {\n            // emulate REST call for a specific log /stream_accesses/uuid\n            $this->call_configd_stream(''streamaccess'', $uuid);\n        }\n    }','\n',char(10)),198,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(819,'stream_errors','StreamErrors',0,'function stream_errorsAction($uuid = null)',replace('/**\n     * "/" -> list of access logs\n     * "/uuid" -> conent of error log\n     * @param null $uuid uuid of the stream server from which the error log should be returned\n     * @return array if feasible, otherwise null and the data is sent directly back\n     * @throws \OPNsense\Base\ModelException ?\n     */','\n',char(10)),replace('{\n        $this->nginx = new Nginx();\n        if (!isset($uuid)) {\n            // emulate REST API -> /stream_errors delivers a list of servers with error logs\n            return $this->list_streams();\n        } else {\n            // emulate REST call for a specific log /stream_errors/uuid\n            $this->call_configd_stream(''streamerror'', $uuid);\n        }\n    }','\n',char(10)),198,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(820,'stop','Stop',0,'function stopAction()',replace('/**\n    *  override parent method - stopping nginx is not allowed because otherwise you would loose\n    *  access to the web interface\n    */','\n',char(10)),replace('{\n        return array(''status'' => ''failed'');\n    }','\n',char(10)),199,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(821,'reconfigure','Reconfigure',1,'function reconfigureAction()',replace('/**\n     * reconfigure with optional stop, generate config and start / reload\n     * @return array response message\n     * @throws \Exception when configd action fails\n     * @throws \ReflectionException when model can''t be instantiated\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $this->sessionClose();\n            $model = $this->getModel();\n            $backend = new Backend();\n            if ($this->reconfigureForceRestart()) {\n                $backend->configdRun(''nginx stop'');\n            }\n            $backend->configdRun(''template reload OPNsense/Nginx'');\n            $runStatus = $this->statusAction();\n            if ($runStatus[''status''] != ''running'') {\n                $backend->configdRun(''nginx start'');\n            } else {\n                $backend->configdRun(''nginx reload'');\n            }\n            return array(''status'' => ''ok'');\n        } else {\n            return array(''status'' => ''failed'');\n        }\n    }','\n',char(10)),199,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(822,'status','Status',0,'function statusAction()',replace('/**\n     * retrieve status of service\n     * @return array response message\n     * @throws \Exception when configd action fails\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $model = $this->getModel();\n        $response = $backend->configdRun(''nginx status'');\n\n        if (strpos($response, ''not running'') > 0) {\n            $status = ''stopped'';\n        } elseif (strpos($response, ''is running'') > 0) {\n            $status = ''running'';\n        } else {\n            $status = ''unknown'';\n        }\n\n        return array(''status'' => $status);\n    }','\n',char(10)),199,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(823,'vts','Vts',0,'function vtsAction()',replace('/**\n     * retrieve extended status of service\n     * @return array response message\n     * @throws \Exception when configd action fails\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n        $vts = json_decode($backend->configdRun(''nginx vts''), true);\n        if ($vts != null) {\n            return $vts;\n        }\n\n        $this->response->setStatusCode(404, "Not Found");\n        return array();\n    }','\n',char(10)),199,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(824,'downloadrules','Downloadrules',0,'function downloadrulesAction()','',replace('{\n        if (!$this->request->isPost()) {\n            return array(''error'' => ''Must be called via POST'');\n        }\n        $backend = new Backend();\n        return array(''result'' => trim($backend->configdRun(''nginx naxsidownloadrules'')));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(825,'searchuserlist','Searchuserlist',0,'function searchuserlistAction()','',replace('{\n        return $this->searchBase(''userlist'', array(''name'', ''users''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(826,'getuserlist','Getuserlist',0,'function getuserlistAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''userlist'', ''userlist'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(827,'adduserlist','Adduserlist',0,'function adduserlistAction()','',replace('{\n        return $this->addBase(''userlist'', ''userlist'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(828,'deluserlist','Deluserlist',0,'function deluserlistAction($uuid)','',replace('{\n        return $this->delBase(''userlist'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(829,'setuserlist','Setuserlist',0,'function setuserlistAction($uuid)','',replace('{\n        return $this->setBase(''userlist'', ''userlist'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(830,'searchcredential','Searchcredential',0,'function searchcredentialAction()','',replace('{\n        return $this->searchBase(''credential'', array(''username''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(831,'getcredential','Getcredential',0,'function getcredentialAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''credential'', ''credential'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(832,'addcredential','Addcredential',0,'function addcredentialAction()','',replace('{\n        return $this->addBase(''credential'', ''credential'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(833,'delcredential','Delcredential',0,'function delcredentialAction($uuid)','',replace('{\n        return $this->delBase(''credential'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(834,'setcredential','Setcredential',0,'function setcredentialAction($uuid)','',replace('{\n        return $this->setBase(''credential'', ''credential'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(835,'searchupstream','Searchupstream',0,'function searchupstreamAction()','',replace('{\n        return $this->searchBase(''upstream'', array(''description'', ''serverentries''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(836,'getupstream','Getupstream',0,'function getupstreamAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''upstream'', ''upstream'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(837,'addupstream','Addupstream',0,'function addupstreamAction()','',replace('{\n        return $this->addBase(''upstream'', ''upstream'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(838,'delupstream','Delupstream',0,'function delupstreamAction($uuid)','',replace('{\n        return $this->delBase(''upstream'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(839,'setupstream','Setupstream',0,'function setupstreamAction($uuid)','',replace('{\n        return $this->setBase(''upstream'', ''upstream'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(840,'searchupstreamserver','Searchupstreamserver',0,'function searchupstreamserverAction()','',replace('{\n        return $this->searchBase(''upstream_server'', array(''description'', ''server'', ''port'', ''priority''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(841,'getupstreamserver','Getupstreamserver',0,'function getupstreamserverAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''upstream_server'', ''upstream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(842,'addupstreamserver','Addupstreamserver',0,'function addupstreamserverAction()','',replace('{\n        return $this->addBase(''upstream_server'', ''upstream_server'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(843,'delupstreamserver','Delupstreamserver',0,'function delupstreamserverAction($uuid)','',replace('{\n        return $this->delBase(''upstream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(844,'setupstreamserver','Setupstreamserver',0,'function setupstreamserverAction($uuid)','',replace('{\n        return $this->setBase(''upstream_server'', ''upstream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(845,'searchlocation','Searchlocation',0,'function searchlocationAction()','',replace('{\n        return $this->searchBase(''location'', array(''description'',''urlpattern'', ''path_prefix'', ''matchtype'', ''enable_secrules'', ''force_https''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(846,'getlocation','Getlocation',0,'function getlocationAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''location'', ''location'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(847,'addlocation','Addlocation',0,'function addlocationAction()','',replace('{\n        return $this->addBase(''location'', ''location'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(848,'dellocation','Dellocation',0,'function dellocationAction($uuid)','',replace('{\n        return $this->delBase(''location'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(849,'setlocation','Setlocation',0,'function setlocationAction($uuid)','',replace('{\n        return $this->setBase(''location'', ''location'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(850,'searchcustompolicy','Searchcustompolicy',0,'function searchcustompolicyAction()','',replace('{\n        return $this->searchBase(''custom_policy'', array(''name'', ''operator'', ''value'', ''action''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(851,'getcustompolicy','Getcustompolicy',0,'function getcustompolicyAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''custompolicy'', ''custom_policy'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(852,'addcustompolicy','Addcustompolicy',0,'function addcustompolicyAction()','',replace('{\n        return $this->addBase(''custompolicy'', ''custom_policy'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(853,'delcustompolicy','Delcustompolicy',0,'function delcustompolicyAction($uuid)','',replace('{\n        return $this->delBase(''custom_policy'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(854,'setcustompolicy','Setcustompolicy',0,'function setcustompolicyAction($uuid)','',replace('{\n        return $this->setBase(''custompolicy'', ''custom_policy'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(855,'searchhttpserver','Searchhttpserver',0,'function searchhttpserverAction()','',replace('{\n        return $this->searchBase(''http_server'', array(''servername'', ''https_only'', ''certificate'', ''listen_http_port'', ''listen_https_port''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(856,'gethttpserver','Gethttpserver',0,'function gethttpserverAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''httpserver'', ''http_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(857,'addhttpserver','Addhttpserver',0,'function addhttpserverAction()','',replace('{\n        return $this->addBase(''httpserver'', ''http_server'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(858,'delhttpserver','Delhttpserver',0,'function delhttpserverAction($uuid)','',replace('{\n        return $this->delBase(''http_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(859,'sethttpserver','Sethttpserver',0,'function sethttpserverAction($uuid)','',replace('{\n        return $this->setBase(''httpserver'', ''http_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(860,'searchstreamserver','Searchstreamserver',0,'function searchstreamserverAction()','',replace('{\n        return $this->searchBase(''stream_server'', array(''description'', ''certificate'', ''udp'', ''listen_port''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(861,'getstreamserver','Getstreamserver',0,'function getstreamserverAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''streamserver'', ''stream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(862,'addstreamserver','Addstreamserver',0,'function addstreamserverAction()','',replace('{\n        return $this->addBase(''streamserver'', ''stream_server'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(863,'delstreamserver','Delstreamserver',0,'function delstreamserverAction($uuid)','',replace('{\n        return $this->delBase(''stream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(864,'setstreamserver','Setstreamserver',0,'function setstreamserverAction($uuid)','',replace('{\n        return $this->setBase(''streamserver'', ''stream_server'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(865,'searchnaxsirule','Searchnaxsirule',0,'function searchnaxsiruleAction()','',replace('{\n        return $this->searchBase(''naxsi_rule'', array(''description'', ''identifier'', ''ruletype'', ''message''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(866,'getnaxsirule','Getnaxsirule',0,'function getnaxsiruleAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''naxsi_rule'', ''naxsi_rule'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(867,'addnaxsirule','Addnaxsirule',0,'function addnaxsiruleAction()','',replace('{\n        return $this->addBase(''naxsi_rule'', ''naxsi_rule'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(868,'delnaxsirule','Delnaxsirule',0,'function delnaxsiruleAction($uuid)','',replace('{\n        return $this->delBase(''naxsi_rule'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(869,'setnaxsirule','Setnaxsirule',0,'function setnaxsiruleAction($uuid)','',replace('{\n        return $this->setBase(''naxsi_rule'', ''naxsi_rule'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(870,'searchhttprewrite','Searchhttprewrite',0,'function searchhttprewriteAction()','',replace('{\n        return $this->searchBase(''http_rewrite'', array(''description'', ''source'', ''destination'', ''flag''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(871,'gethttprewrite','Gethttprewrite',0,'function gethttprewriteAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''httprewrite'', ''http_rewrite'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(872,'addhttprewrite','Addhttprewrite',0,'function addhttprewriteAction()','',replace('{\n        return $this->addBase(''httprewrite'', ''http_rewrite'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(873,'delhttprewrite','Delhttprewrite',0,'function delhttprewriteAction($uuid)','',replace('{\n        return $this->delBase(''http_rewrite'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(874,'sethttprewrite','Sethttprewrite',0,'function sethttprewriteAction($uuid)','',replace('{\n        return $this->setBase(''httprewrite'', ''http_rewrite'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(875,'searchsecurity_header','SearchsecurityHeader',0,'function searchsecurity_headerAction()','',replace('{\n        return $this->searchBase(''security_header'', array(''description''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(876,'getsecurity_header','GetsecurityHeader',0,'function getsecurity_headerAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''security_header'', ''security_header'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(877,'addsecurity_header','AddsecurityHeader',0,'function addsecurity_headerAction()','',replace('{\n        return $this->addBase(''security_header'', ''security_header'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(878,'delsecurity_header','DelsecurityHeader',0,'function delsecurity_headerAction($uuid)','',replace('{\n        return $this->delBase(''security_header'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(879,'setsecurity_header','SetsecurityHeader',0,'function setsecurity_headerAction($uuid)','',replace('{\n        return $this->setBase(''security_header'', ''security_header'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(880,'searchlimit_zone','SearchlimitZone',0,'function searchlimit_zoneAction()','',replace('{\n        return $this->searchBase(\n            ''limit_zone'',\n            array(''description'', ''key'', ''size'', ''rate'', ''rate_unit'')\n        );\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(881,'getlimit_zone','GetlimitZone',0,'function getlimit_zoneAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''limit_zone'', ''limit_zone'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(882,'addlimit_zone','AddlimitZone',0,'function addlimit_zoneAction()','',replace('{\n        return $this->addBase(''limit_zone'', ''limit_zone'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(883,'dellimit_zone','DellimitZone',0,'function dellimit_zoneAction($uuid)','',replace('{\n        return $this->delBase(''limit_zone'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(884,'setlimit_zone','SetlimitZone',0,'function setlimit_zoneAction($uuid)','',replace('{\n        return $this->setBase(''limit_zone'', ''limit_zone'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(885,'searchtls_fingerprint','SearchtlsFingerprint',0,'function searchtls_fingerprintAction()','',replace('{\n        return $this->searchBase(''tls_fingerprint'', array(''description''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(886,'gettls_fingerprint','GettlsFingerprint',0,'function gettls_fingerprintAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''tls_fingerprint'', ''tls_fingerprint'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(887,'addtls_fingerprint','AddtlsFingerprint',0,'function addtls_fingerprintAction()','',replace('{\n        return $this->addBase(''tls_fingerprint'', ''tls_fingerprint'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(888,'deltls_fingerprint','DeltlsFingerprint',0,'function deltls_fingerprintAction($uuid)','',replace('{\n        return $this->delBase(''tls_fingerprint'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(889,'settls_fingerprint','SettlsFingerprint',0,'function settls_fingerprintAction($uuid)','',replace('{\n        return $this->setBase(''tls_fingerprint'', ''tls_fingerprint'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(890,'searchlimit_request_connection','SearchlimitRequestConnection',0,'function searchlimit_request_connectionAction()','',replace('{\n        return $this->searchBase(\n            ''limit_request_connection'',\n            array(''description'', ''limit_zone'', ''nodelay'', ''burst'', ''connection_count'')\n        );\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(891,'getlimit_request_connection','GetlimitRequestConnection',0,'function getlimit_request_connectionAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''limit_request_connection'', ''limit_request_connection'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(892,'addlimit_request_connection','AddlimitRequestConnection',0,'function addlimit_request_connectionAction()','',replace('{\n        return $this->addBase(''limit_request_connection'', ''limit_request_connection'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(893,'dellimit_request_connection','DellimitRequestConnection',0,'function dellimit_request_connectionAction($uuid)','',replace('{\n        return $this->delBase(''limit_request_connection'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(894,'setlimit_request_connection','SetlimitRequestConnection',0,'function setlimit_request_connectionAction($uuid)','',replace('{\n        return $this->setBase(''limit_request_connection'', ''limit_request_connection'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(895,'searchcache_path','SearchcachePath',0,'function searchcache_pathAction()','',replace('{\n        return $this->searchBase(\n            ''cache_path'',\n            array(''path'', ''inactive'', ''size'', ''max_size'')\n        );\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(896,'getcache_path','GetcachePath',0,'function getcache_pathAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''cache_path'', ''cache_path'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(897,'addcache_path','AddcachePath',0,'function addcache_pathAction()','',replace('{\n        return $this->addBase(''cache_path'', ''cache_path'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(898,'delcache_path','DelcachePath',0,'function delcache_pathAction($uuid)','',replace('{\n        return $this->delBase(''cache_path'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(899,'setcache_path','SetcachePath',0,'function setcache_pathAction($uuid)','',replace('{\n        return $this->setBase(''cache_path'', ''cache_path'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(900,'searchsnifwd','Searchsnifwd',0,'function searchsnifwdAction()','',replace('{\n        return $this->searchBase(''sni_hostname_upstream_map'', array(''description''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(901,'getsnifwd','Getsnifwd',0,'function getsnifwdAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        $base = $this->getBase(''snihostname'', ''sni_hostname_upstream_map'', $uuid);\n        return $this->convert_sni_fwd_for_client($base);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(902,'addsnifwd','Addsnifwd',1,'function addsnifwdAction()','',replace('{\n        if ($this->request->isPost()) {\n            $this->regenerate_hostname_map(null);\n            return $this->addBase(''snihostname'', ''sni_hostname_upstream_map'');\n        }\n        return [];\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(903,'delsnifwd','Delsnifwd',0,'function delsnifwdAction($uuid)','',replace('{\n        $nginx = $this->getModel();\n        $uuid_attached = $nginx->find_sni_hostname_upstream_map_entry_uuids($uuid);\n\n        $ret = $this->delBase(''sni_hostname_upstream_map'', $uuid);\n        if ($ret[''result''] == ''deleted'') {\n            foreach ($uuid_attached as $old_uuid) {\n                $this->delBase(''sni_hostname_upstream_map_item'', $old_uuid);\n            }\n        }\n        return $ret;\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(904,'setsnifwd','Setsnifwd',1,'function setsnifwdAction($uuid)','',replace('{\n        if ($this->request->isPost()) {\n            $this->regenerate_hostname_map($uuid);\n            return $this->setBase(''snihostname'', ''sni_hostname_upstream_map'', $uuid);\n        }\n        return [];\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(905,'searchipacl','Searchipacl',0,'function searchipaclAction()','',replace('{\n        return $this->searchBase(''ip_acl'', array(''description''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(906,'getipacl','Getipacl',0,'function getipaclAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        $base = $this->getBase(''ipacl'', ''ip_acl'', $uuid);\n        return $this->convert_ipacl_for_client($base);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(907,'addipacl','Addipacl',1,'function addipaclAction()','',replace('{\n        if ($this->request->isPost()) {\n            $this->regenerate_ipacl(null);\n            return $this->addBase(''ipacl'', ''ip_acl'');\n        }\n        return [];\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(908,'delipacl','Delipacl',0,'function delipaclAction($uuid)','',replace('{\n        $nginx = $this->getModel();\n        $uuid_attached = $nginx->find_ip_acl_uuids($uuid);\n\n        $ret = $this->delBase(''ip_acl'', $uuid);\n        if ($ret[''result''] == ''deleted'') {\n            foreach ($uuid_attached as $old_uuid) {\n                $this->delBase(''ip_acl_item'', $old_uuid);\n            }\n        }\n        return $ret;\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(909,'setipacl','Setipacl',1,'function setipaclAction($uuid)','',replace('{\n        if ($this->request->isPost()) {\n            $this->regenerate_ipacl($uuid);\n            return $this->setBase(''ipacl'', ''ip_acl'', $uuid);\n        }\n        return [];\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(910,'searchsyslog_target','SearchsyslogTarget',0,'function searchsyslog_targetAction()','',replace('{\n        return $this->searchBase(''syslog_target'', array(''description'', ''host'', ''facility'', ''severity''));\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(911,'getsyslog_target','GetsyslogTarget',0,'function getsyslog_targetAction($uuid = null)','',replace('{\n        $this->sessionClose();\n        return $this->getBase(''syslog_target'', ''syslog_target'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(912,'addsyslog_target','AddsyslogTarget',0,'function addsyslog_targetAction()','',replace('{\n        return $this->addBase(''syslog_target'', ''syslog_target'');\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(913,'delsyslog_target','DelsyslogTarget',0,'function delsyslog_targetAction($uuid)','',replace('{\n        return $this->delBase(''syslog_target'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(914,'setsyslog_target','SetsyslogTarget',0,'function setsyslog_targetAction($uuid)','',replace('{\n        return $this->setBase(''syslog_target'', ''syslog_target'', $uuid);\n    }','\n',char(10)),200,1,0,NULL,NULL,NULL,NULL,'1.19',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(915,'showkeytab','Showkeytab',0,'function showkeytabAction()',replace('/**\n     * show Kerberos keytab for Proxy\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n\n        $response = $backend->configdRun("proxysso showkeytab");\n        return array("response" => $response,"status" => "ok");\n    }','\n',char(10)),201,1,0,NULL,NULL,NULL,NULL,'2.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(916,'deletekeytab','Deletekeytab',0,'function deletekeytabAction()',replace('/**\n     * delete Kerberos keytab for Proxy\n     * @return array\n     */','\n',char(10)),replace('{\n        $backend = new Backend();\n\n        $response = $backend->configdRun("proxysso deletekeytab");\n        return array("response" => $response,"status" => "ok");\n    }','\n',char(10)),201,1,0,NULL,NULL,NULL,NULL,'2.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(917,'createkeytab','Createkeytab',1,'function createkeytabAction()',replace('/**\n     * create Kerberos keytab for Proxy\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $mdl = new ProxySSO();\n            $cnf = Config::getInstance()->object();\n            $hostname = ''HTTP/'' . $cnf->system->hostname;\n            $domain = $cnf->system->domain;\n            $kerbname = strtoupper((string)$mdl->KerberosHostName);\n            $winver = (string)$mdl->ADKerberosImplementation == ''W2008'' ? ''2008'' : ''2003'';\n            $username = escapeshellarg($this->request->getPost("admin_login"));\n            $pass = escapeshellarg($this->request->getPost("admin_password"));\n\n            $response = $backend->configdRun("proxysso createkeytab {$hostname} {$domain} {$kerbname} {$winver} {$username} {$pass}");\n            parent::reconfigureAction();\n            return array("response" => $response,"status" => "ok");\n        }\n\n        return array("response" => array());\n    }','\n',char(10)),201,1,0,NULL,NULL,NULL,NULL,'2.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(918,'testkerblogin','Testkerblogin',1,'function testkerbloginAction()',replace('/**\n     * test Kerberos login\n     * @return array\n     */','\n',char(10)),replace('{\n        if ($this->request->isPost()) {\n            $backend = new Backend();\n            $cnf = Config::getInstance()->object();\n            $fqdn = $cnf->system->hostname . ''.'' . $cnf->system->domain;\n            $username = escapeshellarg($this->request->getPost("login"));\n            $pass = escapeshellarg($this->request->getPost("password"));\n\n            $response = $backend->configdRun("proxysso testkerblogin {$username} {$pass} {$fqdn}");\n            return array("response" => $response,"status" => "ok");\n        }\n\n        return array("response" => array());\n    }','\n',char(10)),201,1,0,NULL,NULL,NULL,NULL,'2.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(919,'getCheckList','GetCheckList',0,'function getCheckListAction()',replace('/**\n     * get checklist data\n     * @return array\n     */','\n',char(10)),replace('{\012        $backend = new Backend();\012        $cnf = Config::getInstance()->object();\012        $hostname = $cnf->system->hostname . ''.'' . $cnf->system->domain;\012\012        // LDAP\012        $methods = explode('','', $cnf->OPNsense->proxy->forward->authentication->method);\012        foreach ($methods as $method) {\012            $xpath = $cnf->xpath("//system/authserver[name=\"$method\" and type=\"ldap\"]");\012            if (count($xpath)) {\012                $ldap_server = $xpath[0];\012                break;\012            }\012        }\012        $ldap_ip = null;\012        $ldap_fqdn = null;\012        $ldap_server_ping = [ "status" => "failure"];\012        if (isset($ldap_server) && !empty($ldap_server->host)) {\012            if (filter_var($ldap_server->host, FILTER_VALIDATE_IP)) {\012                $ldap_ip = $ldap_server->host;\012            } else {\012                $ldap_fqdn = $ldap_server->host;\012            }\012\012            $host_esc = escapeshellarg("{$ldap_server->host}");\012            $output = array("# ping -c 1 -W 1 {$host_esc}");\012            $retval = 0;\012            exec("ping -c 1 -W 1 {$host_esc}", $output, $retval);\012            $ldap_server_ping = [ "status" => $retval == 0 ? "ok" : "failure"];\012            $ldap_server_ping["dump"] = implode("\n", $output);\012        }\012\012        // DNS\012        $dns_server = array();\012        $nameservers = preg_grep(''/^nameserver/'', file(''/etc/resolv.conf''));\012        $dns_servers = array();\012        foreach ($nameservers as $key => $record) {\012            $parts = explode('' '', $record);\012            $dns_servers[] = trim($parts[1]);\012        }\012        $dns_server = [ "status" => count($dns_servers) ? "ok" : "failure"];\012        if (!count($dns_servers)) {\012            $dns_server["message"] = gettext("DNS server not found");\012        }\012        $output = "# cat /etc/resolv.conf\n";\012        $output .= file_get_contents(''/etc/resolv.conf'');\012        $dns_server["dump"] = $output;\012\012        // DNS: hostname\012        $resolv_direct = chop(shell_exec("drill {$hostname} | grep -A 1 ''ANSWER SECTION'' | tail -n 1 | awk ''{print \$5}''"));\012        $dns_hostname_resolution = [ "status" => !empty($resolv_direct) && filter_var($resolv_direct, FILTER_VALIDATE_IP) ? "ok" : "failure"];\012        $output = array("# drill {$hostname}");\012        exec("drill {$hostname}", $output);\012        $dns_hostname_resolution["dump"] = implode("\n", $output);\012\012        $resolv_reverse = null;\012        $dns_hostname_reverse_resolution = array();\012        $output = array();\012        if (!empty($resolv_direct) && filter_var($resolv_direct, FILTER_VALIDATE_IP)) {\012            $output[] = "# drill -x {$resolv_direct}";\012            exec("drill -x {$resolv_direct}", $output);\012            $resolv_reverse = chop(shell_exec("drill -x {$resolv_direct} | grep -A 1 ''ANSWER SECTION'' | tail -n 1 | awk ''{print \$5}''"));\012            if (strtolower($resolv_reverse) != strtolower("{$hostname}.")) {\012                $dns_hostname_reverse_resolution["message"] = gettext("Hostname doesn''t resolved to host IP.");\012            }\012        } else {\012            $dns_hostname_reverse_resolution["message"] = gettext("Hostname doesn''t resolved to IP.");\012        }\012        $dns_hostname_reverse_resolution["status"] = strtolower($resolv_reverse) == strtolower("{$hostname}.") ? "ok" : "failure";\012        $dns_hostname_reverse_resolution["dump"] = implode("\n", $output);\012\012\012        // DNS: LDAP server\012        ldap_dns:\012        $dns_ldap_reverse_resolution = array( "status" => "failure" );\012        if (empty($ldap_ip)) {\012            $dns_ldap_reverse_resolution["message"] = gettext("Unknown LDAP server IP.");\012        } else {\012            $ldap_ip_esc = escapeshellarg($ldap_ip);\012            $resolv_reverse = chop(shell_exec("drill -x {$ldap_ip_esc} | grep -A 1 ''ANSWER SECTION'' | tail -n 1 | awk ''{print \$5}''"));\012            if (empty($resolv_reverse)) {\012                $dns_ldap_reverse_resolution["message"] = gettext(''LDAP server IP reverse lookup error. '');\012            } elseif (!empty($ldap_fqdn) && $resolv_reverse != "{$ldap_fqdn}.") {\012                $dns_ldap_reverse_resolution["message"] = gettext(''LDAP server reverse DNS lookup is not equal to LDAP server FQDN. '');\012            } else {\012                $dns_ldap_reverse_resolution["status"] = "ok";\012                $ldap_fqdn = substr($resolv_reverse, 0, strlen($resolv_reverse) - 1);\012            }\012            $output = array("# drill -x {$ldap_ip_esc}");\012            exec("drill -x {$ldap_ip_esc}", $output);\012            $dns_ldap_reverse_resolution["dump"] = implode("\n", $output);\012        }\012\012        $dns_ldap_resolution = array( "status" => "failure" );\012        if (empty($ldap_fqdn)) {\012            $dns_ldap_resolution["message"] = gettext(''Unknown LDAP server FQDN.'');\012        } else {\012            $ldap_fqdn_esc = escapeshellarg($ldap_fqdn);\012            $resolv = chop(shell_exec("drill {$ldap_fqdn_esc} | grep -A 1 ''ANSWER SECTION'' | tail -n 1 | awk ''{print \$5}''"));\012            if (empty($resolv)) {\012                $dns_ldap_resolution["message"] = gettext(''LDAP server DNS lookup error. '');\012            } elseif (!empty($ldap_ip) && $resolv != $ldap_ip) {\012                $dns_ldap_resolution["message"] = gettext(''LDAP server DNS lookup is not equal to LDAP IP. '');\012            } else {\012                $dns_ldap_resolution["status"] = "ok";\012                if (empty($ldap_ip)) {\012                    $ldap_ip = $resolv;\012                    goto ldap_dns;\012                }\012            }\012            $output = array("# drill {$ldap_fqdn_esc}");\012            exec("drill {$ldap_fqdn_esc}", $output);\012            $dns_ldap_resolution["dump"] = implode("\n", $output);\012        }\012\012\012        // KERBEROS\012        $krb5_conf = ''/etc/krb5.conf'';\012        $kerberos_config = array();\012        $kerberos_config["status"] = "failure";\012        if (!file_exists($krb5_conf)) {\012            $kerberos_config["message"] = sprintf(gettext(''File %s does not exists.''), $krb5_conf);\012        } else {\012            $domainstr = preg_quote($cnf->system->domain);\012            $config_valid = preg_grep("/$domainstr/", file($krb5_conf));\012            $kerberos_config["status"] = file_exists($krb5_conf) && !empty($config_valid) ? "ok" : "failure";\012            if (empty($config_valid)) {\012                $kerberos_config["message"] = gettext(''SSO is not enabled or kerberos configuration file has invalid content'');\012            }\012            $output = "# cat $krb5_conf\n";\012            $output .= file_get_contents($krb5_conf);\012            $kerberos_config["dump"] = $output;\012        }\012\012        $keytab_file = ''/usr/local/etc/squid/squid.keytab'';\012        $keytab = array();\012        $keytab["status"] = file_exists($keytab_file) ? "ok" : "failure";\012        if (!file_exists($keytab_file)) {\012            $keytab["message"] = sprintf(gettext(''File %s does not exists.''), $keytab_file);\012        }\012        $keytab["dump"] = $backend->configdRun("proxysso showkeytab");\012\012\012        // and two more DNS check\012        if (!empty($ldap_ip) && !in_array($ldap_ip, $dns_servers)) {\012            $dns_server["status"] = "failure";\012            $dns_server["message"] = gettext("LDAP server is not in DNS servers list.");\012        } elseif (in_array("127.0.0.1", $dns_servers) || in_array("::1", $dns_servers)) {\012            $dns_server["status"] = "failure";\012            $dns_server["message"] = gettext("Do not set localhost as DNS server.");\012        }\012\012\012        return  [\012                    "hostname" => $hostname,\012                    "ldap_server_config" => isset($ldap_server) ? $ldap_server->name->__toString() : array("status" => "failure", "message" => gettext("LDAP server is not set in Web Proxy - Authentication Settings")),\012                    "ldap_server" => isset($ldap_server) ? $ldap_server->host->__toString() : "",\012                    "ldap_server_ping" => $ldap_server_ping,\012                    "dns_server" => $dns_server,\012                    "dns_hostname_resolution" => $dns_hostname_resolution,\012                    "dns_hostname_reverse_resolution" => $dns_hostname_reverse_resolution,\012                    "dns_ldap_resolution" => $dns_ldap_resolution,\012                    "dns_ldap_reverse_resolution" => $dns_ldap_reverse_resolution,\012                    "kerberos_config" => $kerberos_config,\012                    "keytab" => $keytab,\012                ];\012    }','\012',char(10)),201,1,0,NULL,NULL,NULL,NULL,'2.2',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(920,'searchACL','SearchAcl',0,'function searchACLAction()',replace('/**\n     *\n     * search ACL\n     * @return array\n     */','\n',char(10)),replace('{\n        $this->sessionClose();\n        $mdlProxyUserACL = $this->getModel();\n        $grid = new UIModelGrid($mdlProxyUserACL->general->ACLs->ACL);\n        return $grid->fetchBindRequest(\n            $this->request,\n            array(''Group'', ''Name'', ''Domains'', ''Black'', ''Priority'', ''uuid''),\n            ''Priority''\n        );\n    }','\n',char(10)),203,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(921,'addACL','AddAcl',1,'function addACLAction()',replace('/**\n     *\n     * add ACL\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("ACL")) {\n            $result = array("result" => "failed", "validations" => array());\n            $mdlProxyUserACL = $this->getModel();\n            $post = $this->request->getPost("ACL");\n            $post["Hex"] = $this->strToHex($post["Name"]);\n\n            $count = count($mdlProxyUserACL->general->ACLs->ACL->getNodes());\n            if ($post["Priority"] > $count) {\n                $post["Priority"] = $count;\n            }\n            foreach ($mdlProxyUserACL->general->ACLs->ACL->sortedBy("Priority", true) as $acl) {\n                $key = $acl->getAttributes()["uuid"];\n                $priority = (string)$mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority;\n                if ($priority < $post["Priority"]) {\n                    break;\n                }\n                $mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority = (string)($priority + 1);\n            }\n            $node = $mdlProxyUserACL->general->ACLs->ACL->Add();\n            $node->setNodes($post);\n            $find = $this->checkName($post["Name"], $post["Group"]);\n            if ($find !== true) {\n                $result["validations"]["ACL.Name"] = $find;\n            }\n            $valMsgs = $mdlProxyUserACL->performValidation();\n\n            foreach ($valMsgs as $field => $msg) {\n                $fieldnm = str_replace($node->__reference, "ACL", $msg->getField());\n                $result["validations"][$fieldnm] = $msg->getMessage();\n            }\n\n            if (count($result[''validations'']) <= 0) {\n                // save config if validated correctly\n                $mdlProxyUserACL->serializeToConfig();\n                Config::getInstance()->save();\n                return array("result" => "saved");\n            }\n            return $result;\n        }\n        return $result;\n    }','\n',char(10)),203,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(922,'setACL','SetAcl',1,'function setACLAction($uuid)',replace('/**\n     *\n     * set ACL\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $this->request->hasPost("ACL")) {\n            $mdlProxyUserACL = $this->getModel();\n            if ($uuid != null) {\n                $node = $mdlProxyUserACL->getNodeByReference(''general.ACLs.ACL.'' . $uuid);\n                if ($node != null) {\n                    $result = array("result" => "failed", "validations" => array());\n                    $ACLInfo = $this->request->getPost("ACL");\n                    $ACLInfo["Hex"] = $this->strToHex($ACLInfo["Name"]);\n                    $old_priority = (string)$node->Priority;\n                    $new_priority = $ACLInfo["Priority"];\n\n                    if ($new_priority < $old_priority) {\n                        if ($new_priority < 0) {\n                            $new_priority = 0;\n                        }\n\n                        foreach ($mdlProxyUserACL->general->ACLs->ACL->sortedBy("Priority", true) as $acl) {\n                            $key = $acl->getAttributes()["uuid"];\n                            $priority = (string)$mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority;\n                            if ($priority < $new_priority) {\n                                break;\n                            }\n                            if ($priority >= $old_priority) {\n                                continue;\n                            }\n                            $mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority = (string)($priority + 1);\n                        }\n                    } elseif (($new_priority > $old_priority)) {\n                        $count = count($mdlProxyUserACL->general->ACLs->ACL->getNodes());\n                        if ($new_priority >= $count) {\n                            $new_priority = $count - 1;\n                            $ACLInfo["Priority"] = $new_priority;\n                        }\n                        foreach ($mdlProxyUserACL->general->ACLs->ACL->sortedBy("Priority") as $acl) {\n                            $key = $acl->getAttributes()["uuid"];\n                            $priority = (string)$mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority;\n                            if ($priority > $new_priority) {\n                                break;\n                            }\n                            if ($priority <= $old_priority) {\n                                continue;\n                            }\n                            $mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority = (string)($priority - 1);\n                        }\n                    }\n                    $node->setNodes($ACLInfo);\n                    $find = $this->checkName($ACLInfo["Name"], $ACLInfo["Group"]);\n                    if ($find !== true) {\n                        $result["validations"]["ACL.Name"] = $find;\n                    }\n                    $valMsgs = $mdlProxyUserACL->performValidation();\n                    foreach ($valMsgs as $field => $msg) {\n                        $fieldnm = str_replace($node->__reference, "ACL", $msg->getField());\n                        $result["validations"][$fieldnm] = $msg->getMessage();\n                    }\n\n                    if (count($result[''validations'']) > 0) {\n                        return $result;\n                    }\n\n                    // save config if validated correctly\n                    $mdlProxyUserACL->serializeToConfig();\n                    Config::getInstance()->save();\n                    return array("result" => "saved");\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),203,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(923,'delACL','DelAcl',1,'function delACLAction($uuid)',replace('/**\n     *\n     * del ACL\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $uuid != null) {\n            $mdlProxyUserACL = $this->getModel();\n            if ($mdlProxyUserACL->general->ACLs->ACL->del($uuid)) {\n                // if item is removed, serialize to config and save\n                $this->repackPriority();\n                $mdlProxyUserACL->serializeToConfig();\n                Config::getInstance()->save();\n                $result[''result''] = ''deleted'';\n            } else {\n                $result[''result''] = ''not found'';\n            }\n        }\n\n        return $result;\n    }','\n',char(10)),203,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
INSERT INTO ApiCommands VALUES(924,'updownACL','UpdownAcl',1,'function updownACLAction($uuid)',replace('/**\n     *\n     * Change ACL priority\n     * @param $uuid item unique id\n     * @return array\n     */','\n',char(10)),replace('{\n        $result = array("result" => "failed");\n        if ($this->request->isPost() && $uuid != null && $this->request->hasPost("command")) {\n            $mdlProxyUserACL = $this->getModel();\n            $count = $this->repackPriority();\n            $nodes = $mdlProxyUserACL->general->ACLs->ACL->getNodes();\n            $acl = $nodes[$uuid];\n            $priority = $acl["Priority"];\n            switch ($this->request->getPost("command")) {\n                case "up":\n                    $new_priority = $priority - 1;\n                    if ($new_priority < 0) {\n                        return array("result" => "success");\n                    }\n                    break;\n\n                case "down":\n                    $new_priority = $priority + 1;\n                    if ($new_priority >= $count) {\n                        return array("result" => "success");\n                    }\n                    break;\n\n                default:\n                    return array("result" => "failed");\n            }\n            foreach ($nodes as $key => $node) {\n                if ($node["Priority"] == $new_priority) {\n                    $mdlProxyUserACL->general->ACLs->ACL->{$key}->Priority = (string)$priority;\n                    $mdlProxyUserACL->general->ACLs->ACL->{$uuid}->Priority = (string)$new_priority;\n                    $mdlProxyUserACL->serializeToConfig();\n                    Config::getInstance()->save();\n                    return array(''result'' => ''success'');\n                }\n            }\n        }\n        return $result;\n    }','\n',char(10)),203,1,0,NULL,NULL,NULL,NULL,'1.1',0,NULL,NULL);
CREATE INDEX "IX_ApiCommands_PostBodyObjectTypeID" ON "ApiCommands" ("PostBodyObjectTypeID");
CREATE INDEX "IX_ApiCommands_ResponseBodyObjectTypeID" ON "ApiCommands" ("ResponseBodyObjectTypeID");
CREATE UNIQUE INDEX "IX_ApiCommands_ControllerID_ApiName" ON "ApiCommands" ("ControllerID", "ApiName");
COMMIT;
