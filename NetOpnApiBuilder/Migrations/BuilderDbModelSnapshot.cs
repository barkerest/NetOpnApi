// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NetOpnApiBuilder;

namespace NetOpnApiBuilder.Migrations
{
    [DbContext(typeof(BuilderDb))]
    partial class BuilderDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.7");

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiCommand", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ApiVersion")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClrName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("ControllerID")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("PostBodyObjectTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("UsePost")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("PostBodyObjectTypeID");

                    b.HasIndex("ControllerID", "ApiName")
                        .IsUnique();

                    b.ToTable("ApiCommands");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiController", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ClrName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("ModuleID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("ModuleID", "ApiName")
                        .IsUnique();

                    b.ToTable("ApiControllers");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiModule", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ClrName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("ApiName")
                        .IsUnique();

                    b.ToTable("ApiModules");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiObjectProperty", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<bool>("CanBeNull")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClrName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("DataTypeObjectTypeID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ObjectTypeID")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("DataTypeObjectTypeID");

                    b.HasIndex("ObjectTypeID", "ApiName")
                        .IsUnique();

                    b.ToTable("ApiObjectProperties");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiObjectType", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiVersion")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(32);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.HasKey("ID");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ApiObjectTypes");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiQueryParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowNull")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ApiName")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<string>("ClrName")
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("CommandID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CommandID", "ApiName")
                        .IsUnique();

                    b.ToTable("ApiQueryParams");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiUrlParam", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("AllowNull")
                        .HasColumnType("INTEGER");

                    b.Property<int>("CommandID")
                        .HasColumnType("INTEGER");

                    b.Property<int>("DataType")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(100);

                    b.Property<int>("Order")
                        .HasColumnType("INTEGER");

                    b.HasKey("ID");

                    b.HasIndex("CommandID", "Order")
                        .IsUnique();

                    b.ToTable("ApiUrlCommands");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.TestDevice", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Host")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("TEXT")
                        .HasMaxLength(200);

                    b.HasKey("ID");

                    b.ToTable("TestDevice");
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiCommand", b =>
                {
                    b.HasOne("NetOpnApiBuilder.Models.ApiController", "Controller")
                        .WithMany("Commands")
                        .HasForeignKey("ControllerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NetOpnApiBuilder.Models.ApiObjectType", "PostBodyObjectType")
                        .WithMany()
                        .HasForeignKey("PostBodyObjectTypeID")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiController", b =>
                {
                    b.HasOne("NetOpnApiBuilder.Models.ApiModule", "Module")
                        .WithMany("Controllers")
                        .HasForeignKey("ModuleID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiObjectProperty", b =>
                {
                    b.HasOne("NetOpnApiBuilder.Models.ApiObjectType", "DataTypeObjectType")
                        .WithMany()
                        .HasForeignKey("DataTypeObjectTypeID")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("NetOpnApiBuilder.Models.ApiObjectType", "ObjectType")
                        .WithMany("Properties")
                        .HasForeignKey("ObjectTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiQueryParam", b =>
                {
                    b.HasOne("NetOpnApiBuilder.Models.ApiCommand", "Command")
                        .WithMany("QueryParams")
                        .HasForeignKey("CommandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NetOpnApiBuilder.Models.ApiUrlParam", b =>
                {
                    b.HasOne("NetOpnApiBuilder.Models.ApiCommand", "Command")
                        .WithMany("UrlParams")
                        .HasForeignKey("CommandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
